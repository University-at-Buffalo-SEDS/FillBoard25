
FillBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080092d8  080092d8  0000a2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800937c  0800937c  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  0800937c  0800937c  0000a37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009384  08009384  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009384  08009384  0000a384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009388  08009388  0000a388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800938c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca0  2000005c  080093e8  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cfc  080093e8  0000bcfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a08b  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e76  00000000  00000000  00025117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00028f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f81  00000000  00000000  0002a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218a9  00000000  00000000  0002b369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a348  00000000  00000000  0004cc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb943  00000000  00000000  00066f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013289d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005810  00000000  00000000  001328e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001380f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080092c0 	.word	0x080092c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080092c0 	.word	0x080092c0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MCP3561_Init>:
 */

#include "Drivers/MCP3561.h"


void MCP3561_Init(MCP3561_Handle_t *handle ,SPI_HandleTypeDef *hspi){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]

	handle->hspi = hspi;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	601a      	str	r2, [r3, #0]
	handle->csPort = MCP3561_CS_PORT;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <MCP3561_Init+0x68>)
 80005c4:	605a      	str	r2, [r3, #4]
	handle->csPin = MCP3561_CS_PIN;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2201      	movs	r2, #1
 80005ca:	811a      	strh	r2, [r3, #8]

	//Full Reset of Device
	full_reset(handle);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f91c 	bl	800080a <full_reset>

	// 5ms delay after Reset
	HAL_Delay(5);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f000 fcda 	bl	8000f8c <HAL_Delay>

	//Set CONFIG0 Register
	write_reg(handle, CONFIG0_REG, VREF_SEL | CLK_SEL | CS_SEL | ADC_MODE);
 80005d8:	22a3      	movs	r2, #163	@ 0xa3
 80005da:	2101      	movs	r1, #1
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f8dd 	bl	800079c <write_reg>

	//Set CONFIG1 Register
	write_reg(handle, CONFIG1_REG, PRE | OSR);
 80005e2:	223c      	movs	r2, #60	@ 0x3c
 80005e4:	2102      	movs	r1, #2
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 f8d8 	bl	800079c <write_reg>

	//Set CONFIG2 Register
	write_reg(handle, CONFIG2_REG, BOOST | GAIN | AZ_MUX | AZ_REF);
 80005ec:	220e      	movs	r2, #14
 80005ee:	2103      	movs	r1, #3
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f8d3 	bl	800079c <write_reg>

	//Set CONFIG3 Register
	write_reg(handle, CONFIG3_REG, CONV_MODE | DATA_FORMAT | CRC_FORMAT | EN_CRCCOM | EN_OFFCAL | EN_GAINCAL);
 80005f6:	22e0      	movs	r2, #224	@ 0xe0
 80005f8:	2104      	movs	r1, #4
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f8ce 	bl	800079c <write_reg>

	//Set IRQ Register
	write_reg(handle, IRQ_REG, IRQ_MODE | EN_FASTCMD | EN_STP);
 8000600:	2203      	movs	r2, #3
 8000602:	2105      	movs	r1, #5
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f8c9 	bl	800079c <write_reg>

	//Set MUX Register, CH0 will be selected by default
	select_ch0(handle);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f82f 	bl	800066e <select_ch0>


}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	48000400 	.word	0x48000400

0800061c <MCP3561_Step>:


void MCP3561_Step(MCP3561_Handle_t *handle){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]



	uint8_t adc_data[4];

	read_buf(handle, ADCDATA_REG, adc_data, 4);
 8000624:	f107 0208 	add.w	r2, r7, #8
 8000628:	2304      	movs	r3, #4
 800062a:	2100      	movs	r1, #0
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 f83a 	bl	80006a6 <read_buf>

	// I use a signed integer as the ADC will output a signed value

	int32_t result =  (int32_t)adc_data[3] << 24 | (int32_t)adc_data[2] << 16 | (int32_t)adc_data[1] << 8 | adc_data[0];
 8000632:	7afb      	ldrb	r3, [r7, #11]
 8000634:	061a      	lsls	r2, r3, #24
 8000636:	7abb      	ldrb	r3, [r7, #10]
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	431a      	orrs	r2, r3
 800063c:	7a7b      	ldrb	r3, [r7, #9]
 800063e:	021b      	lsls	r3, r3, #8
 8000640:	4313      	orrs	r3, r2
 8000642:	7a3a      	ldrb	r2, [r7, #8]
 8000644:	4313      	orrs	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]

	if(handle->current_channel == 0){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d103      	bne.n	8000658 <MCP3561_Step+0x3c>
		handle->last_ch0_data = result;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	611a      	str	r2, [r3, #16]
	}
	else if(handle->current_channel == 1){
		handle->last_ch1_data = result;
	}

}
 8000656:	e006      	b.n	8000666 <MCP3561_Step+0x4a>
	else if(handle->current_channel == 1){
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d102      	bne.n	8000666 <MCP3561_Step+0x4a>
		handle->last_ch1_data = result;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	615a      	str	r2, [r3, #20]
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <select_ch0>:
void select_ch1(MCP3561_Handle_t *handle){
	write_reg(handle, MUX_REG, MUX_CH1);
	handle->current_channel = 1;
}

void select_ch0(MCP3561_Handle_t *handle){
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	write_reg(handle, MUX_REG, MUX_CH0);
 8000676:	2208      	movs	r2, #8
 8000678:	2106      	movs	r1, #6
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f88e 	bl	800079c <write_reg>
	handle->current_channel = 0;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <MCP3561_Get_CH0_Data>:

int32_t MCP3561_Get_CH0_Data(MCP3561_Handle_t *handle){
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	return handle->last_ch0_data;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	691b      	ldr	r3, [r3, #16]
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <read_buf>:
int32_t MCP3561_Get_CH1_Data(MCP3561_Handle_t *handle){
	return handle->last_ch1_data;
}

void read_buf(MCP3561_Handle_t *handle, uint8_t reg, uint8_t *buf, uint8_t len){
 80006a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006aa:	b089      	sub	sp, #36	@ 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	461a      	mov	r2, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	72fb      	strb	r3, [r7, #11]
 80006b8:	4613      	mov	r3, r2
 80006ba:	72bb      	strb	r3, [r7, #10]
 80006bc:	466b      	mov	r3, sp
 80006be:	461e      	mov	r6, r3

	//Start Communication by pulling CS PIN low
	HAL_GPIO_WritePin(handle->csPort,handle->csPin,GPIO_PIN_RESET);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6858      	ldr	r0, [r3, #4]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	2200      	movs	r2, #0
 80006ce:	4619      	mov	r1, r3
 80006d0:	f000 fee4 	bl	800149c <HAL_GPIO_WritePin>

	//Shift Reg address left two and set CMD[1:0] to 11 for Incremental Read
	reg = reg << 2;
 80006d4:	7afb      	ldrb	r3, [r7, #11]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x3;
 80006dc:	7afb      	ldrb	r3, [r7, #11]
 80006de:	f043 0303 	orr.w	r3, r3, #3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	72fb      	strb	r3, [r7, #11]

	//Transmit Read Command
	HAL_SPI_Transmit(handle->hspi,&reg,1,WRITE_TIMEOUT);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	6818      	ldr	r0, [r3, #0]
 80006ea:	f107 010b 	add.w	r1, r7, #11
 80006ee:	2364      	movs	r3, #100	@ 0x64
 80006f0:	2201      	movs	r2, #1
 80006f2:	f003 fb3e 	bl	8003d72 <HAL_SPI_Transmit>

	// Read back data into the data buffer

	uint8_t temp_buf[len+1];
 80006f6:	7abb      	ldrb	r3, [r7, #10]
 80006f8:	1c59      	adds	r1, r3, #1
 80006fa:	1e4b      	subs	r3, r1, #1
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	460a      	mov	r2, r1
 8000700:	2300      	movs	r3, #0
 8000702:	4690      	mov	r8, r2
 8000704:	4699      	mov	r9, r3
 8000706:	f04f 0200 	mov.w	r2, #0
 800070a:	f04f 0300 	mov.w	r3, #0
 800070e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000712:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000716:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800071a:	460a      	mov	r2, r1
 800071c:	2300      	movs	r3, #0
 800071e:	4614      	mov	r4, r2
 8000720:	461d      	mov	r5, r3
 8000722:	f04f 0200 	mov.w	r2, #0
 8000726:	f04f 0300 	mov.w	r3, #0
 800072a:	00eb      	lsls	r3, r5, #3
 800072c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000730:	00e2      	lsls	r2, r4, #3
 8000732:	460b      	mov	r3, r1
 8000734:	3307      	adds	r3, #7
 8000736:	08db      	lsrs	r3, r3, #3
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	ebad 0d03 	sub.w	sp, sp, r3
 800073e:	466b      	mov	r3, sp
 8000740:	3300      	adds	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

	HAL_SPI_Receive(handle->hspi, temp_buf, len+1, READ_TIMEOUT);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	7abb      	ldrb	r3, [r7, #10]
 800074a:	b29b      	uxth	r3, r3
 800074c:	3301      	adds	r3, #1
 800074e:	b29a      	uxth	r2, r3
 8000750:	2364      	movs	r3, #100	@ 0x64
 8000752:	6979      	ldr	r1, [r7, #20]
 8000754:	f003 fc83 	bl	800405e <HAL_SPI_Receive>

	//Write everything in temp_buf to buf except for status byte at index 0

	for(uint8_t i = 0; i < len; i++){
 8000758:	2300      	movs	r3, #0
 800075a:	77fb      	strb	r3, [r7, #31]
 800075c:	e00a      	b.n	8000774 <read_buf+0xce>
		buf[i] = temp_buf[i+1];
 800075e:	7ffb      	ldrb	r3, [r7, #31]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	7ffb      	ldrb	r3, [r7, #31]
 8000764:	6879      	ldr	r1, [r7, #4]
 8000766:	440b      	add	r3, r1
 8000768:	6979      	ldr	r1, [r7, #20]
 800076a:	5c8a      	ldrb	r2, [r1, r2]
 800076c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++){
 800076e:	7ffb      	ldrb	r3, [r7, #31]
 8000770:	3301      	adds	r3, #1
 8000772:	77fb      	strb	r3, [r7, #31]
 8000774:	7ffa      	ldrb	r2, [r7, #31]
 8000776:	7abb      	ldrb	r3, [r7, #10]
 8000778:	429a      	cmp	r2, r3
 800077a:	d3f0      	bcc.n	800075e <read_buf+0xb8>
	}

	// End communication

	HAL_GPIO_WritePin(handle->csPort, handle->csPin, GPIO_PIN_SET);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	6858      	ldr	r0, [r3, #4]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000786:	b29b      	uxth	r3, r3
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	f000 fe86 	bl	800149c <HAL_GPIO_WritePin>
 8000790:	46b5      	mov	sp, r6


}
 8000792:	bf00      	nop
 8000794:	3724      	adds	r7, #36	@ 0x24
 8000796:	46bd      	mov	sp, r7
 8000798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800079c <write_reg>:
	//We only return register_data[1] because we skip the STATUS byte
	return register_data[1];

}

void write_reg(MCP3561_Handle_t *handle, uint8_t reg, uint8_t data){
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
 80007a8:	4613      	mov	r3, r2
 80007aa:	70bb      	strb	r3, [r7, #2]

	//Start Communication by pulling CS PIN low
	HAL_GPIO_WritePin(handle->csPort,handle->csPin,GPIO_PIN_RESET);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6858      	ldr	r0, [r3, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	f000 fe6e 	bl	800149c <HAL_GPIO_WritePin>

	//Shift Reg left two since address given in the CMD[5:2] bits

	reg = reg << 2;
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	70fb      	strb	r3, [r7, #3]

	//Set CMD[1:0] = 10 for Incremental Write
	reg = reg & ~0x3; //Clear [1:0]
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	f023 0303 	bic.w	r3, r3, #3
 80007cc:	70fb      	strb	r3, [r7, #3]
 	reg = reg | 0x2;  //Set [1:0]
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	70fb      	strb	r3, [r7, #3]

 	//Transmit Write Command

 	uint8_t tx[2];

 	tx[0] = reg;
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	733b      	strb	r3, [r7, #12]
 	tx[1] = data;
 80007da:	78bb      	ldrb	r3, [r7, #2]
 80007dc:	737b      	strb	r3, [r7, #13]

 	HAL_SPI_Transmit(handle->hspi, tx, 2, WRITE_TIMEOUT);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	f107 010c 	add.w	r1, r7, #12
 80007e6:	2364      	movs	r3, #100	@ 0x64
 80007e8:	2202      	movs	r2, #2
 80007ea:	f003 fac2 	bl	8003d72 <HAL_SPI_Transmit>


 	//End communication
 	HAL_GPIO_WritePin(handle->csPort, handle->csPin, GPIO_PIN_SET);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6858      	ldr	r0, [r3, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	2201      	movs	r2, #1
 80007fc:	4619      	mov	r1, r3
 80007fe:	f000 fe4d 	bl	800149c <HAL_GPIO_WritePin>

}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <full_reset>:

void full_reset(MCP3561_Handle_t *handle){
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	// See page 68 of MCP3561 for more info on Full Reset Command


	//Start Communication by pulling CS PIN low

	HAL_GPIO_WritePin(handle->csPort,handle->csPin,GPIO_PIN_RESET);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6858      	ldr	r0, [r3, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800081c:	b29b      	uxth	r3, r3
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	f000 fe3b 	bl	800149c <HAL_GPIO_WritePin>

	//Transmit FULL_RESET_CMD

	uint8_t cmd = FULL_RESET_CMD;
 8000826:	2338      	movs	r3, #56	@ 0x38
 8000828:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(handle->hspi, &cmd, 1 , WRITE_TIMEOUT);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	f107 010f 	add.w	r1, r7, #15
 8000832:	2364      	movs	r3, #100	@ 0x64
 8000834:	2201      	movs	r2, #1
 8000836:	f003 fa9c 	bl	8003d72 <HAL_SPI_Transmit>

	//End communication

	HAL_GPIO_WritePin(handle->csPort, handle->csPin, GPIO_PIN_SET);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6858      	ldr	r0, [r3, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000844:	b29b      	uxth	r3, r3
 8000846:	2201      	movs	r2, #1
 8000848:	4619      	mov	r1, r3
 800084a:	f000 fe27 	bl	800149c <HAL_GPIO_WritePin>

}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <CDC_Transmit_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

extern void CDC_Transmit_Print(const char *format, ...) {
 8000856:	b40f      	push	{r0, r1, r2, r3}
 8000858:	b580      	push	{r7, lr}
 800085a:	b0c2      	sub	sp, #264	@ 0x108
 800085c:	af00      	add	r7, sp, #0
	char buf[PRINT_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
 800085e:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800086a:	601a      	str	r2, [r3, #0]
	int n = vsprintf(buf, format, args);
 800086c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000874:	1d38      	adds	r0, r7, #4
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800087c:	f008 f896 	bl	80089ac <vsiprintf>
 8000880:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	CDC_Transmit_FS(buf, n);
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 800088a:	4618      	mov	r0, r3
 800088c:	f007 fe4e 	bl	800852c <CDC_Transmit_FS>
}
 8000890:	bf00      	nop
 8000892:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000896:	46bd      	mov	sp, r7
 8000898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800089c:	b004      	add	sp, #16
 800089e:	4770      	bx	lr

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a6:	f000 fb00 	bl	8000eaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008aa:	f000 f823 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ae:	f000 f8f3 	bl	8000a98 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80008b2:	f000 f869 	bl	8000988 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80008b6:	f000 f8b1 	bl	8000a1c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  CDC_Transmit_Print("BEGGINING MCP TEST\r\n");
 80008ba:	480b      	ldr	r0, [pc, #44]	@ (80008e8 <main+0x48>)
 80008bc:	f7ff ffcb 	bl	8000856 <CDC_Transmit_Print>


  MCP3561_Handle_t *mcp_handle;

  MCP3561_Init(mcp_handle, &hspi1);
 80008c0:	490a      	ldr	r1, [pc, #40]	@ (80008ec <main+0x4c>)
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fe74 	bl	80005b0 <MCP3561_Init>

  MCP3561_Step(mcp_handle);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff fea7 	bl	800061c <MCP3561_Step>

  while(1){
	  MCP3561_Step(mcp_handle);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fea4 	bl	800061c <MCP3561_Step>

	  CDC_Transmit_Print("ADC : %d,\n", MCP3561_Get_CH0_Data(mcp_handle) );
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff feda 	bl	800068e <MCP3561_Get_CH0_Data>
 80008da:	4603      	mov	r3, r0
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <main+0x50>)
 80008e0:	f7ff ffb9 	bl	8000856 <CDC_Transmit_Print>
	  MCP3561_Step(mcp_handle);
 80008e4:	bf00      	nop
 80008e6:	e7f2      	b.n	80008ce <main+0x2e>
 80008e8:	080092e4 	.word	0x080092e4
 80008ec:	2000010c 	.word	0x2000010c
 80008f0:	080092fc 	.word	0x080092fc

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	@ 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	2238      	movs	r2, #56	@ 0x38
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f008 f85c 	bl	80089c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000916:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800091a:	f002 f91b 	bl	8002b54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800091e:	2322      	movs	r3, #34	@ 0x22
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000922:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000928:	2340      	movs	r3, #64	@ 0x40
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	4618      	mov	r0, r3
 800093a:	f002 f9bf 	bl	8002cbc <HAL_RCC_OscConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000944:	f000 f944 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000948:	230f      	movs	r3, #15
 800094a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800094c:	2301      	movs	r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fcbd 	bl	80032e0 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800096c:	f000 f930 	bl	8000bd0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000970:	2200      	movs	r2, #0
 8000972:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8000976:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800097a:	f002 fded 	bl	8003558 <HAL_RCC_MCOConfig>
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	@ 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800098c:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 800098e:	4a21      	ldr	r2, [pc, #132]	@ (8000a14 <MX_LPUART1_UART_Init+0x8c>)
 8000990:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000992:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 8000994:	4a20      	ldr	r2, [pc, #128]	@ (8000a18 <MX_LPUART1_UART_Init+0x90>)
 8000996:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000998:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800099e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 80009ac:	220c      	movs	r2, #12
 80009ae:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b0:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009c8:	4811      	ldr	r0, [pc, #68]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 80009ca:	f004 f85b 	bl	8004a84 <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80009d4:	f000 f8fc 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 80009dc:	f004 fdf6 	bl	80055cc <HAL_UARTEx_SetTxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80009e6:	f000 f8f3 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4808      	ldr	r0, [pc, #32]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 80009ee:	f004 fe2b 	bl	8005648 <HAL_UARTEx_SetRxFifoThreshold>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80009f8:	f000 f8ea 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <MX_LPUART1_UART_Init+0x88>)
 80009fe:	f004 fdac 	bl	800555a <HAL_UARTEx_DisableFifoMode>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000a08:	f000 f8e2 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000078 	.word	0x20000078
 8000a14:	40008000 	.word	0x40008000
 8000a18:	00033324 	.word	0x00033324

08000a1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a22:	4a1c      	ldr	r2, [pc, #112]	@ (8000a94 <MX_SPI1_Init+0x78>)
 8000a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a36:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a76:	2208      	movs	r2, #8
 8000a78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_SPI1_Init+0x74>)
 8000a7c:	f003 f8ce 	bl	8003c1c <HAL_SPI_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a86:	f000 f8a3 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000010c 	.word	0x2000010c
 8000a94:	40013000 	.word	0x40013000

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b46      	ldr	r3, [pc, #280]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	4a45      	ldr	r2, [pc, #276]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aba:	4b43      	ldr	r3, [pc, #268]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac6:	4b40      	ldr	r3, [pc, #256]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	4a3f      	ldr	r2, [pc, #252]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000acc:	f043 0320 	orr.w	r3, r3, #32
 8000ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	f003 0320 	and.w	r3, r3, #32
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a39      	ldr	r2, [pc, #228]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b37      	ldr	r3, [pc, #220]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b34      	ldr	r3, [pc, #208]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4a33      	ldr	r2, [pc, #204]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4b31      	ldr	r3, [pc, #196]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f240 2103 	movw	r1, #515	@ 0x203
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b18:	f000 fcc0 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f248 01c1 	movw	r1, #32961	@ 0x80c1
 8000b22:	482a      	ldr	r0, [pc, #168]	@ (8000bcc <MX_GPIO_Init+0x134>)
 8000b24:	f000 fcba 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9;
 8000b28:	f240 2303 	movw	r3, #515	@ 0x203
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b44:	f000 fb28 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10;
 8000b48:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b60:	f000 fb1a 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB15 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 8000b64:	f248 03c1 	movw	r3, #32961	@ 0x80c1
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4813      	ldr	r0, [pc, #76]	@ (8000bcc <MX_GPIO_Init+0x134>)
 8000b7e:	f000 fb0b 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <MX_GPIO_Init+0x134>)
 8000b96:	f000 faff 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bba:	f000 faed 	bl	8001198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	@ 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	48000400 	.word	0x48000400

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <HAL_MspInit+0x50>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be6:	4a11      	ldr	r2, [pc, #68]	@ (8000c2c <HAL_MspInit+0x50>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <HAL_MspInit+0x50>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <HAL_MspInit+0x50>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000c2c <HAL_MspInit+0x50>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <HAL_MspInit+0x50>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	210f      	movs	r1, #15
 8000c16:	f06f 0001 	mvn.w	r0, #1
 8000c1a:	f000 fa96 	bl	800114a <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c1e:	f002 f83d 	bl	8002c9c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b09e      	sub	sp, #120	@ 0x78
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2250      	movs	r2, #80	@ 0x50
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f007 feb5 	bl	80089c0 <memset>
  if(huart->Instance==LPUART1)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd8 <HAL_UART_MspInit+0xa8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d136      	bne.n	8000cce <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c60:	2320      	movs	r3, #32
 8000c62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 fd99 	bl	80037a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c78:	f7ff ffaa 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <HAL_UART_MspInit+0xac>)
 8000c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c80:	4a16      	ldr	r2, [pc, #88]	@ (8000cdc <HAL_UART_MspInit+0xac>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_UART_MspInit+0xac>)
 8000c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_UART_MspInit+0xac>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c98:	4a10      	ldr	r2, [pc, #64]	@ (8000cdc <HAL_UART_MspInit+0xac>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <HAL_UART_MspInit+0xac>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cac:	230c      	movs	r3, #12
 8000cae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cca:	f000 fa65 	bl	8001198 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000cce:	bf00      	nop
 8000cd0:	3778      	adds	r7, #120	@ 0x78
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40008000 	.word	0x40008000
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_SPI_MspInit+0x7c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d128      	bne.n	8000d54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d06:	4a16      	ldr	r2, [pc, #88]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d32:	23e0      	movs	r3, #224	@ 0xe0
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d42:	2305      	movs	r3, #5
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d50:	f000 fa22 	bl	8001198 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	@ 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40013000 	.word	0x40013000
 8000d60:	40021000 	.word	0x40021000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <NMI_Handler+0x4>

08000d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9e:	f000 f8d7 	bl	8000f50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000da2:	f007 fb33 	bl	800840c <xTaskGetSchedulerState>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d001      	beq.n	8000db0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dac:	f007 fb9c 	bl	80084e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <USB_LP_IRQHandler+0x10>)
 8000dba:	f000 fb87 	bl	80014cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200008d8 	.word	0x200008d8

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f007 fdea 	bl	80089d0 <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2001c000 	.word	0x2001c000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	20000170 	.word	0x20000170
 8000e30:	20000d00 	.word	0x20000d00

08000e34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e5c:	f7ff ffea 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	@ (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e86:	f007 fda9 	bl	80089dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e8a:	f7ff fd09 	bl	80008a0 <main>

08000e8e <LoopForever>:

LoopForever:
    b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   r0, =_estack
 8000e90:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e9c:	0800938c 	.word	0x0800938c
  ldr r2, =_sbss
 8000ea0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ea4:	20000cfc 	.word	0x20000cfc

08000ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC1_2_IRQHandler>

08000eaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f93d 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f000 f80e 	bl	8000edc <HAL_InitTick>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	e001      	b.n	8000ed0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ecc:	f7ff fe86 	bl	8000bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <HAL_InitTick+0x68>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d022      	beq.n	8000f36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <HAL_InitTick+0x6c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <HAL_InitTick+0x68>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f93a 	bl	800117e <HAL_SYSTICK_Config>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10f      	bne.n	8000f30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b0f      	cmp	r3, #15
 8000f14:	d809      	bhi.n	8000f2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f16:	2200      	movs	r2, #0
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1e:	f000 f914 	bl	800114a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <HAL_InitTick+0x70>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	e007      	b.n	8000f3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e004      	b.n	8000f3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e001      	b.n	8000f3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HAL_IncTick+0x1c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_IncTick+0x20>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a03      	ldr	r2, [pc, #12]	@ (8000f6c <HAL_IncTick+0x1c>)
 8000f60:	6013      	str	r3, [r2, #0]
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	20000174 	.word	0x20000174
 8000f70:	20000008 	.word	0x20000008

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000174 	.word	0x20000174

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d004      	beq.n	8000fb0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <HAL_Delay+0x40>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb0:	bf00      	nop
 8000fb2:	f7ff ffdf 	bl	8000f74 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d8f7      	bhi.n	8000fb2 <HAL_Delay+0x26>
  {
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	@ (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	@ (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	@ 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f7ff ff8e 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff47 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff5e 	bl	8001018 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff90 	bl	8001088 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5f 	bl	8001034 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffb2 	bl	80010f0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011a6:	e15a      	b.n	800145e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 814c 	beq.w	8001458 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d005      	beq.n	80011d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d130      	bne.n	800123a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120e:	2201      	movs	r2, #1
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	f003 0201 	and.w	r2, r3, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b03      	cmp	r3, #3
 8001244:	d017      	beq.n	8001276 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d123      	bne.n	80012ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	6939      	ldr	r1, [r7, #16]
 80012c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0203 	and.w	r2, r3, #3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80a6 	beq.w	8001458 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130c:	4b5b      	ldr	r3, [pc, #364]	@ (800147c <HAL_GPIO_Init+0x2e4>)
 800130e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001310:	4a5a      	ldr	r2, [pc, #360]	@ (800147c <HAL_GPIO_Init+0x2e4>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6613      	str	r3, [r2, #96]	@ 0x60
 8001318:	4b58      	ldr	r3, [pc, #352]	@ (800147c <HAL_GPIO_Init+0x2e4>)
 800131a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001324:	4a56      	ldr	r2, [pc, #344]	@ (8001480 <HAL_GPIO_Init+0x2e8>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800134e:	d01f      	beq.n	8001390 <HAL_GPIO_Init+0x1f8>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a4c      	ldr	r2, [pc, #304]	@ (8001484 <HAL_GPIO_Init+0x2ec>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d019      	beq.n	800138c <HAL_GPIO_Init+0x1f4>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a4b      	ldr	r2, [pc, #300]	@ (8001488 <HAL_GPIO_Init+0x2f0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d013      	beq.n	8001388 <HAL_GPIO_Init+0x1f0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a4a      	ldr	r2, [pc, #296]	@ (800148c <HAL_GPIO_Init+0x2f4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d00d      	beq.n	8001384 <HAL_GPIO_Init+0x1ec>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a49      	ldr	r2, [pc, #292]	@ (8001490 <HAL_GPIO_Init+0x2f8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d007      	beq.n	8001380 <HAL_GPIO_Init+0x1e8>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a48      	ldr	r2, [pc, #288]	@ (8001494 <HAL_GPIO_Init+0x2fc>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d101      	bne.n	800137c <HAL_GPIO_Init+0x1e4>
 8001378:	2305      	movs	r3, #5
 800137a:	e00a      	b.n	8001392 <HAL_GPIO_Init+0x1fa>
 800137c:	2306      	movs	r3, #6
 800137e:	e008      	b.n	8001392 <HAL_GPIO_Init+0x1fa>
 8001380:	2304      	movs	r3, #4
 8001382:	e006      	b.n	8001392 <HAL_GPIO_Init+0x1fa>
 8001384:	2303      	movs	r3, #3
 8001386:	e004      	b.n	8001392 <HAL_GPIO_Init+0x1fa>
 8001388:	2302      	movs	r3, #2
 800138a:	e002      	b.n	8001392 <HAL_GPIO_Init+0x1fa>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_GPIO_Init+0x1fa>
 8001390:	2300      	movs	r3, #0
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	f002 0203 	and.w	r2, r2, #3
 8001398:	0092      	lsls	r2, r2, #2
 800139a:	4093      	lsls	r3, r2
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a2:	4937      	ldr	r1, [pc, #220]	@ (8001480 <HAL_GPIO_Init+0x2e8>)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b0:	4b39      	ldr	r3, [pc, #228]	@ (8001498 <HAL_GPIO_Init+0x300>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013d4:	4a30      	ldr	r2, [pc, #192]	@ (8001498 <HAL_GPIO_Init+0x300>)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013da:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <HAL_GPIO_Init+0x300>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013fe:	4a26      	ldr	r2, [pc, #152]	@ (8001498 <HAL_GPIO_Init+0x300>)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001404:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <HAL_GPIO_Init+0x300>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001428:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <HAL_GPIO_Init+0x300>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <HAL_GPIO_Init+0x300>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001452:	4a11      	ldr	r2, [pc, #68]	@ (8001498 <HAL_GPIO_Init+0x300>)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3301      	adds	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	f47f ae9d 	bne.w	80011a8 <HAL_GPIO_Init+0x10>
  }
}
 800146e:	bf00      	nop
 8001470:	bf00      	nop
 8001472:	371c      	adds	r7, #28
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000
 8001480:	40010000 	.word	0x40010000
 8001484:	48000400 	.word	0x48000400
 8001488:	48000800 	.word	0x48000800
 800148c:	48000c00 	.word	0x48000c00
 8001490:	48001000 	.word	0x48001000
 8001494:	48001400 	.word	0x48001400
 8001498:	40010400 	.word	0x40010400

0800149c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
 80014a8:	4613      	mov	r3, r2
 80014aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ac:	787b      	ldrb	r3, [r7, #1]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 fce6 	bl	8006eaa <USB_ReadInterrupts>
 80014de:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 faa6 	bl	8001a3c <PCD_EP_ISR_Handler>

    return;
 80014f0:	e110      	b.n	8001714 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d013      	beq.n	8001524 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001504:	b29a      	uxth	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800150e:	b292      	uxth	r2, r2
 8001510:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f007 f884 	bl	8008622 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800151a:	2100      	movs	r1, #0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f8fc 	bl	800171a <HAL_PCD_SetAddress>

    return;
 8001522:	e0f7      	b.n	8001714 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00c      	beq.n	8001548 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001540:	b292      	uxth	r2, r2
 8001542:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001546:	e0e5      	b.n	8001714 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800155a:	b29a      	uxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001564:	b292      	uxth	r2, r2
 8001566:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800156a:	e0d3      	b.n	8001714 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d034      	beq.n	80015e0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0204 	bic.w	r2, r2, #4
 8001588:	b292      	uxth	r2, r2
 800158a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001596:	b29a      	uxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0208 	bic.w	r2, r2, #8
 80015a0:	b292      	uxth	r2, r2
 80015a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d107      	bne.n	80015c0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015b8:	2100      	movs	r1, #0
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f007 f978 	bl	80088b0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f007 f867 	bl	8008694 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80015d8:	b292      	uxth	r2, r2
 80015da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015de:	e099      	b.n	8001714 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d027      	beq.n	800163a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0208 	orr.w	r2, r2, #8
 80015fc:	b292      	uxth	r2, r2
 80015fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001614:	b292      	uxth	r2, r2
 8001616:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001622:	b29a      	uxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0204 	orr.w	r2, r2, #4
 800162c:	b292      	uxth	r2, r2
 800162e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f007 f814 	bl	8008660 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001638:	e06c      	b.n	8001714 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001640:	2b00      	cmp	r3, #0
 8001642:	d040      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800164c:	b29a      	uxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001656:	b292      	uxth	r2, r2
 8001658:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d12b      	bne.n	80016be <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0204 	orr.w	r2, r2, #4
 8001678:	b292      	uxth	r2, r2
 800167a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001686:	b29a      	uxth	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0208 	orr.w	r2, r2, #8
 8001690:	b292      	uxth	r2, r2
 8001692:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80016b4:	2101      	movs	r1, #1
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f007 f8fa 	bl	80088b0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80016bc:	e02a      	b.n	8001714 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f006 ffce 	bl	8008660 <HAL_PCD_SuspendCallback>
    return;
 80016c4:	e026      	b.n	8001714 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00f      	beq.n	80016f0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016d8:	b29a      	uxth	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016e2:	b292      	uxth	r2, r2
 80016e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f006 ff8c 	bl	8008606 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016ee:	e011      	b.n	8001714 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00c      	beq.n	8001714 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800170c:	b292      	uxth	r2, r2
 800170e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001712:	bf00      	nop
  }
}
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_PCD_SetAddress+0x1a>
 8001730:	2302      	movs	r3, #2
 8001732:	e012      	b.n	800175a <HAL_PCD_SetAddress+0x40>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f005 fb99 	bl	8006e82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	4608      	mov	r0, r1
 800176c:	4611      	mov	r1, r2
 800176e:	461a      	mov	r2, r3
 8001770:	4603      	mov	r3, r0
 8001772:	70fb      	strb	r3, [r7, #3]
 8001774:	460b      	mov	r3, r1
 8001776:	803b      	strh	r3, [r7, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001784:	2b00      	cmp	r3, #0
 8001786:	da0e      	bge.n	80017a6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	f003 0207 	and.w	r2, r3, #7
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	3310      	adds	r3, #16
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	705a      	strb	r2, [r3, #1]
 80017a4:	e00e      	b.n	80017c4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	f003 0207 	and.w	r2, r3, #7
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80017d0:	883b      	ldrh	r3, [r7, #0]
 80017d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	78ba      	ldrb	r2, [r7, #2]
 80017de:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017e0:	78bb      	ldrb	r3, [r7, #2]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d102      	bne.n	80017ec <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_PCD_EP_Open+0x98>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e00e      	b.n	8001818 <HAL_PCD_EP_Open+0xb6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68f9      	ldr	r1, [r7, #12]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 ffa9 	bl	8005760 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001816:	7afb      	ldrb	r3, [r7, #11]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	460b      	mov	r3, r1
 800182e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	f003 0207 	and.w	r2, r3, #7
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2200      	movs	r2, #0
 800185e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001860:	7afb      	ldrb	r3, [r7, #11]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	b2da      	uxtb	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	4618      	mov	r0, r3
 8001874:	f004 fc5c 	bl	8006130 <USB_EPStartXfer>

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	460b      	mov	r3, r1
 8001890:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001892:	7afb      	ldrb	r3, [r7, #11]
 8001894:	f003 0207 	and.w	r2, r3, #7
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	3310      	adds	r3, #16
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2200      	movs	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2201      	movs	r2, #1
 80018cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018ce:	7afb      	ldrb	r3, [r7, #11]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6979      	ldr	r1, [r7, #20]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f004 fc25 	bl	8006130 <USB_EPStartXfer>

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	7912      	ldrb	r2, [r2, #4]
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e03e      	b.n	800198c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800190e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001912:	2b00      	cmp	r3, #0
 8001914:	da0e      	bge.n	8001934 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	f003 0207 	and.w	r2, r3, #7
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	3310      	adds	r3, #16
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	705a      	strb	r2, [r3, #1]
 8001932:	e00c      	b.n	800194e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	b2da      	uxtb	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_PCD_EP_SetStall+0x7e>
 800196a:	2302      	movs	r3, #2
 800196c:	e00e      	b.n	800198c <HAL_PCD_EP_SetStall+0x9c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68f9      	ldr	r1, [r7, #12]
 800197c:	4618      	mov	r0, r3
 800197e:	f005 f986 	bl	8006c8e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	7912      	ldrb	r2, [r2, #4]
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e040      	b.n	8001a34 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da0e      	bge.n	80019d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	f003 0207 	and.w	r2, r3, #7
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	3310      	adds	r3, #16
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	705a      	strb	r2, [r3, #1]
 80019d6:	e00e      	b.n	80019f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	f003 0207 	and.w	r2, r3, #7
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_PCD_EP_ClrStall+0x82>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e00e      	b.n	8001a34 <HAL_PCD_EP_ClrStall+0xa0>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68f9      	ldr	r1, [r7, #12]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f005 f983 	bl	8006d30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b092      	sub	sp, #72	@ 0x48
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a44:	e333      	b.n	80020ae <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a4e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a50:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001a5c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f040 8108 	bne.w	8001c76 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d14c      	bne.n	8001b0a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a80:	813b      	strh	r3, [r7, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	893b      	ldrh	r3, [r7, #8]
 8001a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3310      	adds	r3, #16
 8001a98:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ac0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	441a      	add	r2, r3
 8001acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ace:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f006 fd7d 	bl	80085d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7b1b      	ldrb	r3, [r3, #12]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 82e5 	beq.w	80020ae <PCD_EP_ISR_Handler+0x672>
 8001ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 82e0 	bne.w	80020ae <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7b1b      	ldrb	r3, [r3, #12]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	731a      	strb	r2, [r3, #12]
 8001b08:	e2d1      	b.n	80020ae <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b10:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d032      	beq.n	8001b8a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b4a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b58:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b5c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	f005 f9f5 	bl	8006f4e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b70:	4013      	ands	r3, r2
 8001b72:	817b      	strh	r3, [r7, #10]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	897a      	ldrh	r2, [r7, #10]
 8001b7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b7e:	b292      	uxth	r2, r2
 8001b80:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f006 fcf8 	bl	8008578 <HAL_PCD_SetupStageCallback>
 8001b88:	e291      	b.n	80020ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b8a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f280 828d 	bge.w	80020ae <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	81fb      	strh	r3, [r7, #14]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	89fa      	ldrh	r2, [r7, #14]
 8001baa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bae:	b292      	uxth	r2, r2
 8001bb0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bd8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d019      	beq.n	8001c16 <PCD_EP_ISR_Handler+0x1da>
 8001be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d015      	beq.n	8001c16 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bf0:	6959      	ldr	r1, [r3, #20]
 8001bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bf4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bf8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	f005 f9a7 	bl	8006f4e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	441a      	add	r2, r3
 8001c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c0c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f006 fcc3 	bl	800859c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001c1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 8242 	bne.w	80020ae <PCD_EP_ISR_Handler+0x672>
 8001c2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001c2c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001c30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001c34:	f000 823b 	beq.w	80020ae <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c48:	81bb      	strh	r3, [r7, #12]
 8001c4a:	89bb      	ldrh	r3, [r7, #12]
 8001c4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001c50:	81bb      	strh	r3, [r7, #12]
 8001c52:	89bb      	ldrh	r3, [r7, #12]
 8001c54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001c58:	81bb      	strh	r3, [r7, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	89bb      	ldrh	r3, [r7, #12]
 8001c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	8013      	strh	r3, [r2, #0]
 8001c74:	e21b      	b.n	80020ae <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c88:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f280 80f1 	bge.w	8001e74 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001ca8:	4013      	ands	r3, r2
 8001caa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001cbc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001cc0:	b292      	uxth	r2, r2
 8001cc2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001cc4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cdc:	7b1b      	ldrb	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d123      	bne.n	8001d2a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8001d0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 808b 	beq.w	8001e2a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d1a:	6959      	ldr	r1, [r3, #20]
 8001d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d1e:	88da      	ldrh	r2, [r3, #6]
 8001d20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001d24:	f005 f913 	bl	8006f4e <USB_ReadPMA>
 8001d28:	e07f      	b.n	8001e2a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d2c:	78db      	ldrb	r3, [r3, #3]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d109      	bne.n	8001d46 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001d34:	461a      	mov	r2, r3
 8001d36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f9c6 	bl	80020ca <HAL_PCD_EP_DB_Receive>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001d44:	e071      	b.n	8001e2a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d60:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	441a      	add	r2, r3
 8001d70:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001d72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d022      	beq.n	8001de6 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dc4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001dc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d02c      	beq.n	8001e2a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dd6:	6959      	ldr	r1, [r3, #20]
 8001dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dda:	891a      	ldrh	r2, [r3, #8]
 8001ddc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001de0:	f005 f8b5 	bl	8006f4e <USB_ReadPMA>
 8001de4:	e021      	b.n	8001e2a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001e0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e1c:	6959      	ldr	r1, [r3, #20]
 8001e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e20:	895a      	ldrh	r2, [r3, #10]
 8001e22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001e26:	f005 f892 	bl	8006f4e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001e32:	441a      	add	r2, r3
 8001e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001e40:	441a      	add	r2, r3
 8001e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e44:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <PCD_EP_ISR_Handler+0x41e>
 8001e4e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d206      	bcs.n	8001e68 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f006 fb9b 	bl	800859c <HAL_PCD_DataOutStageCallback>
 8001e66:	e005      	b.n	8001e74 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 f95e 	bl	8006130 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8117 	beq.w	80020ae <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e80:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	441a      	add	r2, r3
 8001ebe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ece:	78db      	ldrb	r3, [r3, #3]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	f040 80a1 	bne.w	8002018 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8001ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ede:	7b1b      	ldrb	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 8092 	beq.w	800200a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ee6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d046      	beq.n	8001f7e <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ef0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ef2:	785b      	ldrb	r3, [r3, #1]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d126      	bne.n	8001f46 <PCD_EP_ISR_Handler+0x50a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	00da      	lsls	r2, r3, #3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	801a      	strh	r2, [r3, #0]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	e061      	b.n	800200a <PCD_EP_ISR_Handler+0x5ce>
 8001f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f48:	785b      	ldrb	r3, [r3, #1]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d15d      	bne.n	800200a <PCD_EP_ISR_Handler+0x5ce>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	00da      	lsls	r2, r3, #3
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	801a      	strh	r2, [r3, #0]
 8001f7c:	e045      	b.n	800200a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d126      	bne.n	8001fda <PCD_EP_ISR_Handler+0x59e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	4413      	add	r3, r2
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	00da      	lsls	r2, r3, #3
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	4413      	add	r3, r2
 8001fae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001fb2:	623b      	str	r3, [r7, #32]
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	801a      	strh	r2, [r3, #0]
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	801a      	strh	r2, [r3, #0]
 8001fd8:	e017      	b.n	800200a <PCD_EP_ISR_Handler+0x5ce>
 8001fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d113      	bne.n	800200a <PCD_EP_ISR_Handler+0x5ce>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff0:	4413      	add	r3, r2
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	00da      	lsls	r2, r3, #3
 8001ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002006:	2200      	movs	r2, #0
 8002008:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800200a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	4619      	mov	r1, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f006 fade 	bl	80085d2 <HAL_PCD_DataInStageCallback>
 8002016:	e04a      	b.n	80020ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002018:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800201a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d13f      	bne.n	80020a2 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800202a:	b29b      	uxth	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	4413      	add	r3, r2
 800203c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002046:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8002048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800204e:	429a      	cmp	r2, r3
 8002050:	d906      	bls.n	8002060 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8002052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002058:	1ad2      	subs	r2, r2, r3
 800205a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800205c:	619a      	str	r2, [r3, #24]
 800205e:	e002      	b.n	8002066 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800206e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f006 faac 	bl	80085d2 <HAL_PCD_DataInStageCallback>
 800207a:	e018      	b.n	80020ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800207c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002082:	441a      	add	r2, r3
 8002084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002086:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800208a:	69da      	ldr	r2, [r3, #28]
 800208c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800208e:	441a      	add	r2, r3
 8002090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002092:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800209a:	4618      	mov	r0, r3
 800209c:	f004 f848 	bl	8006130 <USB_EPStartXfer>
 80020a0:	e005      	b.n	80020ae <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80020a4:	461a      	mov	r2, r3
 80020a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f917 	bl	80022dc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f6ff acc3 	blt.w	8001a46 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3748      	adds	r7, #72	@ 0x48
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b088      	sub	sp, #32
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d07c      	beq.n	80021dc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002106:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	8b7b      	ldrh	r3, [r7, #26]
 800210e:	429a      	cmp	r2, r3
 8002110:	d306      	bcc.n	8002120 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	8b7b      	ldrh	r3, [r7, #26]
 8002118:	1ad2      	subs	r2, r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	619a      	str	r2, [r3, #24]
 800211e:	e002      	b.n	8002126 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d123      	bne.n	8002176 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002148:	833b      	strh	r3, [r7, #24]
 800214a:	8b3b      	ldrh	r3, [r7, #24]
 800214c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002150:	833b      	strh	r3, [r7, #24]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	441a      	add	r2, r3
 8002160:	8b3b      	ldrh	r3, [r7, #24]
 8002162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800216a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800216e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002172:	b29b      	uxth	r3, r3
 8002174:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01f      	beq.n	80021c0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800219a:	82fb      	strh	r3, [r7, #22]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	441a      	add	r2, r3
 80021aa:	8afb      	ldrh	r3, [r7, #22]
 80021ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80021bc:	b29b      	uxth	r3, r3
 80021be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021c0:	8b7b      	ldrh	r3, [r7, #26]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8085 	beq.w	80022d2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	6959      	ldr	r1, [r3, #20]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	891a      	ldrh	r2, [r3, #8]
 80021d4:	8b7b      	ldrh	r3, [r7, #26]
 80021d6:	f004 feba 	bl	8006f4e <USB_ReadPMA>
 80021da:	e07a      	b.n	80022d2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002200:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	8b7b      	ldrh	r3, [r7, #26]
 8002208:	429a      	cmp	r2, r3
 800220a:	d306      	bcc.n	800221a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	8b7b      	ldrh	r3, [r7, #26]
 8002212:	1ad2      	subs	r2, r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	619a      	str	r2, [r3, #24]
 8002218:	e002      	b.n	8002220 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d123      	bne.n	8002270 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800223e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002242:	83fb      	strh	r3, [r7, #30]
 8002244:	8bfb      	ldrh	r3, [r7, #30]
 8002246:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800224a:	83fb      	strh	r3, [r7, #30]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	441a      	add	r2, r3
 800225a:	8bfb      	ldrh	r3, [r7, #30]
 800225c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800226c:	b29b      	uxth	r3, r3
 800226e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d11f      	bne.n	80022ba <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002294:	83bb      	strh	r3, [r7, #28]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	441a      	add	r2, r3
 80022a4:	8bbb      	ldrh	r3, [r7, #28]
 80022a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022ba:	8b7b      	ldrh	r3, [r7, #26]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	6959      	ldr	r1, [r3, #20]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	895a      	ldrh	r2, [r3, #10]
 80022cc:	8b7b      	ldrh	r3, [r7, #26]
 80022ce:	f004 fe3e 	bl	8006f4e <USB_ReadPMA>
    }
  }

  return count;
 80022d2:	8b7b      	ldrh	r3, [r7, #26]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3720      	adds	r7, #32
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b0a6      	sub	sp, #152	@ 0x98
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 81f7 	beq.w	80026e4 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022fe:	b29b      	uxth	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	4413      	add	r3, r2
 8002310:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002326:	429a      	cmp	r2, r3
 8002328:	d907      	bls.n	800233a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002332:	1ad2      	subs	r2, r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	619a      	str	r2, [r3, #24]
 8002338:	e002      	b.n	8002340 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f040 80e1 	bne.w	800250c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	785b      	ldrb	r3, [r3, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d126      	bne.n	80023a0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	633b      	str	r3, [r7, #48]	@ 0x30
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002366:	4413      	add	r3, r2
 8002368:	633b      	str	r3, [r7, #48]	@ 0x30
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	00da      	lsls	r2, r3, #3
 8002370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002372:	4413      	add	r3, r2
 8002374:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800237a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002384:	b29a      	uxth	r2, r3
 8002386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002398:	b29a      	uxth	r2, r3
 800239a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239c:	801a      	strh	r2, [r3, #0]
 800239e:	e01a      	b.n	80023d6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	785b      	ldrb	r3, [r3, #1]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d116      	bne.n	80023d6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023bc:	4413      	add	r3, r2
 80023be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	00da      	lsls	r2, r3, #3
 80023c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c8:	4413      	add	r3, r2
 80023ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80023ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80023d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d2:	2200      	movs	r2, #0
 80023d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d126      	bne.n	8002432 <HAL_PCD_EP_DB_Transmit+0x156>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	623b      	str	r3, [r7, #32]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	4413      	add	r3, r2
 80023fa:	623b      	str	r3, [r7, #32]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	00da      	lsls	r2, r3, #3
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	4413      	add	r3, r2
 8002406:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002416:	b29a      	uxth	r2, r3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	801a      	strh	r2, [r3, #0]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800242a:	b29a      	uxth	r2, r3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	801a      	strh	r2, [r3, #0]
 8002430:	e017      	b.n	8002462 <HAL_PCD_EP_DB_Transmit+0x186>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d113      	bne.n	8002462 <HAL_PCD_EP_DB_Transmit+0x186>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002448:	4413      	add	r3, r2
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	00da      	lsls	r2, r3, #3
 8002452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002454:	4413      	add	r3, r2
 8002456:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	2200      	movs	r2, #0
 8002460:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	78db      	ldrb	r3, [r3, #3]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d123      	bne.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002484:	837b      	strh	r3, [r7, #26]
 8002486:	8b7b      	ldrh	r3, [r7, #26]
 8002488:	f083 0320 	eor.w	r3, r3, #32
 800248c:	837b      	strh	r3, [r7, #26]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	441a      	add	r2, r3
 800249c:	8b7b      	ldrh	r3, [r7, #26]
 800249e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f006 f88a 	bl	80085d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01f      	beq.n	8002508 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024e2:	833b      	strh	r3, [r7, #24]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	8b3b      	ldrh	r3, [r7, #24]
 80024f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002504:	b29b      	uxth	r3, r3
 8002506:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e31f      	b.n	8002b4c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d021      	beq.n	800255a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800252c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002530:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	441a      	add	r2, r3
 8002542:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800254a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800254e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002556:	b29b      	uxth	r3, r3
 8002558:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002560:	2b01      	cmp	r3, #1
 8002562:	f040 82ca 	bne.w	8002afa <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800256e:	441a      	add	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800257c:	441a      	add	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6a1a      	ldr	r2, [r3, #32]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	429a      	cmp	r2, r3
 800258c:	d309      	bcc.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6a1a      	ldr	r2, [r3, #32]
 8002598:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800259a:	1ad2      	subs	r2, r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	621a      	str	r2, [r3, #32]
 80025a0:	e015      	b.n	80025ce <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d107      	bne.n	80025ba <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80025aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80025ae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80025b8:	e009      	b.n	80025ce <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2200      	movs	r2, #0
 80025cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	785b      	ldrb	r3, [r3, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d15f      	bne.n	8002696 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	643b      	str	r3, [r7, #64]	@ 0x40
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025ea:	4413      	add	r3, r2
 80025ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	00da      	lsls	r2, r3, #3
 80025f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f6:	4413      	add	r3, r2
 80025f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002608:	b29a      	uxth	r2, r3
 800260a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800260c:	801a      	strh	r2, [r3, #0]
 800260e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10a      	bne.n	800262a <HAL_PCD_EP_DB_Transmit+0x34e>
 8002614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800261e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002622:	b29a      	uxth	r2, r3
 8002624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002626:	801a      	strh	r2, [r3, #0]
 8002628:	e051      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800262a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800262c:	2b3e      	cmp	r3, #62	@ 0x3e
 800262e:	d816      	bhi.n	800265e <HAL_PCD_EP_DB_Transmit+0x382>
 8002630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	653b      	str	r3, [r7, #80]	@ 0x50
 8002636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002642:	3301      	adds	r3, #1
 8002644:	653b      	str	r3, [r7, #80]	@ 0x50
 8002646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29a      	uxth	r2, r3
 800264c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800264e:	b29b      	uxth	r3, r3
 8002650:	029b      	lsls	r3, r3, #10
 8002652:	b29b      	uxth	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b29a      	uxth	r2, r3
 8002658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800265a:	801a      	strh	r2, [r3, #0]
 800265c:	e037      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800265e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	653b      	str	r3, [r7, #80]	@ 0x50
 8002664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_PCD_EP_DB_Transmit+0x398>
 800266e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002670:	3b01      	subs	r3, #1
 8002672:	653b      	str	r3, [r7, #80]	@ 0x50
 8002674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29a      	uxth	r2, r3
 800267a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800267c:	b29b      	uxth	r3, r3
 800267e:	029b      	lsls	r3, r3, #10
 8002680:	b29b      	uxth	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b29b      	uxth	r3, r3
 8002686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268e:	b29a      	uxth	r2, r3
 8002690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	e01b      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	785b      	ldrb	r3, [r3, #1]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d117      	bne.n	80026ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026b2:	4413      	add	r3, r2
 80026b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	00da      	lsls	r2, r3, #3
 80026bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026be:	4413      	add	r3, r2
 80026c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80026c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80026c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026cc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	6959      	ldr	r1, [r3, #20]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	891a      	ldrh	r2, [r3, #8]
 80026da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f004 fbf4 	bl	8006eca <USB_WritePMA>
 80026e2:	e20a      	b.n	8002afa <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002708:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002714:	429a      	cmp	r2, r3
 8002716:	d307      	bcc.n	8002728 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002720:	1ad2      	subs	r2, r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	619a      	str	r2, [r3, #24]
 8002726:	e002      	b.n	800272e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 80f6 	bne.w	8002924 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d126      	bne.n	800278e <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	677b      	str	r3, [r7, #116]	@ 0x74
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800274e:	b29b      	uxth	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002754:	4413      	add	r3, r2
 8002756:	677b      	str	r3, [r7, #116]	@ 0x74
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	00da      	lsls	r2, r3, #3
 800275e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002760:	4413      	add	r3, r2
 8002762:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002766:	673b      	str	r3, [r7, #112]	@ 0x70
 8002768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002772:	b29a      	uxth	r2, r3
 8002774:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002786:	b29a      	uxth	r2, r3
 8002788:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	e01a      	b.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	785b      	ldrb	r3, [r3, #1]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d116      	bne.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027aa:	4413      	add	r3, r2
 80027ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	00da      	lsls	r2, r3, #3
 80027b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027b6:	4413      	add	r3, r2
 80027b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80027bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027c0:	2200      	movs	r2, #0
 80027c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	785b      	ldrb	r3, [r3, #1]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d12f      	bne.n	8002834 <HAL_PCD_EP_DB_Transmit+0x558>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ec:	4413      	add	r3, r2
 80027ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	00da      	lsls	r2, r3, #3
 80027f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027fc:	4413      	add	r3, r2
 80027fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002802:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002806:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002812:	b29a      	uxth	r2, r3
 8002814:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002818:	801a      	strh	r2, [r3, #0]
 800281a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282a:	b29a      	uxth	r2, r3
 800282c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	e01c      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x592>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	785b      	ldrb	r3, [r3, #1]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d118      	bne.n	800286e <HAL_PCD_EP_DB_Transmit+0x592>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002844:	b29b      	uxth	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800284c:	4413      	add	r3, r2
 800284e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	00da      	lsls	r2, r3, #3
 8002858:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800285c:	4413      	add	r3, r2
 800285e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002862:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002866:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800286a:	2200      	movs	r2, #0
 800286c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	78db      	ldrb	r3, [r3, #3]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d127      	bne.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800288c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002890:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002894:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002898:	f083 0320 	eor.w	r3, r3, #32
 800289c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	441a      	add	r2, r3
 80028ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80028b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	4619      	mov	r1, r3
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f005 fe80 	bl	80085d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d121      	bne.n	8002920 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028f6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	441a      	add	r2, r3
 8002908:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800290c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002914:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800291c:	b29b      	uxth	r3, r3
 800291e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e113      	b.n	8002b4c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d121      	bne.n	8002972 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002948:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	441a      	add	r2, r3
 800295a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800295e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002966:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800296a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800296e:	b29b      	uxth	r3, r3
 8002970:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002978:	2b01      	cmp	r3, #1
 800297a:	f040 80be 	bne.w	8002afa <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002986:	441a      	add	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002994:	441a      	add	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d309      	bcc.n	80029ba <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6a1a      	ldr	r2, [r3, #32]
 80029b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029b2:	1ad2      	subs	r2, r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	621a      	str	r2, [r3, #32]
 80029b8:	e015      	b.n	80029e6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80029c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80029c6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80029d0:	e009      	b.n	80029e6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2200      	movs	r2, #0
 80029dc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	785b      	ldrb	r3, [r3, #1]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d15f      	bne.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a08:	4413      	add	r3, r2
 8002a0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	00da      	lsls	r2, r3, #3
 8002a12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a14:	4413      	add	r3, r2
 8002a16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002a1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a2a:	801a      	strh	r2, [r3, #0]
 8002a2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x76c>
 8002a32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	e04e      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002a48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a4c:	d816      	bhi.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002a4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x788>
 8002a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a60:	3301      	adds	r3, #1
 8002a62:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	029b      	lsls	r3, r3, #10
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	4313      	orrs	r3, r2
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a78:	801a      	strh	r2, [r3, #0]
 8002a7a:	e034      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002a7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8002a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	029b      	lsls	r3, r3, #10
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	e018      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d114      	bne.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aca:	4413      	add	r3, r2
 8002acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	00da      	lsls	r2, r3, #3
 8002ad4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002adc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ae4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	6959      	ldr	r1, [r3, #20]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	895a      	ldrh	r2, [r3, #10]
 8002af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f004 f9e8 	bl	8006eca <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b14:	82fb      	strh	r3, [r7, #22]
 8002b16:	8afb      	ldrh	r3, [r7, #22]
 8002b18:	f083 0310 	eor.w	r3, r3, #16
 8002b1c:	82fb      	strh	r3, [r7, #22]
 8002b1e:	8afb      	ldrh	r3, [r7, #22]
 8002b20:	f083 0320 	eor.w	r3, r3, #32
 8002b24:	82fb      	strh	r3, [r7, #22]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	441a      	add	r2, r3
 8002b34:	8afb      	ldrh	r3, [r7, #22]
 8002b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3798      	adds	r7, #152	@ 0x98
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d141      	bne.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b62:	4b4b      	ldr	r3, [pc, #300]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b6e:	d131      	bne.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b70:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b76:	4a46      	ldr	r2, [pc, #280]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b80:	4b43      	ldr	r3, [pc, #268]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b88:	4a41      	ldr	r2, [pc, #260]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b90:	4b40      	ldr	r3, [pc, #256]	@ (8002c94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2232      	movs	r2, #50	@ 0x32
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	0c9b      	lsrs	r3, r3, #18
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ba6:	e002      	b.n	8002bae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bae:	4b38      	ldr	r3, [pc, #224]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bba:	d102      	bne.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f2      	bne.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bc2:	4b33      	ldr	r3, [pc, #204]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bce:	d158      	bne.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e057      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bda:	4a2d      	ldr	r2, [pc, #180]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002be0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002be4:	e04d      	b.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bec:	d141      	bne.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bee:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfa:	d131      	bne.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bfc:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c02:	4a23      	ldr	r2, [pc, #140]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c0c:	4b20      	ldr	r3, [pc, #128]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c14:	4a1e      	ldr	r2, [pc, #120]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2232      	movs	r2, #50	@ 0x32
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	0c9b      	lsrs	r3, r3, #18
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c32:	e002      	b.n	8002c3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3a:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c46:	d102      	bne.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f2      	bne.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5a:	d112      	bne.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e011      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c70:	e007      	b.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c72:	4b07      	ldr	r3, [pc, #28]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c7a:	4a05      	ldr	r2, [pc, #20]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40007000 	.word	0x40007000
 8002c94:	20000000 	.word	0x20000000
 8002c98:	431bde83 	.word	0x431bde83

08002c9c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ca0:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a04      	ldr	r2, [pc, #16]	@ (8002cb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ca6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002caa:	6093      	str	r3, [r2, #8]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40007000 	.word	0x40007000

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e2fe      	b.n	80032cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cda:	4b97      	ldr	r3, [pc, #604]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ce4:	4b94      	ldr	r3, [pc, #592]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d102      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3e>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_OscConfig+0x44>
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b8d      	ldr	r3, [pc, #564]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e2d9      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x74>
 8002d22:	4b85      	ldr	r3, [pc, #532]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a84      	ldr	r2, [pc, #528]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b7c      	ldr	r3, [pc, #496]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7b      	ldr	r2, [pc, #492]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d54:	4b78      	ldr	r3, [pc, #480]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a77      	ldr	r2, [pc, #476]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b75      	ldr	r3, [pc, #468]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a74      	ldr	r2, [pc, #464]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe f8fe 	bl	8000f74 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe f8fa 	bl	8000f74 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e29e      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0xc0>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f8ea 	bl	8000f74 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe f8e6 	bl	8000f74 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e28a      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002db6:	4b60      	ldr	r3, [pc, #384]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0xe8>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d075      	beq.n	8002ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd2:	4b59      	ldr	r3, [pc, #356]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ddc:	4b56      	ldr	r3, [pc, #344]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	d102      	bne.n	8002df2 <HAL_RCC_OscConfig+0x136>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d002      	beq.n	8002df8 <HAL_RCC_OscConfig+0x13c>
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d11f      	bne.n	8002e38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df8:	4b4f      	ldr	r3, [pc, #316]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_OscConfig+0x154>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e25d      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b49      	ldr	r3, [pc, #292]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	4946      	ldr	r1, [pc, #280]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e24:	4b45      	ldr	r3, [pc, #276]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe f857 	bl	8000edc <HAL_InitTick>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d043      	beq.n	8002ebc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e249      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d023      	beq.n	8002e88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e40:	4b3d      	ldr	r3, [pc, #244]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a3c      	ldr	r2, [pc, #240]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f892 	bl	8000f74 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e54:	f7fe f88e 	bl	8000f74 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e232      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e66:	4b34      	ldr	r3, [pc, #208]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	061b      	lsls	r3, r3, #24
 8002e80:	492d      	ldr	r1, [pc, #180]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
 8002e86:	e01a      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e88:	4b2b      	ldr	r3, [pc, #172]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe f86e 	bl	8000f74 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9c:	f7fe f86a 	bl	8000f74 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e20e      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eae:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1e0>
 8002eba:	e000      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ebc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d041      	beq.n	8002f4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01c      	beq.n	8002f0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed2:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed8:	4a17      	ldr	r2, [pc, #92]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee2:	f7fe f847 	bl	8000f74 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eea:	f7fe f843 	bl	8000f74 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e1e7      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002efc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ef      	beq.n	8002eea <HAL_RCC_OscConfig+0x22e>
 8002f0a:	e020      	b.n	8002f4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f12:	4a09      	ldr	r2, [pc, #36]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe f82a 	bl	8000f74 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f22:	e00d      	b.n	8002f40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe f826 	bl	8000f74 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d906      	bls.n	8002f40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e1ca      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f40:	4b8c      	ldr	r3, [pc, #560]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1ea      	bne.n	8002f24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80a6 	beq.w	80030a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f60:	4b84      	ldr	r3, [pc, #528]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_OscConfig+0x2b4>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x2b6>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	4b7f      	ldr	r3, [pc, #508]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f82:	4b7c      	ldr	r3, [pc, #496]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f92:	4b79      	ldr	r3, [pc, #484]	@ (8003178 <HAL_RCC_OscConfig+0x4bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f9e:	4b76      	ldr	r3, [pc, #472]	@ (8003178 <HAL_RCC_OscConfig+0x4bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	@ (8003178 <HAL_RCC_OscConfig+0x4bc>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fd ffe3 	bl	8000f74 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fd ffdf 	bl	8000f74 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e183      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc4:	4b6c      	ldr	r3, [pc, #432]	@ (8003178 <HAL_RCC_OscConfig+0x4bc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d108      	bne.n	8002fea <HAL_RCC_OscConfig+0x32e>
 8002fd8:	4b66      	ldr	r3, [pc, #408]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fde:	4a65      	ldr	r2, [pc, #404]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fe8:	e024      	b.n	8003034 <HAL_RCC_OscConfig+0x378>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d110      	bne.n	8003014 <HAL_RCC_OscConfig+0x358>
 8002ff2:	4b60      	ldr	r3, [pc, #384]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff8:	4a5e      	ldr	r2, [pc, #376]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003002:	4b5c      	ldr	r3, [pc, #368]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003008:	4a5a      	ldr	r2, [pc, #360]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003012:	e00f      	b.n	8003034 <HAL_RCC_OscConfig+0x378>
 8003014:	4b57      	ldr	r3, [pc, #348]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301a:	4a56      	ldr	r2, [pc, #344]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003024:	4b53      	ldr	r3, [pc, #332]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302a:	4a52      	ldr	r2, [pc, #328]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d016      	beq.n	800306a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fd ff9a 	bl	8000f74 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fd ff96 	bl	8000f74 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e138      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305a:	4b46      	ldr	r3, [pc, #280]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ed      	beq.n	8003044 <HAL_RCC_OscConfig+0x388>
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306a:	f7fd ff83 	bl	8000f74 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fd ff7f 	bl	8000f74 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e121      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003088:	4b3a      	ldr	r3, [pc, #232]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ed      	bne.n	8003072 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003096:	7ffb      	ldrb	r3, [r7, #31]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d105      	bne.n	80030a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309c:	4b35      	ldr	r3, [pc, #212]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a0:	4a34      	ldr	r2, [pc, #208]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d03c      	beq.n	800312e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01c      	beq.n	80030f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7fd ff52 	bl	8000f74 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030d4:	f7fd ff4e 	bl	8000f74 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0f2      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030e6:	4b23      	ldr	r3, [pc, #140]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ef      	beq.n	80030d4 <HAL_RCC_OscConfig+0x418>
 80030f4:	e01b      	b.n	800312e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fd ff35 	bl	8000f74 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800310e:	f7fd ff31 	bl	8000f74 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e0d5      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003120:	4b14      	ldr	r3, [pc, #80]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003122:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1ef      	bne.n	800310e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80c9 	beq.w	80032ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003138:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b0c      	cmp	r3, #12
 8003142:	f000 8083 	beq.w	800324c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d15e      	bne.n	800320c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314e:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a08      	ldr	r2, [pc, #32]	@ (8003174 <HAL_RCC_OscConfig+0x4b8>)
 8003154:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fd ff0b 	bl	8000f74 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003160:	e00c      	b.n	800317c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003162:	f7fd ff07 	bl	8000f74 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d905      	bls.n	800317c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e0ab      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
 8003174:	40021000 	.word	0x40021000
 8003178:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317c:	4b55      	ldr	r3, [pc, #340]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ec      	bne.n	8003162 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003188:	4b52      	ldr	r3, [pc, #328]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	4b52      	ldr	r3, [pc, #328]	@ (80032d8 <HAL_RCC_OscConfig+0x61c>)
 800318e:	4013      	ands	r3, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6a11      	ldr	r1, [r2, #32]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003198:	3a01      	subs	r2, #1
 800319a:	0112      	lsls	r2, r2, #4
 800319c:	4311      	orrs	r1, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80031a2:	0212      	lsls	r2, r2, #8
 80031a4:	4311      	orrs	r1, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80031aa:	0852      	lsrs	r2, r2, #1
 80031ac:	3a01      	subs	r2, #1
 80031ae:	0552      	lsls	r2, r2, #21
 80031b0:	4311      	orrs	r1, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031b6:	0852      	lsrs	r2, r2, #1
 80031b8:	3a01      	subs	r2, #1
 80031ba:	0652      	lsls	r2, r2, #25
 80031bc:	4311      	orrs	r1, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031c2:	06d2      	lsls	r2, r2, #27
 80031c4:	430a      	orrs	r2, r1
 80031c6:	4943      	ldr	r1, [pc, #268]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031cc:	4b41      	ldr	r3, [pc, #260]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a40      	ldr	r2, [pc, #256]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 80031d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031d8:	4b3e      	ldr	r3, [pc, #248]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a3d      	ldr	r2, [pc, #244]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 80031de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fd fec6 	bl	8000f74 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fd fec2 	bl	8000f74 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e066      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fe:	4b35      	ldr	r3, [pc, #212]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x530>
 800320a:	e05e      	b.n	80032ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320c:	4b31      	ldr	r3, [pc, #196]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a30      	ldr	r2, [pc, #192]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 8003212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fd feac 	bl	8000f74 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003220:	f7fd fea8 	bl	8000f74 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e04c      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003232:	4b28      	ldr	r3, [pc, #160]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800323e:	4b25      	ldr	r3, [pc, #148]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	4924      	ldr	r1, [pc, #144]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 8003244:	4b25      	ldr	r3, [pc, #148]	@ (80032dc <HAL_RCC_OscConfig+0x620>)
 8003246:	4013      	ands	r3, r2
 8003248:	60cb      	str	r3, [r1, #12]
 800324a:	e03e      	b.n	80032ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e039      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003258:	4b1e      	ldr	r3, [pc, #120]	@ (80032d4 <HAL_RCC_OscConfig+0x618>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	429a      	cmp	r2, r3
 800326a:	d12c      	bne.n	80032c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	3b01      	subs	r3, #1
 8003278:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d123      	bne.n	80032c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800328a:	429a      	cmp	r2, r3
 800328c:	d11b      	bne.n	80032c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d113      	bne.n	80032c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	3b01      	subs	r3, #1
 80032ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d109      	bne.n	80032c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	3b01      	subs	r3, #1
 80032c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40021000 	.word	0x40021000
 80032d8:	019f800c 	.word	0x019f800c
 80032dc:	feeefffc 	.word	0xfeeefffc

080032e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e11e      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032f8:	4b91      	ldr	r3, [pc, #580]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d910      	bls.n	8003328 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b8e      	ldr	r3, [pc, #568]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 020f 	bic.w	r2, r3, #15
 800330e:	498c      	ldr	r1, [pc, #560]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b8a      	ldr	r3, [pc, #552]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e106      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d073      	beq.n	800341c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d129      	bne.n	8003390 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333c:	4b81      	ldr	r3, [pc, #516]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0f4      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800334c:	f000 f9e4 	bl	8003718 <RCC_GetSysClockFreqFromPLLSource>
 8003350:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4a7c      	ldr	r2, [pc, #496]	@ (8003548 <HAL_RCC_ClockConfig+0x268>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d93f      	bls.n	80033da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800335a:	4b7a      	ldr	r3, [pc, #488]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800336e:	2b00      	cmp	r3, #0
 8003370:	d033      	beq.n	80033da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003376:	2b00      	cmp	r3, #0
 8003378:	d12f      	bne.n	80033da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800337a:	4b72      	ldr	r3, [pc, #456]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003382:	4a70      	ldr	r2, [pc, #448]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003388:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800338a:	2380      	movs	r3, #128	@ 0x80
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	e024      	b.n	80033da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003398:	4b6a      	ldr	r3, [pc, #424]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0c6      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a8:	4b66      	ldr	r3, [pc, #408]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0be      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033b8:	f000 f914 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4a61      	ldr	r2, [pc, #388]	@ (8003548 <HAL_RCC_ClockConfig+0x268>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d909      	bls.n	80033da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80033d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033d6:	2380      	movs	r3, #128	@ 0x80
 80033d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4b5a      	ldr	r3, [pc, #360]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4957      	ldr	r1, [pc, #348]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ec:	f7fd fdc2 	bl	8000f74 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	e00a      	b.n	800340a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f4:	f7fd fdbe 	bl	8000f74 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e095      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	4b4e      	ldr	r3, [pc, #312]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 020c 	and.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	429a      	cmp	r2, r3
 800341a:	d1eb      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d023      	beq.n	8003470 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003434:	4b43      	ldr	r3, [pc, #268]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a42      	ldr	r2, [pc, #264]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800343a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800343e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800344c:	4b3d      	ldr	r3, [pc, #244]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003454:	4a3b      	ldr	r2, [pc, #236]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003456:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800345a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345c:	4b39      	ldr	r3, [pc, #228]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4936      	ldr	r1, [pc, #216]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
 800346e:	e008      	b.n	8003482 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b80      	cmp	r3, #128	@ 0x80
 8003474:	d105      	bne.n	8003482 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003476:	4b33      	ldr	r3, [pc, #204]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	4a32      	ldr	r2, [pc, #200]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 800347c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003480:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003482:	4b2f      	ldr	r3, [pc, #188]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d21d      	bcs.n	80034cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003490:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 020f 	bic.w	r2, r3, #15
 8003498:	4929      	ldr	r1, [pc, #164]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034a0:	f7fd fd68 	bl	8000f74 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fd fd64 	bl	8000f74 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e03b      	b.n	8003536 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b20      	ldr	r3, [pc, #128]	@ (8003540 <HAL_RCC_ClockConfig+0x260>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d1ed      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4917      	ldr	r1, [pc, #92]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f6:	4b13      	ldr	r3, [pc, #76]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	490f      	ldr	r1, [pc, #60]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800350a:	f000 f86b 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 800350e:	4602      	mov	r2, r0
 8003510:	4b0c      	ldr	r3, [pc, #48]	@ (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	490c      	ldr	r1, [pc, #48]	@ (800354c <HAL_RCC_ClockConfig+0x26c>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	fa22 f303 	lsr.w	r3, r2, r3
 8003526:	4a0a      	ldr	r2, [pc, #40]	@ (8003550 <HAL_RCC_ClockConfig+0x270>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800352a:	4b0a      	ldr	r3, [pc, #40]	@ (8003554 <HAL_RCC_ClockConfig+0x274>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fd fcd4 	bl	8000edc <HAL_InitTick>
 8003534:	4603      	mov	r3, r0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40022000 	.word	0x40022000
 8003544:	40021000 	.word	0x40021000
 8003548:	04c4b400 	.word	0x04c4b400
 800354c:	08009308 	.word	0x08009308
 8003550:	20000000 	.word	0x20000000
 8003554:	20000004 	.word	0x20000004

08003558 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08c      	sub	sp, #48	@ 0x30
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8003564:	2302      	movs	r3, #2
 8003566:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003568:	2303      	movs	r3, #3
 800356a:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	0c1b      	lsrs	r3, r3, #16
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8003584:	029b      	lsls	r3, r3, #10
 8003586:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	0c1b      	lsrs	r3, r3, #16
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8003592:	4b13      	ldr	r3, [pc, #76]	@ (80035e0 <HAL_RCC_MCOConfig+0x88>)
 8003594:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003596:	2101      	movs	r1, #1
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	4910      	ldr	r1, [pc, #64]	@ (80035e0 <HAL_RCC_MCOConfig+0x88>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	0d1b      	lsrs	r3, r3, #20
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80035b2:	f107 0310 	add.w	r3, r7, #16
 80035b6:	4619      	mov	r1, r3
 80035b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035ba:	f7fd fded 	bl	8001198 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80035be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_RCC_MCOConfig+0x88>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	4903      	ldr	r1, [pc, #12]	@ (80035e0 <HAL_RCC_MCOConfig+0x88>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]
  }
}
 80035d8:	bf00      	nop
 80035da:	3730      	adds	r7, #48	@ 0x30
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40021000 	.word	0x40021000

080035e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035ea:	4b2c      	ldr	r3, [pc, #176]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035f6:	4b2a      	ldr	r3, [pc, #168]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	e047      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035fc:	4b27      	ldr	r3, [pc, #156]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b08      	cmp	r3, #8
 8003606:	d102      	bne.n	800360e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003608:	4b26      	ldr	r3, [pc, #152]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	e03e      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800360e:	4b23      	ldr	r3, [pc, #140]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d136      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800361a:	4b20      	ldr	r3, [pc, #128]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003624:	4b1d      	ldr	r3, [pc, #116]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3301      	adds	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003638:	4a1a      	ldr	r2, [pc, #104]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	4a16      	ldr	r2, [pc, #88]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003642:	68d2      	ldr	r2, [r2, #12]
 8003644:	0a12      	lsrs	r2, r2, #8
 8003646:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	617b      	str	r3, [r7, #20]
      break;
 8003650:	e00c      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003652:	4a13      	ldr	r2, [pc, #76]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	4a10      	ldr	r2, [pc, #64]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 800365c:	68d2      	ldr	r2, [r2, #12]
 800365e:	0a12      	lsrs	r2, r2, #8
 8003660:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003664:	fb02 f303 	mul.w	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]
      break;
 800366a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	0e5b      	lsrs	r3, r3, #25
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	3301      	adds	r3, #1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	e001      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800368c:	693b      	ldr	r3, [r7, #16]
}
 800368e:	4618      	mov	r0, r3
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	007a1200 	.word	0x007a1200

080036a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000000 	.word	0x20000000

080036c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036c4:	f7ff fff0 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4904      	ldr	r1, [pc, #16]	@ (80036e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08009318 	.word	0x08009318

080036ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036f0:	f7ff ffda 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	0adb      	lsrs	r3, r3, #11
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4904      	ldr	r1, [pc, #16]	@ (8003714 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	08009318 	.word	0x08009318

08003718 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800371e:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003728:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d10c      	bne.n	8003756 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800373c:	4a17      	ldr	r2, [pc, #92]	@ (800379c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	4a14      	ldr	r2, [pc, #80]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003746:	68d2      	ldr	r2, [r2, #12]
 8003748:	0a12      	lsrs	r2, r2, #8
 800374a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	617b      	str	r3, [r7, #20]
    break;
 8003754:	e00c      	b.n	8003770 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003756:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	4a0e      	ldr	r2, [pc, #56]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	0a12      	lsrs	r2, r2, #8
 8003764:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003768:	fb02 f303 	mul.w	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]
    break;
 800376e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003770:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0e5b      	lsrs	r3, r3, #25
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800378a:	687b      	ldr	r3, [r7, #4]
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40021000 	.word	0x40021000
 800379c:	007a1200 	.word	0x007a1200
 80037a0:	00f42400 	.word	0x00f42400

080037a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037ac:	2300      	movs	r3, #0
 80037ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b0:	2300      	movs	r3, #0
 80037b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8098 	beq.w	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b43      	ldr	r3, [pc, #268]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	4b40      	ldr	r3, [pc, #256]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d6:	4a3f      	ldr	r2, [pc, #252]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80037de:	4b3d      	ldr	r3, [pc, #244]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ee:	4b3a      	ldr	r3, [pc, #232]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a39      	ldr	r2, [pc, #228]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037fa:	f7fd fbbb 	bl	8000f74 <HAL_GetTick>
 80037fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003800:	e009      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003802:	f7fd fbb7 	bl	8000f74 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d902      	bls.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	74fb      	strb	r3, [r7, #19]
        break;
 8003814:	e005      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003816:	4b30      	ldr	r3, [pc, #192]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ef      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d159      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003828:	4b2a      	ldr	r3, [pc, #168]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003832:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01e      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	429a      	cmp	r2, r3
 8003842:	d019      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003844:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800384e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003850:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003856:	4a1f      	ldr	r2, [pc, #124]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003860:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003870:	4a18      	ldr	r2, [pc, #96]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fd fb77 	bl	8000f74 <HAL_GetTick>
 8003886:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003888:	e00b      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fd fb73 	bl	8000f74 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d902      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	74fb      	strb	r3, [r7, #19]
            break;
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a2:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ec      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b6:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c4:	4903      	ldr	r1, [pc, #12]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038cc:	e008      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	74bb      	strb	r3, [r7, #18]
 80038d2:	e005      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e0:	7c7b      	ldrb	r3, [r7, #17]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e6:	4ba7      	ldr	r3, [pc, #668]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ea:	4aa6      	ldr	r2, [pc, #664]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038fe:	4ba1      	ldr	r3, [pc, #644]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	f023 0203 	bic.w	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	499d      	ldr	r1, [pc, #628]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003920:	4b98      	ldr	r3, [pc, #608]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	f023 020c 	bic.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4995      	ldr	r1, [pc, #596]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003942:	4b90      	ldr	r3, [pc, #576]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003948:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	498c      	ldr	r1, [pc, #560]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003964:	4b87      	ldr	r3, [pc, #540]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	4984      	ldr	r1, [pc, #528]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003986:	4b7f      	ldr	r3, [pc, #508]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	497b      	ldr	r1, [pc, #492]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a8:	4b76      	ldr	r3, [pc, #472]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	4973      	ldr	r1, [pc, #460]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ca:	4b6e      	ldr	r3, [pc, #440]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	496a      	ldr	r1, [pc, #424]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ec:	4b65      	ldr	r3, [pc, #404]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4962      	ldr	r1, [pc, #392]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	4959      	ldr	r1, [pc, #356]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a30:	4b54      	ldr	r3, [pc, #336]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a36:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3e:	4951      	ldr	r1, [pc, #324]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d015      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a52:	4b4c      	ldr	r3, [pc, #304]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	4948      	ldr	r1, [pc, #288]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a70:	d105      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a72:	4b44      	ldr	r3, [pc, #272]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	4a43      	ldr	r2, [pc, #268]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a7c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d015      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	493a      	ldr	r1, [pc, #232]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aa8:	d105      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aaa:	4b36      	ldr	r3, [pc, #216]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	4a35      	ldr	r2, [pc, #212]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ab4:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d015      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ac2:	4b30      	ldr	r3, [pc, #192]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad0:	492c      	ldr	r1, [pc, #176]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ae0:	d105      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae2:	4b28      	ldr	r3, [pc, #160]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	4a27      	ldr	r2, [pc, #156]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aec:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d015      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003afa:	4b22      	ldr	r3, [pc, #136]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b08:	491e      	ldr	r1, [pc, #120]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b18:	d105      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4a19      	ldr	r2, [pc, #100]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b24:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d015      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b32:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b38:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b40:	4910      	ldr	r1, [pc, #64]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b50:	d105      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b52:	4b0c      	ldr	r3, [pc, #48]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	4a0b      	ldr	r2, [pc, #44]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b5c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d018      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b6a:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b70:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	4902      	ldr	r1, [pc, #8]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	e001      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b84:	40021000 	.word	0x40021000
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b90:	4b21      	ldr	r3, [pc, #132]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a20      	ldr	r2, [pc, #128]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	4918      	ldr	r1, [pc, #96]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bc8:	4b13      	ldr	r3, [pc, #76]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a12      	ldr	r2, [pc, #72]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003be0:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003be6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bee:	490a      	ldr	r1, [pc, #40]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c00:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4a04      	ldr	r2, [pc, #16]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000

08003c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e09d      	b.n	8003d6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c3e:	d009      	beq.n	8003c54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	61da      	str	r2, [r3, #28]
 8003c46:	e005      	b.n	8003c54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd f836 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c94:	d902      	bls.n	8003c9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e002      	b.n	8003ca2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ca0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003caa:	d007      	beq.n	8003cbc <HAL_SPI_Init+0xa0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cb4:	d002      	beq.n	8003cbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfe:	ea42 0103 	orr.w	r1, r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	0c1b      	lsrs	r3, r3, #16
 8003d18:	f003 0204 	and.w	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d38:	ea42 0103 	orr.w	r1, r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b088      	sub	sp, #32
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d82:	f7fd f8f7 	bl	8000f74 <HAL_GetTick>
 8003d86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d001      	beq.n	8003d9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e15c      	b.n	8004056 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_SPI_Transmit+0x36>
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e154      	b.n	8004056 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_SPI_Transmit+0x48>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e14d      	b.n	8004056 <HAL_SPI_Transmit+0x2e4>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	88fa      	ldrh	r2, [r7, #6]
 8003dda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e0c:	d10f      	bne.n	8003e2e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e38:	2b40      	cmp	r3, #64	@ 0x40
 8003e3a:	d007      	beq.n	8003e4c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e54:	d952      	bls.n	8003efc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_SPI_Transmit+0xf2>
 8003e5e:	8b7b      	ldrh	r3, [r7, #26]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d145      	bne.n	8003ef0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e68:	881a      	ldrh	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e74:	1c9a      	adds	r2, r3, #2
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e88:	e032      	b.n	8003ef0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d112      	bne.n	8003ebe <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	881a      	ldrh	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea8:	1c9a      	adds	r2, r3, #2
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ebc:	e018      	b.n	8003ef0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ebe:	f7fd f859 	bl	8000f74 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d803      	bhi.n	8003ed6 <HAL_SPI_Transmit+0x164>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d102      	bne.n	8003edc <HAL_SPI_Transmit+0x16a>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0b2      	b.n	8004056 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1c7      	bne.n	8003e8a <HAL_SPI_Transmit+0x118>
 8003efa:	e083      	b.n	8004004 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_SPI_Transmit+0x198>
 8003f04:	8b7b      	ldrh	r3, [r7, #26]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d177      	bne.n	8003ffa <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d912      	bls.n	8003f3a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	881a      	ldrh	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b02      	subs	r3, #2
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f38:	e05f      	b.n	8003ffa <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	7812      	ldrb	r2, [r2, #0]
 8003f46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f60:	e04b      	b.n	8003ffa <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d12b      	bne.n	8003fc8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d912      	bls.n	8003fa0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7e:	881a      	ldrh	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8a:	1c9a      	adds	r2, r3, #2
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b02      	subs	r3, #2
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f9e:	e02c      	b.n	8003ffa <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	7812      	ldrb	r2, [r2, #0]
 8003fac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fc6:	e018      	b.n	8003ffa <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc8:	f7fc ffd4 	bl	8000f74 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d803      	bhi.n	8003fe0 <HAL_SPI_Transmit+0x26e>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d102      	bne.n	8003fe6 <HAL_SPI_Transmit+0x274>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e02d      	b.n	8004056 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1ae      	bne.n	8003f62 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	6839      	ldr	r1, [r7, #0]
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fcf5 	bl	80049f8 <SPI_EndRxTxTransaction>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004054:	2300      	movs	r3, #0
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3720      	adds	r7, #32
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b088      	sub	sp, #32
 8004062:	af02      	add	r7, sp, #8
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	d001      	beq.n	800407e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
 800407c:	e123      	b.n	80042c6 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_SPI_Receive+0x2c>
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e11b      	b.n	80042c6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004096:	d112      	bne.n	80040be <HAL_SPI_Receive+0x60>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10e      	bne.n	80040be <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2204      	movs	r2, #4
 80040a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040a8:	88fa      	ldrh	r2, [r7, #6]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	4613      	mov	r3, r2
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f90a 	bl	80042ce <HAL_SPI_TransmitReceive>
 80040ba:	4603      	mov	r3, r0
 80040bc:	e103      	b.n	80042c6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040be:	f7fc ff59 	bl	8000f74 <HAL_GetTick>
 80040c2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_SPI_Receive+0x74>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e0f9      	b.n	80042c6 <HAL_SPI_Receive+0x268>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2204      	movs	r2, #4
 80040de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	88fa      	ldrh	r2, [r7, #6]
 80040f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	88fa      	ldrh	r2, [r7, #6]
 80040fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004124:	d908      	bls.n	8004138 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	e007      	b.n	8004148 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004150:	d10f      	bne.n	8004172 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004160:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004170:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417c:	2b40      	cmp	r3, #64	@ 0x40
 800417e:	d007      	beq.n	8004190 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800418e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004198:	d875      	bhi.n	8004286 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800419a:	e037      	b.n	800420c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d117      	bne.n	80041da <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f103 020c 	add.w	r2, r3, #12
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	7812      	ldrb	r2, [r2, #0]
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80041d8:	e018      	b.n	800420c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041da:	f7fc fecb 	bl	8000f74 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d803      	bhi.n	80041f2 <HAL_SPI_Receive+0x194>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d102      	bne.n	80041f8 <HAL_SPI_Receive+0x19a>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e05c      	b.n	80042c6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1c1      	bne.n	800419c <HAL_SPI_Receive+0x13e>
 8004218:	e03b      	b.n	8004292 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d115      	bne.n	8004254 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	b292      	uxth	r2, r2
 8004234:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	1c9a      	adds	r2, r3, #2
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004252:	e018      	b.n	8004286 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004254:	f7fc fe8e 	bl	8000f74 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d803      	bhi.n	800426c <HAL_SPI_Receive+0x20e>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d102      	bne.n	8004272 <HAL_SPI_Receive+0x214>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e01f      	b.n	80042c6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1c3      	bne.n	800421a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fb56 	bl	8004948 <SPI_EndRxTransaction>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80042c4:	2300      	movs	r3, #0
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b08a      	sub	sp, #40	@ 0x28
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042dc:	2301      	movs	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042e0:	f7fc fe48 	bl	8000f74 <HAL_GetTick>
 80042e4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042ec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80042f4:	887b      	ldrh	r3, [r7, #2]
 80042f6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80042f8:	887b      	ldrh	r3, [r7, #2]
 80042fa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042fc:	7ffb      	ldrb	r3, [r7, #31]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d00c      	beq.n	800431c <HAL_SPI_TransmitReceive+0x4e>
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004308:	d106      	bne.n	8004318 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <HAL_SPI_TransmitReceive+0x4a>
 8004312:	7ffb      	ldrb	r3, [r7, #31]
 8004314:	2b04      	cmp	r3, #4
 8004316:	d001      	beq.n	800431c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004318:	2302      	movs	r3, #2
 800431a:	e1f3      	b.n	8004704 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_SPI_TransmitReceive+0x60>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_SPI_TransmitReceive+0x60>
 8004328:	887b      	ldrh	r3, [r7, #2]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e1e8      	b.n	8004704 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x72>
 800433c:	2302      	movs	r3, #2
 800433e:	e1e1      	b.n	8004704 <HAL_SPI_TransmitReceive+0x436>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b04      	cmp	r3, #4
 8004352:	d003      	beq.n	800435c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2205      	movs	r2, #5
 8004358:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	887a      	ldrh	r2, [r7, #2]
 8004382:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	887a      	ldrh	r2, [r7, #2]
 8004388:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800439e:	d802      	bhi.n	80043a6 <HAL_SPI_TransmitReceive+0xd8>
 80043a0:	8abb      	ldrh	r3, [r7, #20]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d908      	bls.n	80043b8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	e007      	b.n	80043c8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b40      	cmp	r3, #64	@ 0x40
 80043d4:	d007      	beq.n	80043e6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043ee:	f240 8083 	bls.w	80044f8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_SPI_TransmitReceive+0x132>
 80043fa:	8afb      	ldrh	r3, [r7, #22]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d16f      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	881a      	ldrh	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004410:	1c9a      	adds	r2, r3, #2
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004424:	e05c      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b02      	cmp	r3, #2
 8004432:	d11b      	bne.n	800446c <HAL_SPI_TransmitReceive+0x19e>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <HAL_SPI_TransmitReceive+0x19e>
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	2b01      	cmp	r3, #1
 8004442:	d113      	bne.n	800446c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	881a      	ldrh	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004454:	1c9a      	adds	r2, r3, #2
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d11c      	bne.n	80044b4 <HAL_SPI_TransmitReceive+0x1e6>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004490:	b292      	uxth	r2, r2
 8004492:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	1c9a      	adds	r2, r3, #2
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044b0:	2301      	movs	r3, #1
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044b4:	f7fc fd5e 	bl	8000f74 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d80d      	bhi.n	80044e0 <HAL_SPI_TransmitReceive+0x212>
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d009      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e111      	b.n	8004704 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d19d      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x158>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d197      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x158>
 80044f6:	e0e5      	b.n	80046c4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x23a>
 8004500:	8afb      	ldrh	r3, [r7, #22]
 8004502:	2b01      	cmp	r3, #1
 8004504:	f040 80d1 	bne.w	80046aa <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d912      	bls.n	8004538 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004516:	881a      	ldrh	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	1c9a      	adds	r2, r3, #2
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b02      	subs	r3, #2
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004536:	e0b8      	b.n	80046aa <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	7812      	ldrb	r2, [r2, #0]
 8004544:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800455e:	e0a4      	b.n	80046aa <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d134      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x30a>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d02f      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x30a>
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	2b01      	cmp	r3, #1
 800457c:	d12c      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d912      	bls.n	80045ae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	881a      	ldrh	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004598:	1c9a      	adds	r2, r3, #2
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b02      	subs	r3, #2
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045ac:	e012      	b.n	80045d4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d148      	bne.n	8004678 <HAL_SPI_TransmitReceive+0x3aa>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d042      	beq.n	8004678 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d923      	bls.n	8004646 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	b292      	uxth	r2, r2
 800460a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	1c9a      	adds	r2, r3, #2
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b02      	subs	r3, #2
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d81f      	bhi.n	8004674 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	e016      	b.n	8004674 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f103 020c 	add.w	r2, r3, #12
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	7812      	ldrb	r2, [r2, #0]
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004674:	2301      	movs	r3, #1
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004678:	f7fc fc7c 	bl	8000f74 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004684:	429a      	cmp	r2, r3
 8004686:	d803      	bhi.n	8004690 <HAL_SPI_TransmitReceive+0x3c2>
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d102      	bne.n	8004696 <HAL_SPI_TransmitReceive+0x3c8>
 8004690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e02c      	b.n	8004704 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f47f af55 	bne.w	8004560 <HAL_SPI_TransmitReceive+0x292>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f47f af4e 	bne.w	8004560 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 f995 	bl	80049f8 <SPI_EndRxTxTransaction>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e00e      	b.n	8004704 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004702:	2300      	movs	r3, #0
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3728      	adds	r7, #40	@ 0x28
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800471c:	f7fc fc2a 	bl	8000f74 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	4413      	add	r3, r2
 800472a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800472c:	f7fc fc22 	bl	8000f74 <HAL_GetTick>
 8004730:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004732:	4b39      	ldr	r3, [pc, #228]	@ (8004818 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	015b      	lsls	r3, r3, #5
 8004738:	0d1b      	lsrs	r3, r3, #20
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	fb02 f303 	mul.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004742:	e054      	b.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d050      	beq.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800474c:	f7fc fc12 	bl	8000f74 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	429a      	cmp	r2, r3
 800475a:	d902      	bls.n	8004762 <SPI_WaitFlagStateUntilTimeout+0x56>
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d13d      	bne.n	80047de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800477a:	d111      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004784:	d004      	beq.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800478e:	d107      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800479e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a8:	d10f      	bne.n	80047ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e017      	b.n	800480e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	429a      	cmp	r2, r3
 800480a:	d19b      	bne.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000000 	.word	0x20000000

0800481c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800482e:	f7fc fba1 	bl	8000f74 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	4413      	add	r3, r2
 800483c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800483e:	f7fc fb99 	bl	8000f74 <HAL_GetTick>
 8004842:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800484c:	4b3d      	ldr	r3, [pc, #244]	@ (8004944 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	00da      	lsls	r2, r3, #3
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	0d1b      	lsrs	r3, r3, #20
 800485c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004864:	e060      	b.n	8004928 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800486c:	d107      	bne.n	800487e <SPI_WaitFifoStateUntilTimeout+0x62>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800487c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d050      	beq.n	8004928 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004886:	f7fc fb75 	bl	8000f74 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004892:	429a      	cmp	r2, r3
 8004894:	d902      	bls.n	800489c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	2b00      	cmp	r3, #0
 800489a:	d13d      	bne.n	8004918 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048b4:	d111      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048be:	d004      	beq.n	80048ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c8:	d107      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e2:	d10f      	bne.n	8004904 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004902:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e010      	b.n	800493a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	3b01      	subs	r3, #1
 8004926:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d196      	bne.n	8004866 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3728      	adds	r7, #40	@ 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000000 	.word	0x20000000

08004948 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800495c:	d111      	bne.n	8004982 <SPI_EndRxTransaction+0x3a>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004966:	d004      	beq.n	8004972 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004970:	d107      	bne.n	8004982 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004980:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2200      	movs	r2, #0
 800498a:	2180      	movs	r1, #128	@ 0x80
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7ff febd 	bl	800470c <SPI_WaitFlagStateUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e023      	b.n	80049f0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049b0:	d11d      	bne.n	80049ee <SPI_EndRxTransaction+0xa6>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ba:	d004      	beq.n	80049c6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c4:	d113      	bne.n	80049ee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff ff22 	bl	800481c <SPI_WaitFifoStateUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e000      	b.n	80049f0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff ff03 	bl	800481c <SPI_WaitFifoStateUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e027      	b.n	8004a7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2200      	movs	r2, #0
 8004a34:	2180      	movs	r1, #128	@ 0x80
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff fe68 	bl	800470c <SPI_WaitFlagStateUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e014      	b.n	8004a7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff fedc 	bl	800481c <SPI_WaitFifoStateUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e000      	b.n	8004a7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e042      	b.n	8004b1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fc f8c1 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2224      	movs	r2, #36	@ 0x24
 8004ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0201 	bic.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fb24 	bl	800511c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f825 	bl	8004b24 <UART_SetConfig>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e01b      	b.n	8004b1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004af2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fba3 	bl	8005260 <UART_CheckIdleState>
 8004b1a:	4603      	mov	r3, r0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b28:	b08c      	sub	sp, #48	@ 0x30
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4baa      	ldr	r3, [pc, #680]	@ (8004dfc <UART_SetConfig+0x2d8>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a9f      	ldr	r2, [pc, #636]	@ (8004e00 <UART_SetConfig+0x2dc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d004      	beq.n	8004b90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004b9a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bae:	f023 010f 	bic.w	r1, r3, #15
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a90      	ldr	r2, [pc, #576]	@ (8004e04 <UART_SetConfig+0x2e0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d125      	bne.n	8004c14 <UART_SetConfig+0xf0>
 8004bc8:	4b8f      	ldr	r3, [pc, #572]	@ (8004e08 <UART_SetConfig+0x2e4>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d81a      	bhi.n	8004c0c <UART_SetConfig+0xe8>
 8004bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <UART_SetConfig+0xb8>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004bfd 	.word	0x08004bfd
 8004be4:	08004bf5 	.word	0x08004bf5
 8004be8:	08004c05 	.word	0x08004c05
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bf2:	e116      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bfa:	e112      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c02:	e10e      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0a:	e10a      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c12:	e106      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a7c      	ldr	r2, [pc, #496]	@ (8004e0c <UART_SetConfig+0x2e8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d138      	bne.n	8004c90 <UART_SetConfig+0x16c>
 8004c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e08 <UART_SetConfig+0x2e4>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	d82d      	bhi.n	8004c88 <UART_SetConfig+0x164>
 8004c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <UART_SetConfig+0x110>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004c89 	.word	0x08004c89
 8004c3c:	08004c89 	.word	0x08004c89
 8004c40:	08004c89 	.word	0x08004c89
 8004c44:	08004c79 	.word	0x08004c79
 8004c48:	08004c89 	.word	0x08004c89
 8004c4c:	08004c89 	.word	0x08004c89
 8004c50:	08004c89 	.word	0x08004c89
 8004c54:	08004c71 	.word	0x08004c71
 8004c58:	08004c89 	.word	0x08004c89
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	08004c89 	.word	0x08004c89
 8004c64:	08004c81 	.word	0x08004c81
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6e:	e0d8      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c76:	e0d4      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c7e:	e0d0      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004c80:	2308      	movs	r3, #8
 8004c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c86:	e0cc      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c8e:	e0c8      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a5e      	ldr	r2, [pc, #376]	@ (8004e10 <UART_SetConfig+0x2ec>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d125      	bne.n	8004ce6 <UART_SetConfig+0x1c2>
 8004c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004e08 <UART_SetConfig+0x2e4>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ca4:	2b30      	cmp	r3, #48	@ 0x30
 8004ca6:	d016      	beq.n	8004cd6 <UART_SetConfig+0x1b2>
 8004ca8:	2b30      	cmp	r3, #48	@ 0x30
 8004caa:	d818      	bhi.n	8004cde <UART_SetConfig+0x1ba>
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d00a      	beq.n	8004cc6 <UART_SetConfig+0x1a2>
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d814      	bhi.n	8004cde <UART_SetConfig+0x1ba>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <UART_SetConfig+0x19a>
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d008      	beq.n	8004cce <UART_SetConfig+0x1aa>
 8004cbc:	e00f      	b.n	8004cde <UART_SetConfig+0x1ba>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cc4:	e0ad      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ccc:	e0a9      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004cce:	2304      	movs	r3, #4
 8004cd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd4:	e0a5      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cdc:	e0a1      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004cde:	2310      	movs	r3, #16
 8004ce0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ce4:	e09d      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a4a      	ldr	r2, [pc, #296]	@ (8004e14 <UART_SetConfig+0x2f0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d125      	bne.n	8004d3c <UART_SetConfig+0x218>
 8004cf0:	4b45      	ldr	r3, [pc, #276]	@ (8004e08 <UART_SetConfig+0x2e4>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cfc:	d016      	beq.n	8004d2c <UART_SetConfig+0x208>
 8004cfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d00:	d818      	bhi.n	8004d34 <UART_SetConfig+0x210>
 8004d02:	2b80      	cmp	r3, #128	@ 0x80
 8004d04:	d00a      	beq.n	8004d1c <UART_SetConfig+0x1f8>
 8004d06:	2b80      	cmp	r3, #128	@ 0x80
 8004d08:	d814      	bhi.n	8004d34 <UART_SetConfig+0x210>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <UART_SetConfig+0x1f0>
 8004d0e:	2b40      	cmp	r3, #64	@ 0x40
 8004d10:	d008      	beq.n	8004d24 <UART_SetConfig+0x200>
 8004d12:	e00f      	b.n	8004d34 <UART_SetConfig+0x210>
 8004d14:	2300      	movs	r3, #0
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d1a:	e082      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d22:	e07e      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004d24:	2304      	movs	r3, #4
 8004d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d2a:	e07a      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d32:	e076      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004d34:	2310      	movs	r3, #16
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d3a:	e072      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a35      	ldr	r2, [pc, #212]	@ (8004e18 <UART_SetConfig+0x2f4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d12a      	bne.n	8004d9c <UART_SetConfig+0x278>
 8004d46:	4b30      	ldr	r3, [pc, #192]	@ (8004e08 <UART_SetConfig+0x2e4>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d54:	d01a      	beq.n	8004d8c <UART_SetConfig+0x268>
 8004d56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d5a:	d81b      	bhi.n	8004d94 <UART_SetConfig+0x270>
 8004d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d60:	d00c      	beq.n	8004d7c <UART_SetConfig+0x258>
 8004d62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d66:	d815      	bhi.n	8004d94 <UART_SetConfig+0x270>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <UART_SetConfig+0x250>
 8004d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d70:	d008      	beq.n	8004d84 <UART_SetConfig+0x260>
 8004d72:	e00f      	b.n	8004d94 <UART_SetConfig+0x270>
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7a:	e052      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d82:	e04e      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004d84:	2304      	movs	r3, #4
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8a:	e04a      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d92:	e046      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004d94:	2310      	movs	r3, #16
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d9a:	e042      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a17      	ldr	r2, [pc, #92]	@ (8004e00 <UART_SetConfig+0x2dc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d13a      	bne.n	8004e1c <UART_SetConfig+0x2f8>
 8004da6:	4b18      	ldr	r3, [pc, #96]	@ (8004e08 <UART_SetConfig+0x2e4>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004db0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004db4:	d01a      	beq.n	8004dec <UART_SetConfig+0x2c8>
 8004db6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dba:	d81b      	bhi.n	8004df4 <UART_SetConfig+0x2d0>
 8004dbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dc0:	d00c      	beq.n	8004ddc <UART_SetConfig+0x2b8>
 8004dc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dc6:	d815      	bhi.n	8004df4 <UART_SetConfig+0x2d0>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <UART_SetConfig+0x2b0>
 8004dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd0:	d008      	beq.n	8004de4 <UART_SetConfig+0x2c0>
 8004dd2:	e00f      	b.n	8004df4 <UART_SetConfig+0x2d0>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dda:	e022      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004de2:	e01e      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004de4:	2304      	movs	r3, #4
 8004de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dea:	e01a      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004dec:	2308      	movs	r3, #8
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004df2:	e016      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004df4:	2310      	movs	r3, #16
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dfa:	e012      	b.n	8004e22 <UART_SetConfig+0x2fe>
 8004dfc:	cfff69f3 	.word	0xcfff69f3
 8004e00:	40008000 	.word	0x40008000
 8004e04:	40013800 	.word	0x40013800
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40004400 	.word	0x40004400
 8004e10:	40004800 	.word	0x40004800
 8004e14:	40004c00 	.word	0x40004c00
 8004e18:	40005000 	.word	0x40005000
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4aae      	ldr	r2, [pc, #696]	@ (80050e0 <UART_SetConfig+0x5bc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	f040 8097 	bne.w	8004f5c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d823      	bhi.n	8004e7e <UART_SetConfig+0x35a>
 8004e36:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <UART_SetConfig+0x318>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08004e7f 	.word	0x08004e7f
 8004e44:	08004e69 	.word	0x08004e69
 8004e48:	08004e7f 	.word	0x08004e7f
 8004e4c:	08004e6f 	.word	0x08004e6f
 8004e50:	08004e7f 	.word	0x08004e7f
 8004e54:	08004e7f 	.word	0x08004e7f
 8004e58:	08004e7f 	.word	0x08004e7f
 8004e5c:	08004e77 	.word	0x08004e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e60:	f7fe fc2e 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8004e64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e66:	e010      	b.n	8004e8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e68:	4b9e      	ldr	r3, [pc, #632]	@ (80050e4 <UART_SetConfig+0x5c0>)
 8004e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e6c:	e00d      	b.n	8004e8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6e:	f7fe fbb9 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004e72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e74:	e009      	b.n	8004e8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e7c:	e005      	b.n	8004e8a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8130 	beq.w	80050f2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	4a94      	ldr	r2, [pc, #592]	@ (80050e8 <UART_SetConfig+0x5c4>)
 8004e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	4413      	add	r3, r2
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d305      	bcc.n	8004ec2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d903      	bls.n	8004eca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ec8:	e113      	b.n	80050f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	2200      	movs	r2, #0
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	60fa      	str	r2, [r7, #12]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed6:	4a84      	ldr	r2, [pc, #528]	@ (80050e8 <UART_SetConfig+0x5c4>)
 8004ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2200      	movs	r2, #0
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004eec:	f7fb f9e8 	bl	80002c0 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	020b      	lsls	r3, r1, #8
 8004f02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f06:	0202      	lsls	r2, r0, #8
 8004f08:	6979      	ldr	r1, [r7, #20]
 8004f0a:	6849      	ldr	r1, [r1, #4]
 8004f0c:	0849      	lsrs	r1, r1, #1
 8004f0e:	2000      	movs	r0, #0
 8004f10:	460c      	mov	r4, r1
 8004f12:	4605      	mov	r5, r0
 8004f14:	eb12 0804 	adds.w	r8, r2, r4
 8004f18:	eb43 0905 	adc.w	r9, r3, r5
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	469a      	mov	sl, r3
 8004f24:	4693      	mov	fp, r2
 8004f26:	4652      	mov	r2, sl
 8004f28:	465b      	mov	r3, fp
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	f7fb f9c7 	bl	80002c0 <__aeabi_uldivmod>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4613      	mov	r3, r2
 8004f38:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f40:	d308      	bcc.n	8004f54 <UART_SetConfig+0x430>
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f48:	d204      	bcs.n	8004f54 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a3a      	ldr	r2, [r7, #32]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	e0ce      	b.n	80050f2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f5a:	e0ca      	b.n	80050f2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f64:	d166      	bne.n	8005034 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d827      	bhi.n	8004fbe <UART_SetConfig+0x49a>
 8004f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f74 <UART_SetConfig+0x450>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004fa1 	.word	0x08004fa1
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	08004fbf 	.word	0x08004fbf
 8004f84:	08004faf 	.word	0x08004faf
 8004f88:	08004fbf 	.word	0x08004fbf
 8004f8c:	08004fbf 	.word	0x08004fbf
 8004f90:	08004fbf 	.word	0x08004fbf
 8004f94:	08004fb7 	.word	0x08004fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f98:	f7fe fb92 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8004f9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f9e:	e014      	b.n	8004fca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fa0:	f7fe fba4 	bl	80036ec <HAL_RCC_GetPCLK2Freq>
 8004fa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fa6:	e010      	b.n	8004fca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa8:	4b4e      	ldr	r3, [pc, #312]	@ (80050e4 <UART_SetConfig+0x5c0>)
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fac:	e00d      	b.n	8004fca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fae:	f7fe fb19 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004fb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fb4:	e009      	b.n	8004fca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fbc:	e005      	b.n	8004fca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004fc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8090 	beq.w	80050f2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd6:	4a44      	ldr	r2, [pc, #272]	@ (80050e8 <UART_SetConfig+0x5c4>)
 8004fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fe4:	005a      	lsls	r2, r3, #1
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	441a      	add	r2, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	2b0f      	cmp	r3, #15
 8004ffc:	d916      	bls.n	800502c <UART_SetConfig+0x508>
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005004:	d212      	bcs.n	800502c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	b29b      	uxth	r3, r3
 800500a:	f023 030f 	bic.w	r3, r3, #15
 800500e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	b29b      	uxth	r3, r3
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	b29a      	uxth	r2, r3
 800501c:	8bfb      	ldrh	r3, [r7, #30]
 800501e:	4313      	orrs	r3, r2
 8005020:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	8bfa      	ldrh	r2, [r7, #30]
 8005028:	60da      	str	r2, [r3, #12]
 800502a:	e062      	b.n	80050f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005032:	e05e      	b.n	80050f2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005034:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005038:	2b08      	cmp	r3, #8
 800503a:	d828      	bhi.n	800508e <UART_SetConfig+0x56a>
 800503c:	a201      	add	r2, pc, #4	@ (adr r2, 8005044 <UART_SetConfig+0x520>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	08005069 	.word	0x08005069
 8005048:	08005071 	.word	0x08005071
 800504c:	08005079 	.word	0x08005079
 8005050:	0800508f 	.word	0x0800508f
 8005054:	0800507f 	.word	0x0800507f
 8005058:	0800508f 	.word	0x0800508f
 800505c:	0800508f 	.word	0x0800508f
 8005060:	0800508f 	.word	0x0800508f
 8005064:	08005087 	.word	0x08005087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005068:	f7fe fb2a 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 800506c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800506e:	e014      	b.n	800509a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005070:	f7fe fb3c 	bl	80036ec <HAL_RCC_GetPCLK2Freq>
 8005074:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005076:	e010      	b.n	800509a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005078:	4b1a      	ldr	r3, [pc, #104]	@ (80050e4 <UART_SetConfig+0x5c0>)
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800507c:	e00d      	b.n	800509a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507e:	f7fe fab1 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8005082:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005084:	e009      	b.n	800509a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800508a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800508c:	e005      	b.n	800509a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005098:	bf00      	nop
    }

    if (pclk != 0U)
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	d028      	beq.n	80050f2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a4:	4a10      	ldr	r2, [pc, #64]	@ (80050e8 <UART_SetConfig+0x5c4>)
 80050a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	441a      	add	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	d910      	bls.n	80050ec <UART_SetConfig+0x5c8>
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d0:	d20c      	bcs.n	80050ec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60da      	str	r2, [r3, #12]
 80050dc:	e009      	b.n	80050f2 <UART_SetConfig+0x5ce>
 80050de:	bf00      	nop
 80050e0:	40008000 	.word	0x40008000
 80050e4:	00f42400 	.word	0x00f42400
 80050e8:	08009320 	.word	0x08009320
      }
      else
      {
        ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2200      	movs	r2, #0
 8005106:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2200      	movs	r2, #0
 800510c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800510e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005112:	4618      	mov	r0, r3
 8005114:	3730      	adds	r7, #48	@ 0x30
 8005116:	46bd      	mov	sp, r7
 8005118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800511c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01a      	beq.n	8005232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800521a:	d10a      	bne.n	8005232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b098      	sub	sp, #96	@ 0x60
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005270:	f7fb fe80 	bl	8000f74 <HAL_GetTick>
 8005274:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b08      	cmp	r3, #8
 8005282:	d12f      	bne.n	80052e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800528c:	2200      	movs	r2, #0
 800528e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f88e 	bl	80053b4 <UART_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d022      	beq.n	80052e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e6      	bne.n	800529e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e063      	b.n	80053ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d149      	bne.n	8005386 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fa:	2200      	movs	r2, #0
 80052fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f857 	bl	80053b4 <UART_WaitOnFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d03c      	beq.n	8005386 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	623b      	str	r3, [r7, #32]
   return(result);
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800532a:	633b      	str	r3, [r7, #48]	@ 0x30
 800532c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e6      	bne.n	800530c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3308      	adds	r3, #8
 8005344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	60fb      	str	r3, [r7, #12]
   return(result);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3308      	adds	r3, #8
 800535c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800535e:	61fa      	str	r2, [r7, #28]
 8005360:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	69b9      	ldr	r1, [r7, #24]
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	617b      	str	r3, [r7, #20]
   return(result);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e5      	bne.n	800533e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e012      	b.n	80053ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3758      	adds	r7, #88	@ 0x58
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4613      	mov	r3, r2
 80053c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c4:	e04f      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d04b      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ce:	f7fb fdd1 	bl	8000f74 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d302      	bcc.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e04e      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d037      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b80      	cmp	r3, #128	@ 0x80
 80053fa:	d034      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b40      	cmp	r3, #64	@ 0x40
 8005400:	d031      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b08      	cmp	r3, #8
 800540e:	d110      	bne.n	8005432 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2208      	movs	r2, #8
 8005416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f838 	bl	800548e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2208      	movs	r2, #8
 8005422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e029      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800543c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005440:	d111      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800544a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f81e 	bl	800548e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e00f      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4013      	ands	r3, r2
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	bf0c      	ite	eq
 8005476:	2301      	moveq	r3, #1
 8005478:	2300      	movne	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	429a      	cmp	r2, r3
 8005482:	d0a0      	beq.n	80053c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800548e:	b480      	push	{r7}
 8005490:	b095      	sub	sp, #84	@ 0x54
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80054b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e6      	bne.n	8005496 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e3      	bne.n	80054c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005504:	2b01      	cmp	r3, #1
 8005506:	d118      	bne.n	800553a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	60bb      	str	r3, [r7, #8]
   return(result);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f023 0310 	bic.w	r3, r3, #16
 800551c:	647b      	str	r3, [r7, #68]	@ 0x44
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6979      	ldr	r1, [r7, #20]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	613b      	str	r3, [r7, #16]
   return(result);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e6      	bne.n	8005508 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800554e:	bf00      	nop
 8005550:	3754      	adds	r7, #84	@ 0x54
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_UARTEx_DisableFifoMode+0x16>
 800556c:	2302      	movs	r3, #2
 800556e:	e027      	b.n	80055c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2224      	movs	r2, #36	@ 0x24
 800557c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800559e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e02d      	b.n	8005640 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2224      	movs	r2, #36	@ 0x24
 80055f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f84f 	bl	80056c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800565c:	2302      	movs	r3, #2
 800565e:	e02d      	b.n	80056bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2224      	movs	r2, #36	@ 0x24
 800566c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f811 	bl	80056c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d108      	bne.n	80056e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056e4:	e031      	b.n	800574a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056e6:	2308      	movs	r3, #8
 80056e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056ea:	2308      	movs	r3, #8
 80056ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	0e5b      	lsrs	r3, r3, #25
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	0f5b      	lsrs	r3, r3, #29
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800570e:	7bbb      	ldrb	r3, [r7, #14]
 8005710:	7b3a      	ldrb	r2, [r7, #12]
 8005712:	4911      	ldr	r1, [pc, #68]	@ (8005758 <UARTEx_SetNbDataToProcess+0x94>)
 8005714:	5c8a      	ldrb	r2, [r1, r2]
 8005716:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800571a:	7b3a      	ldrb	r2, [r7, #12]
 800571c:	490f      	ldr	r1, [pc, #60]	@ (800575c <UARTEx_SetNbDataToProcess+0x98>)
 800571e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005720:	fb93 f3f2 	sdiv	r3, r3, r2
 8005724:	b29a      	uxth	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	7b7a      	ldrb	r2, [r7, #13]
 8005730:	4909      	ldr	r1, [pc, #36]	@ (8005758 <UARTEx_SetNbDataToProcess+0x94>)
 8005732:	5c8a      	ldrb	r2, [r1, r2]
 8005734:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005738:	7b7a      	ldrb	r2, [r7, #13]
 800573a:	4908      	ldr	r1, [pc, #32]	@ (800575c <UARTEx_SetNbDataToProcess+0x98>)
 800573c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800573e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005742:	b29a      	uxth	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	08009338 	.word	0x08009338
 800575c:	08009340 	.word	0x08009340

08005760 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005760:	b480      	push	{r7}
 8005762:	b0a7      	sub	sp, #156	@ 0x9c
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005786:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	78db      	ldrb	r3, [r3, #3]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d81f      	bhi.n	80057d2 <USB_ActivateEndpoint+0x72>
 8005792:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <USB_ActivateEndpoint+0x38>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057c5 	.word	0x080057c5
 80057a0:	080057db 	.word	0x080057db
 80057a4:	080057b7 	.word	0x080057b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80057a8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80057ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80057b4:	e012      	b.n	80057dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80057b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80057ba:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80057be:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80057c2:	e00b      	b.n	80057dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80057c4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80057c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057cc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80057d0:	e004      	b.n	80057dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80057d8:	e000      	b.n	80057dc <USB_ActivateEndpoint+0x7c>
      break;
 80057da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80057ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	b21b      	sxth	r3, r3
 800580e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005816:	b21a      	sxth	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	b21b      	sxth	r3, r3
 800581e:	4313      	orrs	r3, r2
 8005820:	b21b      	sxth	r3, r3
 8005822:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	441a      	add	r2, r3
 8005830:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	7b1b      	ldrb	r3, [r3, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f040 8180 	bne.w	8005b52 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 8084 	beq.w	8005964 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005866:	b29b      	uxth	r3, r3
 8005868:	461a      	mov	r2, r3
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	4413      	add	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	00da      	lsls	r2, r3, #3
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	88db      	ldrh	r3, [r3, #6]
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	b29b      	uxth	r3, r3
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	827b      	strh	r3, [r7, #18]
 800589e:	8a7b      	ldrh	r3, [r7, #18]
 80058a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01b      	beq.n	80058e0 <USB_ActivateEndpoint+0x180>
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058be:	823b      	strh	r3, [r7, #16]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	441a      	add	r2, r3
 80058ca:	8a3b      	ldrh	r3, [r7, #16]
 80058cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058dc:	b29b      	uxth	r3, r3
 80058de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	78db      	ldrb	r3, [r3, #3]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d020      	beq.n	800592a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058fe:	81bb      	strh	r3, [r7, #12]
 8005900:	89bb      	ldrh	r3, [r7, #12]
 8005902:	f083 0320 	eor.w	r3, r3, #32
 8005906:	81bb      	strh	r3, [r7, #12]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	441a      	add	r2, r3
 8005912:	89bb      	ldrh	r3, [r7, #12]
 8005914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800591c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005924:	b29b      	uxth	r3, r3
 8005926:	8013      	strh	r3, [r2, #0]
 8005928:	e3f9      	b.n	800611e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800593c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005940:	81fb      	strh	r3, [r7, #14]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	89fb      	ldrh	r3, [r7, #14]
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800595a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]
 8005962:	e3dc      	b.n	800611e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	633b      	str	r3, [r7, #48]	@ 0x30
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800596e:	b29b      	uxth	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	4413      	add	r3, r2
 8005976:	633b      	str	r3, [r7, #48]	@ 0x30
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	00da      	lsls	r2, r3, #3
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	4413      	add	r3, r2
 8005982:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	88db      	ldrh	r3, [r3, #6]
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	b29b      	uxth	r3, r3
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005996:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a8:	4413      	add	r3, r2
 80059aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	00da      	lsls	r2, r3, #3
 80059b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b4:	4413      	add	r3, r2
 80059b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	801a      	strh	r2, [r3, #0]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <USB_ActivateEndpoint+0x28a>
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	e041      	b.n	8005a6e <USB_ActivateEndpoint+0x30e>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80059f0:	d81c      	bhi.n	8005a2c <USB_ActivateEndpoint+0x2cc>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <USB_ActivateEndpoint+0x2b2>
 8005a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	029b      	lsls	r3, r3, #10
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	4313      	orrs	r3, r2
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e020      	b.n	8005a6e <USB_ActivateEndpoint+0x30e>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <USB_ActivateEndpoint+0x2ec>
 8005a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a46:	3b01      	subs	r3, #1
 8005a48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	029b      	lsls	r3, r3, #10
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005a7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d01b      	beq.n	8005abe <USB_ActivateEndpoint+0x35e>
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9c:	843b      	strh	r3, [r7, #32]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	441a      	add	r2, r3
 8005aa8:	8c3b      	ldrh	r3, [r7, #32]
 8005aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d124      	bne.n	8005b10 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005adc:	83bb      	strh	r3, [r7, #28]
 8005ade:	8bbb      	ldrh	r3, [r7, #28]
 8005ae0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ae4:	83bb      	strh	r3, [r7, #28]
 8005ae6:	8bbb      	ldrh	r3, [r7, #28]
 8005ae8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005aec:	83bb      	strh	r3, [r7, #28]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	441a      	add	r2, r3
 8005af8:	8bbb      	ldrh	r3, [r7, #28]
 8005afa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005afe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	8013      	strh	r3, [r2, #0]
 8005b0e:	e306      	b.n	800611e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b26:	83fb      	strh	r3, [r7, #30]
 8005b28:	8bfb      	ldrh	r3, [r7, #30]
 8005b2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b2e:	83fb      	strh	r3, [r7, #30]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	8bfb      	ldrh	r3, [r7, #30]
 8005b3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	8013      	strh	r3, [r2, #0]
 8005b50:	e2e5      	b.n	800611e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	78db      	ldrb	r3, [r3, #3]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d11e      	bne.n	8005b98 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b70:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	441a      	add	r2, r3
 8005b7e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005b82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b8a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	8013      	strh	r3, [r2, #0]
 8005b96:	e01d      	b.n	8005bd4 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bae:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8005bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005be4:	4413      	add	r3, r2
 8005be6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	00da      	lsls	r2, r3, #3
 8005bee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	891b      	ldrh	r3, [r3, #8]
 8005bfc:	085b      	lsrs	r3, r3, #1
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c18:	4413      	add	r3, r2
 8005c1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	00da      	lsls	r2, r3, #3
 8005c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c24:	4413      	add	r3, r2
 8005c26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	895b      	ldrh	r3, [r3, #10]
 8005c30:	085b      	lsrs	r3, r3, #1
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c3a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 81af 	bne.w	8005fa4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8005c56:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8005c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01d      	beq.n	8005c9e <USB_ActivateEndpoint+0x53e>
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c78:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	441a      	add	r2, r3
 8005c86:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8005cae:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8005cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01d      	beq.n	8005cf6 <USB_ActivateEndpoint+0x596>
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8005ce2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ce6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d16b      	bne.n	8005dd6 <USB_ActivateEndpoint+0x676>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d0e:	4413      	add	r3, r2
 8005d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	00da      	lsls	r2, r3, #3
 8005d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <USB_ActivateEndpoint+0x5f0>
 8005d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d4c:	801a      	strh	r2, [r3, #0]
 8005d4e:	e05d      	b.n	8005e0c <USB_ActivateEndpoint+0x6ac>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d56:	d81c      	bhi.n	8005d92 <USB_ActivateEndpoint+0x632>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d004      	beq.n	8005d78 <USB_ActivateEndpoint+0x618>
 8005d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d72:	3301      	adds	r3, #1
 8005d74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	029b      	lsls	r3, r3, #10
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	e03c      	b.n	8005e0c <USB_ActivateEndpoint+0x6ac>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f003 031f 	and.w	r3, r3, #31
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <USB_ActivateEndpoint+0x652>
 8005da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dac:	3b01      	subs	r3, #1
 8005dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	029b      	lsls	r3, r3, #10
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	e01a      	b.n	8005e0c <USB_ActivateEndpoint+0x6ac>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d116      	bne.n	8005e0c <USB_ActivateEndpoint+0x6ac>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dee:	4413      	add	r3, r2
 8005df0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	00da      	lsls	r2, r3, #3
 8005df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e00:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e0a:	801a      	strh	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d16b      	bne.n	8005ef0 <USB_ActivateEndpoint+0x790>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e28:	4413      	add	r3, r2
 8005e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	00da      	lsls	r2, r3, #3
 8005e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e34:	4413      	add	r3, r2
 8005e36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <USB_ActivateEndpoint+0x70a>
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e66:	801a      	strh	r2, [r3, #0]
 8005e68:	e05b      	b.n	8005f22 <USB_ActivateEndpoint+0x7c2>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e70:	d81c      	bhi.n	8005eac <USB_ActivateEndpoint+0x74c>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <USB_ActivateEndpoint+0x732>
 8005e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	029b      	lsls	r3, r3, #10
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	e03a      	b.n	8005f22 <USB_ActivateEndpoint+0x7c2>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 031f 	and.w	r3, r3, #31
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <USB_ActivateEndpoint+0x76c>
 8005ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	029b      	lsls	r3, r3, #10
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	4313      	orrs	r3, r2
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eec:	801a      	strh	r2, [r3, #0]
 8005eee:	e018      	b.n	8005f22 <USB_ActivateEndpoint+0x7c2>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d114      	bne.n	8005f22 <USB_ActivateEndpoint+0x7c2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f04:	4413      	add	r3, r2
 8005f06:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	00da      	lsls	r2, r3, #3
 8005f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f10:	4413      	add	r3, r2
 8005f12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f16:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f20:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f38:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005f3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f40:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005f42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f48:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	441a      	add	r2, r3
 8005f54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f80:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	441a      	add	r2, r3
 8005f8c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	8013      	strh	r3, [r2, #0]
 8005fa2:	e0bc      	b.n	800611e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8005fb4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01d      	beq.n	8005ffc <USB_ActivateEndpoint+0x89c>
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	441a      	add	r2, r3
 8005fe4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800600c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01d      	beq.n	8006054 <USB_ActivateEndpoint+0x8f4>
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800602a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800602e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	441a      	add	r2, r3
 800603c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800604c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006050:	b29b      	uxth	r3, r3
 8006052:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	78db      	ldrb	r3, [r3, #3]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d024      	beq.n	80060a6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006072:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006076:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800607a:	f083 0320 	eor.w	r3, r3, #32
 800607e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800609c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]
 80060a4:	e01d      	b.n	80060e2 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060bc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	441a      	add	r2, r3
 80060ca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060de:	b29b      	uxth	r3, r3
 80060e0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	441a      	add	r2, r3
 8006106:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800610a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800610e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800611a:	b29b      	uxth	r3, r3
 800611c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800611e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006122:	4618      	mov	r0, r3
 8006124:	379c      	adds	r7, #156	@ 0x9c
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop

08006130 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b0ac      	sub	sp, #176	@ 0xb0
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b01      	cmp	r3, #1
 8006140:	f040 84ca 	bne.w	8006ad8 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	699a      	ldr	r2, [r3, #24]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	429a      	cmp	r2, r3
 800614e:	d904      	bls.n	800615a <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006158:	e003      	b.n	8006162 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	7b1b      	ldrb	r3, [r3, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d122      	bne.n	80061b0 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6959      	ldr	r1, [r3, #20]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	88da      	ldrh	r2, [r3, #6]
 8006172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006176:	b29b      	uxth	r3, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fea6 	bl	8006eca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	613b      	str	r3, [r7, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006188:	b29b      	uxth	r3, r3
 800618a:	461a      	mov	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4413      	add	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	00da      	lsls	r2, r3, #3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	4413      	add	r3, r2
 800619c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	f000 bc6f 	b.w	8006a8e <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	78db      	ldrb	r3, [r3, #3]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	f040 831e 	bne.w	80067f6 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6a1a      	ldr	r2, [r3, #32]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	f240 82cf 	bls.w	8006766 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061de:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	441a      	add	r2, r3
 80061ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80061f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061f8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80061fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006200:	b29b      	uxth	r3, r3
 8006202:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	6a1a      	ldr	r2, [r3, #32]
 8006208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800620c:	1ad2      	subs	r2, r2, r3
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 814f 	beq.w	80064c8 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	633b      	str	r3, [r7, #48]	@ 0x30
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	785b      	ldrb	r3, [r3, #1]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d16b      	bne.n	800630e <USB_EPStartXfer+0x1de>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006240:	b29b      	uxth	r3, r3
 8006242:	461a      	mov	r2, r3
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	4413      	add	r3, r2
 8006248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	00da      	lsls	r2, r3, #3
 8006250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006252:	4413      	add	r3, r2
 8006254:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006264:	b29a      	uxth	r2, r3
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	801a      	strh	r2, [r3, #0]
 800626a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <USB_EPStartXfer+0x158>
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006280:	b29a      	uxth	r2, r3
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	e05b      	b.n	8006340 <USB_EPStartXfer+0x210>
 8006288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800628c:	2b3e      	cmp	r3, #62	@ 0x3e
 800628e:	d81c      	bhi.n	80062ca <USB_EPStartXfer+0x19a>
 8006290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800629a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d004      	beq.n	80062b0 <USB_EPStartXfer+0x180>
 80062a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062aa:	3301      	adds	r3, #1
 80062ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	029b      	lsls	r3, r3, #10
 80062be:	b29b      	uxth	r3, r3
 80062c0:	4313      	orrs	r3, r2
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	e03a      	b.n	8006340 <USB_EPStartXfer+0x210>
 80062ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <USB_EPStartXfer+0x1ba>
 80062e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062e4:	3b01      	subs	r3, #1
 80062e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	029b      	lsls	r3, r3, #10
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	4313      	orrs	r3, r2
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006306:	b29a      	uxth	r2, r3
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	e018      	b.n	8006340 <USB_EPStartXfer+0x210>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d114      	bne.n	8006340 <USB_EPStartXfer+0x210>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800631c:	b29b      	uxth	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006322:	4413      	add	r3, r2
 8006324:	633b      	str	r3, [r7, #48]	@ 0x30
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	00da      	lsls	r2, r3, #3
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	4413      	add	r3, r2
 8006330:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800633a:	b29a      	uxth	r2, r3
 800633c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	895b      	ldrh	r3, [r3, #10]
 8006344:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6959      	ldr	r1, [r3, #20]
 800634c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006350:	b29b      	uxth	r3, r3
 8006352:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fdb7 	bl	8006eca <USB_WritePMA>
            ep->xfer_buff += len;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006364:	441a      	add	r2, r3
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6a1a      	ldr	r2, [r3, #32]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	429a      	cmp	r2, r3
 8006374:	d907      	bls.n	8006386 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6a1a      	ldr	r2, [r3, #32]
 800637a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800637e:	1ad2      	subs	r2, r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	621a      	str	r2, [r3, #32]
 8006384:	e006      	b.n	8006394 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2200      	movs	r2, #0
 8006392:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d16b      	bne.n	8006474 <USB_EPStartXfer+0x344>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	4413      	add	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	00da      	lsls	r2, r3, #3
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	4413      	add	r3, r2
 80063ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	801a      	strh	r2, [r3, #0]
 80063d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <USB_EPStartXfer+0x2be>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e05d      	b.n	80064aa <USB_EPStartXfer+0x37a>
 80063ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80063f4:	d81c      	bhi.n	8006430 <USB_EPStartXfer+0x300>
 80063f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063fa:	085b      	lsrs	r3, r3, #1
 80063fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <USB_EPStartXfer+0x2e6>
 800640c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006410:	3301      	adds	r3, #1
 8006412:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29a      	uxth	r2, r3
 800641c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006420:	b29b      	uxth	r3, r3
 8006422:	029b      	lsls	r3, r3, #10
 8006424:	b29b      	uxth	r3, r3
 8006426:	4313      	orrs	r3, r2
 8006428:	b29a      	uxth	r2, r3
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	e03c      	b.n	80064aa <USB_EPStartXfer+0x37a>
 8006430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800643a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <USB_EPStartXfer+0x320>
 8006446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800644a:	3b01      	subs	r3, #1
 800644c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29a      	uxth	r2, r3
 8006456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800645a:	b29b      	uxth	r3, r3
 800645c:	029b      	lsls	r3, r3, #10
 800645e:	b29b      	uxth	r3, r3
 8006460:	4313      	orrs	r3, r2
 8006462:	b29b      	uxth	r3, r3
 8006464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800646c:	b29a      	uxth	r2, r3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	801a      	strh	r2, [r3, #0]
 8006472:	e01a      	b.n	80064aa <USB_EPStartXfer+0x37a>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d116      	bne.n	80064aa <USB_EPStartXfer+0x37a>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	623b      	str	r3, [r7, #32]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006486:	b29b      	uxth	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	4413      	add	r3, r2
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	00da      	lsls	r2, r3, #3
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	4413      	add	r3, r2
 800649a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	891b      	ldrh	r3, [r3, #8]
 80064ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6959      	ldr	r1, [r3, #20]
 80064b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fd02 	bl	8006eca <USB_WritePMA>
 80064c6:	e2e2      	b.n	8006a8e <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d16b      	bne.n	80065a8 <USB_EPStartXfer+0x478>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064e0:	4413      	add	r3, r2
 80064e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	00da      	lsls	r2, r3, #3
 80064ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064ec:	4413      	add	r3, r2
 80064ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80064f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80064f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <USB_EPStartXfer+0x3f2>
 800650c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651a:	b29a      	uxth	r2, r3
 800651c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e05d      	b.n	80065de <USB_EPStartXfer+0x4ae>
 8006522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006526:	2b3e      	cmp	r3, #62	@ 0x3e
 8006528:	d81c      	bhi.n	8006564 <USB_EPStartXfer+0x434>
 800652a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d004      	beq.n	800654a <USB_EPStartXfer+0x41a>
 8006540:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006544:	3301      	adds	r3, #1
 8006546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800654a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29a      	uxth	r2, r3
 8006550:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006554:	b29b      	uxth	r3, r3
 8006556:	029b      	lsls	r3, r3, #10
 8006558:	b29b      	uxth	r3, r3
 800655a:	4313      	orrs	r3, r2
 800655c:	b29a      	uxth	r2, r3
 800655e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	e03c      	b.n	80065de <USB_EPStartXfer+0x4ae>
 8006564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800656e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <USB_EPStartXfer+0x454>
 800657a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800657e:	3b01      	subs	r3, #1
 8006580:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800658e:	b29b      	uxth	r3, r3
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	b29b      	uxth	r3, r3
 8006594:	4313      	orrs	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	e01a      	b.n	80065de <USB_EPStartXfer+0x4ae>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d116      	bne.n	80065de <USB_EPStartXfer+0x4ae>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065c0:	4413      	add	r3, r2
 80065c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	00da      	lsls	r2, r3, #3
 80065ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065cc:	4413      	add	r3, r2
 80065ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065d8:	b29a      	uxth	r2, r3
 80065da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	891b      	ldrh	r3, [r3, #8]
 80065e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6959      	ldr	r1, [r3, #20]
 80065ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fc68 	bl	8006eca <USB_WritePMA>
            ep->xfer_buff += len;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	695a      	ldr	r2, [r3, #20]
 80065fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006602:	441a      	add	r2, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	6a1a      	ldr	r2, [r3, #32]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	429a      	cmp	r2, r3
 8006612:	d907      	bls.n	8006624 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	6a1a      	ldr	r2, [r3, #32]
 8006618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800661c:	1ad2      	subs	r2, r2, r3
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	621a      	str	r2, [r3, #32]
 8006622:	e006      	b.n	8006632 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2200      	movs	r2, #0
 8006630:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	643b      	str	r3, [r7, #64]	@ 0x40
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d16b      	bne.n	8006716 <USB_EPStartXfer+0x5e6>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006648:	b29b      	uxth	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	4413      	add	r3, r2
 8006650:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	00da      	lsls	r2, r3, #3
 8006658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665a:	4413      	add	r3, r2
 800665c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006660:	637b      	str	r3, [r7, #52]	@ 0x34
 8006662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800666c:	b29a      	uxth	r2, r3
 800666e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <USB_EPStartXfer+0x560>
 800667a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006688:	b29a      	uxth	r2, r3
 800668a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	e05b      	b.n	8006748 <USB_EPStartXfer+0x618>
 8006690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006694:	2b3e      	cmp	r3, #62	@ 0x3e
 8006696:	d81c      	bhi.n	80066d2 <USB_EPStartXfer+0x5a2>
 8006698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800669c:	085b      	lsrs	r3, r3, #1
 800669e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <USB_EPStartXfer+0x588>
 80066ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066b2:	3301      	adds	r3, #1
 80066b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29a      	uxth	r2, r3
 80066be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	4313      	orrs	r3, r2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	e03a      	b.n	8006748 <USB_EPStartXfer+0x618>
 80066d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066e0:	f003 031f 	and.w	r3, r3, #31
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <USB_EPStartXfer+0x5c2>
 80066e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066ec:	3b01      	subs	r3, #1
 80066ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	029b      	lsls	r3, r3, #10
 8006700:	b29b      	uxth	r3, r3
 8006702:	4313      	orrs	r3, r2
 8006704:	b29b      	uxth	r3, r3
 8006706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670e:	b29a      	uxth	r2, r3
 8006710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	e018      	b.n	8006748 <USB_EPStartXfer+0x618>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d114      	bne.n	8006748 <USB_EPStartXfer+0x618>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006724:	b29b      	uxth	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800672a:	4413      	add	r3, r2
 800672c:	643b      	str	r3, [r7, #64]	@ 0x40
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	00da      	lsls	r2, r3, #3
 8006734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006736:	4413      	add	r3, r2
 8006738:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800673e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006742:	b29a      	uxth	r2, r3
 8006744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006746:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	895b      	ldrh	r3, [r3, #10]
 800674c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	6959      	ldr	r1, [r3, #20]
 8006754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006758:	b29b      	uxth	r3, r3
 800675a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fbb3 	bl	8006eca <USB_WritePMA>
 8006764:	e193      	b.n	8006a8e <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006784:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	441a      	add	r2, r3
 8006792:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800679a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800679e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	461a      	mov	r2, r3
 80067b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067ba:	4413      	add	r3, r2
 80067bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	00da      	lsls	r2, r3, #3
 80067c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067c6:	4413      	add	r3, r2
 80067c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	891b      	ldrh	r3, [r3, #8]
 80067dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	6959      	ldr	r1, [r3, #20]
 80067e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fb6b 	bl	8006eca <USB_WritePMA>
 80067f4:	e14b      	b.n	8006a8e <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	6a1a      	ldr	r2, [r3, #32]
 80067fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 809a 	beq.w	8006950 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d16b      	bne.n	8006900 <USB_EPStartXfer+0x7d0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006832:	b29b      	uxth	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006838:	4413      	add	r3, r2
 800683a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	00da      	lsls	r2, r3, #3
 8006842:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006844:	4413      	add	r3, r2
 8006846:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800684a:	667b      	str	r3, [r7, #100]	@ 0x64
 800684c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006856:	b29a      	uxth	r2, r3
 8006858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800685a:	801a      	strh	r2, [r3, #0]
 800685c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10a      	bne.n	800687a <USB_EPStartXfer+0x74a>
 8006864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006872:	b29a      	uxth	r2, r3
 8006874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e05b      	b.n	8006932 <USB_EPStartXfer+0x802>
 800687a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800687e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006880:	d81c      	bhi.n	80068bc <USB_EPStartXfer+0x78c>
 8006882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800688c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d004      	beq.n	80068a2 <USB_EPStartXfer+0x772>
 8006898:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800689c:	3301      	adds	r3, #1
 800689e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	029b      	lsls	r3, r3, #10
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068b8:	801a      	strh	r2, [r3, #0]
 80068ba:	e03a      	b.n	8006932 <USB_EPStartXfer+0x802>
 80068bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068c0:	095b      	lsrs	r3, r3, #5
 80068c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <USB_EPStartXfer+0x7ac>
 80068d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068d6:	3b01      	subs	r3, #1
 80068d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	4313      	orrs	r3, r2
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068fc:	801a      	strh	r2, [r3, #0]
 80068fe:	e018      	b.n	8006932 <USB_EPStartXfer+0x802>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d114      	bne.n	8006932 <USB_EPStartXfer+0x802>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006914:	4413      	add	r3, r2
 8006916:	673b      	str	r3, [r7, #112]	@ 0x70
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	00da      	lsls	r2, r3, #3
 800691e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006920:	4413      	add	r3, r2
 8006922:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006926:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800692c:	b29a      	uxth	r2, r3
 800692e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006930:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	895b      	ldrh	r3, [r3, #10]
 8006936:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	6959      	ldr	r1, [r3, #20]
 800693e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006942:	b29b      	uxth	r3, r3
 8006944:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fabe 	bl	8006eca <USB_WritePMA>
 800694e:	e09e      	b.n	8006a8e <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d16b      	bne.n	8006a30 <USB_EPStartXfer+0x900>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006962:	b29b      	uxth	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006968:	4413      	add	r3, r2
 800696a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	00da      	lsls	r2, r3, #3
 8006972:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006974:	4413      	add	r3, r2
 8006976:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800697a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800697c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006986:	b29a      	uxth	r2, r3
 8006988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800698a:	801a      	strh	r2, [r3, #0]
 800698c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <USB_EPStartXfer+0x87a>
 8006994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069a6:	801a      	strh	r2, [r3, #0]
 80069a8:	e063      	b.n	8006a72 <USB_EPStartXfer+0x942>
 80069aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80069b0:	d81c      	bhi.n	80069ec <USB_EPStartXfer+0x8bc>
 80069b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d004      	beq.n	80069d2 <USB_EPStartXfer+0x8a2>
 80069c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80069cc:	3301      	adds	r3, #1
 80069ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80069dc:	b29b      	uxth	r3, r3
 80069de:	029b      	lsls	r3, r3, #10
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	4313      	orrs	r3, r2
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	e042      	b.n	8006a72 <USB_EPStartXfer+0x942>
 80069ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d104      	bne.n	8006a0c <USB_EPStartXfer+0x8dc>
 8006a02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a06:	3b01      	subs	r3, #1
 8006a08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	029b      	lsls	r3, r3, #10
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a2c:	801a      	strh	r2, [r3, #0]
 8006a2e:	e020      	b.n	8006a72 <USB_EPStartXfer+0x942>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d11c      	bne.n	8006a72 <USB_EPStartXfer+0x942>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	00da      	lsls	r2, r3, #3
 8006a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	891b      	ldrh	r3, [r3, #8]
 8006a76:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6959      	ldr	r1, [r3, #20]
 8006a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fa1e 	bl	8006eca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aa4:	817b      	strh	r3, [r7, #10]
 8006aa6:	897b      	ldrh	r3, [r7, #10]
 8006aa8:	f083 0310 	eor.w	r3, r3, #16
 8006aac:	817b      	strh	r3, [r7, #10]
 8006aae:	897b      	ldrh	r3, [r7, #10]
 8006ab0:	f083 0320 	eor.w	r3, r3, #32
 8006ab4:	817b      	strh	r3, [r7, #10]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	441a      	add	r2, r3
 8006ac0:	897b      	ldrh	r3, [r7, #10]
 8006ac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	8013      	strh	r3, [r2, #0]
 8006ad6:	e0d5      	b.n	8006c84 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	7b1b      	ldrb	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d156      	bne.n	8006b8e <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d122      	bne.n	8006b2e <USB_EPStartXfer+0x9fe>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	78db      	ldrb	r3, [r3, #3]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11e      	bne.n	8006b2e <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b06:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006b18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b20:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	8013      	strh	r3, [r2, #0]
 8006b2c:	e01d      	b.n	8006b6a <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b44:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8006b56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d907      	bls.n	8006b86 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	699a      	ldr	r2, [r3, #24]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	1ad2      	subs	r2, r2, r3
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	619a      	str	r2, [r3, #24]
 8006b84:	e054      	b.n	8006c30 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	619a      	str	r2, [r3, #24]
 8006b8c:	e050      	b.n	8006c30 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	78db      	ldrb	r3, [r3, #3]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d142      	bne.n	8006c1c <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d048      	beq.n	8006c30 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bae:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <USB_EPStartXfer+0xa96>
 8006bba:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10b      	bne.n	8006bde <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bc6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d12e      	bne.n	8006c30 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bd2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d128      	bne.n	8006c30 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf4:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	441a      	add	r2, r3
 8006c02:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8006c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	8013      	strh	r3, [r2, #0]
 8006c1a:	e009      	b.n	8006c30 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	78db      	ldrb	r3, [r3, #3]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d103      	bne.n	8006c2c <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2200      	movs	r2, #0
 8006c28:	619a      	str	r2, [r3, #24]
 8006c2a:	e001      	b.n	8006c30 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e02a      	b.n	8006c86 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c46:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c4e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c52:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c56:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c5e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	37b0      	adds	r7, #176	@ 0xb0
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d020      	beq.n	8006ce2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cb6:	81bb      	strh	r3, [r7, #12]
 8006cb8:	89bb      	ldrh	r3, [r7, #12]
 8006cba:	f083 0310 	eor.w	r3, r3, #16
 8006cbe:	81bb      	strh	r3, [r7, #12]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	89bb      	ldrh	r3, [r7, #12]
 8006ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	8013      	strh	r3, [r2, #0]
 8006ce0:	e01f      	b.n	8006d22 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf8:	81fb      	strh	r3, [r7, #14]
 8006cfa:	89fb      	ldrh	r3, [r7, #14]
 8006cfc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d00:	81fb      	strh	r3, [r7, #14]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	441a      	add	r2, r3
 8006d0c:	89fb      	ldrh	r3, [r7, #14]
 8006d0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d04c      	beq.n	8006ddc <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	823b      	strh	r3, [r7, #16]
 8006d50:	8a3b      	ldrh	r3, [r7, #16]
 8006d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01b      	beq.n	8006d92 <USB_EPClearStall+0x62>
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d70:	81fb      	strh	r3, [r7, #14]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	441a      	add	r2, r3
 8006d7c:	89fb      	ldrh	r3, [r7, #14]
 8006d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	78db      	ldrb	r3, [r3, #3]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d06c      	beq.n	8006e74 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006db0:	81bb      	strh	r3, [r7, #12]
 8006db2:	89bb      	ldrh	r3, [r7, #12]
 8006db4:	f083 0320 	eor.w	r3, r3, #32
 8006db8:	81bb      	strh	r3, [r7, #12]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	441a      	add	r2, r3
 8006dc4:	89bb      	ldrh	r3, [r7, #12]
 8006dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	8013      	strh	r3, [r2, #0]
 8006dda:	e04b      	b.n	8006e74 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	82fb      	strh	r3, [r7, #22]
 8006dea:	8afb      	ldrh	r3, [r7, #22]
 8006dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d01b      	beq.n	8006e2c <USB_EPClearStall+0xfc>
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e0a:	82bb      	strh	r3, [r7, #20]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	441a      	add	r2, r3
 8006e16:	8abb      	ldrh	r3, [r7, #20]
 8006e18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e42:	827b      	strh	r3, [r7, #18]
 8006e44:	8a7b      	ldrh	r3, [r7, #18]
 8006e46:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e4a:	827b      	strh	r3, [r7, #18]
 8006e4c:	8a7b      	ldrh	r3, [r7, #18]
 8006e4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e52:	827b      	strh	r3, [r7, #18]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	441a      	add	r2, r3
 8006e5e:	8a7b      	ldrh	r3, [r7, #18]
 8006e60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d103      	bne.n	8006e9c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2280      	movs	r2, #128	@ 0x80
 8006e98:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b08b      	sub	sp, #44	@ 0x2c
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	460b      	mov	r3, r1
 8006eda:	80fb      	strh	r3, [r7, #6]
 8006edc:	4613      	mov	r3, r2
 8006ede:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ee0:	88bb      	ldrh	r3, [r7, #4]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ef0:	88fa      	ldrh	r2, [r7, #6]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006efa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f00:	e01b      	b.n	8006f3a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	b21a      	sxth	r2, r3
 8006f12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	b21b      	sxth	r3, r3
 8006f1a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	8a7a      	ldrh	r2, [r7, #18]
 8006f20:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	3302      	adds	r3, #2
 8006f26:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	3301      	adds	r3, #1
 8006f32:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	3b01      	subs	r3, #1
 8006f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e0      	bne.n	8006f02 <USB_WritePMA+0x38>
  }
}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	372c      	adds	r7, #44	@ 0x2c
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b08b      	sub	sp, #44	@ 0x2c
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	4611      	mov	r1, r2
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	80fb      	strh	r3, [r7, #6]
 8006f60:	4613      	mov	r3, r2
 8006f62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f64:	88bb      	ldrh	r3, [r7, #4]
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f74:	88fa      	ldrh	r2, [r7, #6]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f7e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f84:	e018      	b.n	8006fb8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	3302      	adds	r3, #2
 8006f92:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	0a1b      	lsrs	r3, r3, #8
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e3      	bne.n	8006f86 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006fbe:	88bb      	ldrh	r3, [r7, #4]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	701a      	strb	r2, [r3, #0]
  }
}
 8006fda:	bf00      	nop
 8006fdc:	372c      	adds	r7, #44	@ 0x2c
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b087      	sub	sp, #28
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ff8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007000:	2303      	movs	r3, #3
 8007002:	e008      	b.n	8007016 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007030:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007032:	2301      	movs	r3, #1
 8007034:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007040:	2303      	movs	r3, #3
 8007042:	e01a      	b.n	800707a <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800704a:	2b00      	cmp	r3, #0
 800704c:	d114      	bne.n	8007078 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2201      	movs	r2, #1
 8007052:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800706c:	2181      	movs	r1, #129	@ 0x81
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 fbdb 	bl	800882a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007082:	b480      	push	{r7}
 8007084:	b083      	sub	sp, #12
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80070a4:	2303      	movs	r3, #3
 80070a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	4611      	mov	r1, r2
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
 80070c2:	4603      	mov	r3, r0
 80070c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	78fa      	ldrb	r2, [r7, #3]
 80070f0:	4611      	mov	r1, r2
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
  }

  return USBD_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	4618      	mov	r0, r3
 8007114:	f000 ff46 	bl	8007fa4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007126:	461a      	mov	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	2b02      	cmp	r3, #2
 800713a:	d01a      	beq.n	8007172 <USBD_LL_SetupStage+0x72>
 800713c:	2b02      	cmp	r3, #2
 800713e:	d822      	bhi.n	8007186 <USBD_LL_SetupStage+0x86>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <USBD_LL_SetupStage+0x4a>
 8007144:	2b01      	cmp	r3, #1
 8007146:	d00a      	beq.n	800715e <USBD_LL_SetupStage+0x5e>
 8007148:	e01d      	b.n	8007186 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f9ee 	bl	8007534 <USBD_StdDevReq>
 8007158:	4603      	mov	r3, r0
 800715a:	73fb      	strb	r3, [r7, #15]
      break;
 800715c:	e020      	b.n	80071a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa52 	bl	8007610 <USBD_StdItfReq>
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]
      break;
 8007170:	e016      	b.n	80071a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fa91 	bl	80076a2 <USBD_StdEPReq>
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]
      break;
 8007184:	e00c      	b.n	80071a0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800718c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007190:	b2db      	uxtb	r3, r3
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fabf 	bl	8008718 <USBD_LL_StallEP>
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]
      break;
 800719e:	bf00      	nop
  }

  return ret;
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b086      	sub	sp, #24
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	460b      	mov	r3, r1
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80071b8:	7afb      	ldrb	r3, [r7, #11]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d138      	bne.n	8007230 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80071c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d14a      	bne.n	8007266 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d913      	bls.n	8007204 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	1ad2      	subs	r2, r2, r3
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	4293      	cmp	r3, r2
 80071f4:	bf28      	it	cs
 80071f6:	4613      	movcs	r3, r2
 80071f8:	461a      	mov	r2, r3
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 ff48 	bl	8008092 <USBD_CtlContinueRx>
 8007202:	e030      	b.n	8007266 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b03      	cmp	r3, #3
 800720e:	d10b      	bne.n	8007228 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 ff43 	bl	80080b4 <USBD_CtlSendStatus>
 800722e:	e01a      	b.n	8007266 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b03      	cmp	r3, #3
 800723a:	d114      	bne.n	8007266 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00e      	beq.n	8007266 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	7afa      	ldrb	r2, [r7, #11]
 8007252:	4611      	mov	r1, r2
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	4798      	blx	r3
 8007258:	4603      	mov	r3, r0
 800725a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	e000      	b.n	8007268 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	460b      	mov	r3, r1
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800727e:	7afb      	ldrb	r3, [r7, #11]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d16b      	bne.n	800735c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3314      	adds	r3, #20
 8007288:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007290:	2b02      	cmp	r3, #2
 8007292:	d156      	bne.n	8007342 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	429a      	cmp	r2, r3
 800729e:	d914      	bls.n	80072ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	1ad2      	subs	r2, r2, r3
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	461a      	mov	r2, r3
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 feda 	bl	8008070 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072bc:	2300      	movs	r3, #0
 80072be:	2200      	movs	r2, #0
 80072c0:	2100      	movs	r1, #0
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f001 fad2 	bl	800886c <USBD_LL_PrepareReceive>
 80072c8:	e03b      	b.n	8007342 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d11c      	bne.n	8007310 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072de:	429a      	cmp	r2, r3
 80072e0:	d316      	bcc.n	8007310 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d20f      	bcs.n	8007310 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072f0:	2200      	movs	r2, #0
 80072f2:	2100      	movs	r1, #0
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 febb 	bl	8008070 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007302:	2300      	movs	r3, #0
 8007304:	2200      	movs	r2, #0
 8007306:	2100      	movs	r1, #0
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f001 faaf 	bl	800886c <USBD_LL_PrepareReceive>
 800730e:	e018      	b.n	8007342 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b03      	cmp	r3, #3
 800731a:	d10b      	bne.n	8007334 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007334:	2180      	movs	r1, #128	@ 0x80
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f001 f9ee 	bl	8008718 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fecc 	bl	80080da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007348:	2b01      	cmp	r3, #1
 800734a:	d122      	bne.n	8007392 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7ff fe98 	bl	8007082 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800735a:	e01a      	b.n	8007392 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b03      	cmp	r3, #3
 8007366:	d114      	bne.n	8007392 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00e      	beq.n	8007392 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	7afa      	ldrb	r2, [r7, #11]
 800737e:	4611      	mov	r1, r2
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	4798      	blx	r3
 8007384:	4603      	mov	r3, r0
 8007386:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	e000      	b.n	8007394 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e02f      	b.n	8007430 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00f      	beq.n	80073fa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d009      	beq.n	80073fa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6852      	ldr	r2, [r2, #4]
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	4611      	mov	r1, r2
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073fa:	2340      	movs	r3, #64	@ 0x40
 80073fc:	2200      	movs	r2, #0
 80073fe:	2100      	movs	r1, #0
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 f963 	bl	80086cc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2240      	movs	r2, #64	@ 0x40
 8007412:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007416:	2340      	movs	r3, #64	@ 0x40
 8007418:	2200      	movs	r2, #0
 800741a:	2180      	movs	r1, #128	@ 0x80
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 f955 	bl	80086cc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2240      	movs	r2, #64	@ 0x40
 800742c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	78fa      	ldrb	r2, [r7, #3]
 8007448:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007466:	b2da      	uxtb	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2204      	movs	r2, #4
 8007472:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b04      	cmp	r3, #4
 8007496:	d106      	bne.n	80074a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e012      	b.n	80074f0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d10b      	bne.n	80074ee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	3301      	adds	r3, #1
 800750e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007516:	8a3b      	ldrh	r3, [r7, #16]
 8007518:	021b      	lsls	r3, r3, #8
 800751a:	b21a      	sxth	r2, r3
 800751c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007520:	4313      	orrs	r3, r2
 8007522:	b21b      	sxth	r3, r3
 8007524:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007526:	89fb      	ldrh	r3, [r7, #14]
}
 8007528:	4618      	mov	r0, r3
 800752a:	371c      	adds	r7, #28
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800754a:	2b40      	cmp	r3, #64	@ 0x40
 800754c:	d005      	beq.n	800755a <USBD_StdDevReq+0x26>
 800754e:	2b40      	cmp	r3, #64	@ 0x40
 8007550:	d853      	bhi.n	80075fa <USBD_StdDevReq+0xc6>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <USBD_StdDevReq+0x3a>
 8007556:	2b20      	cmp	r3, #32
 8007558:	d14f      	bne.n	80075fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
 8007568:	4603      	mov	r3, r0
 800756a:	73fb      	strb	r3, [r7, #15]
      break;
 800756c:	e04a      	b.n	8007604 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	785b      	ldrb	r3, [r3, #1]
 8007572:	2b09      	cmp	r3, #9
 8007574:	d83b      	bhi.n	80075ee <USBD_StdDevReq+0xba>
 8007576:	a201      	add	r2, pc, #4	@ (adr r2, 800757c <USBD_StdDevReq+0x48>)
 8007578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757c:	080075d1 	.word	0x080075d1
 8007580:	080075e5 	.word	0x080075e5
 8007584:	080075ef 	.word	0x080075ef
 8007588:	080075db 	.word	0x080075db
 800758c:	080075ef 	.word	0x080075ef
 8007590:	080075af 	.word	0x080075af
 8007594:	080075a5 	.word	0x080075a5
 8007598:	080075ef 	.word	0x080075ef
 800759c:	080075c7 	.word	0x080075c7
 80075a0:	080075b9 	.word	0x080075b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f9de 	bl	8007968 <USBD_GetDescriptor>
          break;
 80075ac:	e024      	b.n	80075f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fb6d 	bl	8007c90 <USBD_SetAddress>
          break;
 80075b6:	e01f      	b.n	80075f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fbac 	bl	8007d18 <USBD_SetConfig>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]
          break;
 80075c4:	e018      	b.n	80075f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fc4b 	bl	8007e64 <USBD_GetConfig>
          break;
 80075ce:	e013      	b.n	80075f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fc7c 	bl	8007ed0 <USBD_GetStatus>
          break;
 80075d8:	e00e      	b.n	80075f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fcab 	bl	8007f38 <USBD_SetFeature>
          break;
 80075e2:	e009      	b.n	80075f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fcba 	bl	8007f60 <USBD_ClrFeature>
          break;
 80075ec:	e004      	b.n	80075f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fd11 	bl	8008018 <USBD_CtlError>
          break;
 80075f6:	bf00      	nop
      }
      break;
 80075f8:	e004      	b.n	8007604 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fd0b 	bl	8008018 <USBD_CtlError>
      break;
 8007602:	bf00      	nop
  }

  return ret;
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop

08007610 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007626:	2b40      	cmp	r3, #64	@ 0x40
 8007628:	d005      	beq.n	8007636 <USBD_StdItfReq+0x26>
 800762a:	2b40      	cmp	r3, #64	@ 0x40
 800762c:	d82f      	bhi.n	800768e <USBD_StdItfReq+0x7e>
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <USBD_StdItfReq+0x26>
 8007632:	2b20      	cmp	r3, #32
 8007634:	d12b      	bne.n	800768e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800763c:	b2db      	uxtb	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	2b02      	cmp	r3, #2
 8007642:	d81d      	bhi.n	8007680 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	889b      	ldrh	r3, [r3, #4]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b01      	cmp	r3, #1
 800764c:	d813      	bhi.n	8007676 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	88db      	ldrh	r3, [r3, #6]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d110      	bne.n	800768a <USBD_StdItfReq+0x7a>
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10d      	bne.n	800768a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fd20 	bl	80080b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007674:	e009      	b.n	800768a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fccd 	bl	8008018 <USBD_CtlError>
          break;
 800767e:	e004      	b.n	800768a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fcc8 	bl	8008018 <USBD_CtlError>
          break;
 8007688:	e000      	b.n	800768c <USBD_StdItfReq+0x7c>
          break;
 800768a:	bf00      	nop
      }
      break;
 800768c:	e004      	b.n	8007698 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fcc1 	bl	8008018 <USBD_CtlError>
      break;
 8007696:	bf00      	nop
  }

  return ret;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	889b      	ldrh	r3, [r3, #4]
 80076b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076be:	2b40      	cmp	r3, #64	@ 0x40
 80076c0:	d007      	beq.n	80076d2 <USBD_StdEPReq+0x30>
 80076c2:	2b40      	cmp	r3, #64	@ 0x40
 80076c4:	f200 8145 	bhi.w	8007952 <USBD_StdEPReq+0x2b0>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00c      	beq.n	80076e6 <USBD_StdEPReq+0x44>
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	f040 8140 	bne.w	8007952 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
 80076e0:	4603      	mov	r3, r0
 80076e2:	73fb      	strb	r3, [r7, #15]
      break;
 80076e4:	e13a      	b.n	800795c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	785b      	ldrb	r3, [r3, #1]
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d007      	beq.n	80076fe <USBD_StdEPReq+0x5c>
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	f300 8129 	bgt.w	8007946 <USBD_StdEPReq+0x2a4>
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d07f      	beq.n	80077f8 <USBD_StdEPReq+0x156>
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d03c      	beq.n	8007776 <USBD_StdEPReq+0xd4>
 80076fc:	e123      	b.n	8007946 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b02      	cmp	r3, #2
 8007708:	d002      	beq.n	8007710 <USBD_StdEPReq+0x6e>
 800770a:	2b03      	cmp	r3, #3
 800770c:	d016      	beq.n	800773c <USBD_StdEPReq+0x9a>
 800770e:	e02c      	b.n	800776a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00d      	beq.n	8007732 <USBD_StdEPReq+0x90>
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	2b80      	cmp	r3, #128	@ 0x80
 800771a:	d00a      	beq.n	8007732 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fff9 	bl	8008718 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007726:	2180      	movs	r1, #128	@ 0x80
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fff5 	bl	8008718 <USBD_LL_StallEP>
 800772e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007730:	e020      	b.n	8007774 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fc6f 	bl	8008018 <USBD_CtlError>
              break;
 800773a:	e01b      	b.n	8007774 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	885b      	ldrh	r3, [r3, #2]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10e      	bne.n	8007762 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00b      	beq.n	8007762 <USBD_StdEPReq+0xc0>
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	2b80      	cmp	r3, #128	@ 0x80
 800774e:	d008      	beq.n	8007762 <USBD_StdEPReq+0xc0>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	88db      	ldrh	r3, [r3, #6]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 ffdb 	bl	8008718 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fca6 	bl	80080b4 <USBD_CtlSendStatus>

              break;
 8007768:	e004      	b.n	8007774 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fc53 	bl	8008018 <USBD_CtlError>
              break;
 8007772:	bf00      	nop
          }
          break;
 8007774:	e0ec      	b.n	8007950 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d002      	beq.n	8007788 <USBD_StdEPReq+0xe6>
 8007782:	2b03      	cmp	r3, #3
 8007784:	d016      	beq.n	80077b4 <USBD_StdEPReq+0x112>
 8007786:	e030      	b.n	80077ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00d      	beq.n	80077aa <USBD_StdEPReq+0x108>
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	2b80      	cmp	r3, #128	@ 0x80
 8007792:	d00a      	beq.n	80077aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 ffbd 	bl	8008718 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800779e:	2180      	movs	r1, #128	@ 0x80
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 ffb9 	bl	8008718 <USBD_LL_StallEP>
 80077a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077a8:	e025      	b.n	80077f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fc33 	bl	8008018 <USBD_CtlError>
              break;
 80077b2:	e020      	b.n	80077f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	885b      	ldrh	r3, [r3, #2]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d11b      	bne.n	80077f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 ffc3 	bl	8008756 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fc6f 	bl	80080b4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
 80077e4:	4603      	mov	r3, r0
 80077e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80077e8:	e004      	b.n	80077f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fc13 	bl	8008018 <USBD_CtlError>
              break;
 80077f2:	e000      	b.n	80077f6 <USBD_StdEPReq+0x154>
              break;
 80077f4:	bf00      	nop
          }
          break;
 80077f6:	e0ab      	b.n	8007950 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b02      	cmp	r3, #2
 8007802:	d002      	beq.n	800780a <USBD_StdEPReq+0x168>
 8007804:	2b03      	cmp	r3, #3
 8007806:	d032      	beq.n	800786e <USBD_StdEPReq+0x1cc>
 8007808:	e097      	b.n	800793a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d007      	beq.n	8007820 <USBD_StdEPReq+0x17e>
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	2b80      	cmp	r3, #128	@ 0x80
 8007814:	d004      	beq.n	8007820 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fbfd 	bl	8008018 <USBD_CtlError>
                break;
 800781e:	e091      	b.n	8007944 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007824:	2b00      	cmp	r3, #0
 8007826:	da0b      	bge.n	8007840 <USBD_StdEPReq+0x19e>
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800782e:	4613      	mov	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	3310      	adds	r3, #16
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	4413      	add	r3, r2
 800783c:	3304      	adds	r3, #4
 800783e:	e00b      	b.n	8007858 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007846:	4613      	mov	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	4413      	add	r3, r2
 8007856:	3304      	adds	r3, #4
 8007858:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2202      	movs	r2, #2
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fbe7 	bl	800803a <USBD_CtlSendData>
              break;
 800786c:	e06a      	b.n	8007944 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800786e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007872:	2b00      	cmp	r3, #0
 8007874:	da11      	bge.n	800789a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	f003 020f 	and.w	r2, r3, #15
 800787c:	6879      	ldr	r1, [r7, #4]
 800787e:	4613      	mov	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	3324      	adds	r3, #36	@ 0x24
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d117      	bne.n	80078c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fbc0 	bl	8008018 <USBD_CtlError>
                  break;
 8007898:	e054      	b.n	8007944 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	f003 020f 	and.w	r2, r3, #15
 80078a0:	6879      	ldr	r1, [r7, #4]
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	440b      	add	r3, r1
 80078ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fbad 	bl	8008018 <USBD_CtlError>
                  break;
 80078be:	e041      	b.n	8007944 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	da0b      	bge.n	80078e0 <USBD_StdEPReq+0x23e>
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	3310      	adds	r3, #16
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	4413      	add	r3, r2
 80078dc:	3304      	adds	r3, #4
 80078de:	e00b      	b.n	80078f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	3304      	adds	r3, #4
 80078f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <USBD_StdEPReq+0x264>
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	2b80      	cmp	r3, #128	@ 0x80
 8007904:	d103      	bne.n	800790e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	e00e      	b.n	800792c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 ff3e 	bl	8008794 <USBD_LL_IsStallEP>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2201      	movs	r2, #1
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	e002      	b.n	800792c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2202      	movs	r2, #2
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fb81 	bl	800803a <USBD_CtlSendData>
              break;
 8007938:	e004      	b.n	8007944 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fb6b 	bl	8008018 <USBD_CtlError>
              break;
 8007942:	bf00      	nop
          }
          break;
 8007944:	e004      	b.n	8007950 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fb65 	bl	8008018 <USBD_CtlError>
          break;
 800794e:	bf00      	nop
      }
      break;
 8007950:	e004      	b.n	800795c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fb5f 	bl	8008018 <USBD_CtlError>
      break;
 800795a:	bf00      	nop
  }

  return ret;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	885b      	ldrh	r3, [r3, #2]
 8007982:	0a1b      	lsrs	r3, r3, #8
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	2b0e      	cmp	r3, #14
 800798a:	f200 8152 	bhi.w	8007c32 <USBD_GetDescriptor+0x2ca>
 800798e:	a201      	add	r2, pc, #4	@ (adr r2, 8007994 <USBD_GetDescriptor+0x2c>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	08007a05 	.word	0x08007a05
 8007998:	08007a1d 	.word	0x08007a1d
 800799c:	08007a5d 	.word	0x08007a5d
 80079a0:	08007c33 	.word	0x08007c33
 80079a4:	08007c33 	.word	0x08007c33
 80079a8:	08007bd3 	.word	0x08007bd3
 80079ac:	08007bff 	.word	0x08007bff
 80079b0:	08007c33 	.word	0x08007c33
 80079b4:	08007c33 	.word	0x08007c33
 80079b8:	08007c33 	.word	0x08007c33
 80079bc:	08007c33 	.word	0x08007c33
 80079c0:	08007c33 	.word	0x08007c33
 80079c4:	08007c33 	.word	0x08007c33
 80079c8:	08007c33 	.word	0x08007c33
 80079cc:	080079d1 	.word	0x080079d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	7c12      	ldrb	r2, [r2, #16]
 80079e8:	f107 0108 	add.w	r1, r7, #8
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
 80079f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079f2:	e126      	b.n	8007c42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fb0e 	bl	8008018 <USBD_CtlError>
        err++;
 80079fc:	7afb      	ldrb	r3, [r7, #11]
 80079fe:	3301      	adds	r3, #1
 8007a00:	72fb      	strb	r3, [r7, #11]
      break;
 8007a02:	e11e      	b.n	8007c42 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	7c12      	ldrb	r2, [r2, #16]
 8007a10:	f107 0108 	add.w	r1, r7, #8
 8007a14:	4610      	mov	r0, r2
 8007a16:	4798      	blx	r3
 8007a18:	60f8      	str	r0, [r7, #12]
      break;
 8007a1a:	e112      	b.n	8007c42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	7c1b      	ldrb	r3, [r3, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10d      	bne.n	8007a40 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2c:	f107 0208 	add.w	r2, r7, #8
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a3e:	e100      	b.n	8007c42 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a48:	f107 0208 	add.w	r2, r7, #8
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
 8007a50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	2202      	movs	r2, #2
 8007a58:	701a      	strb	r2, [r3, #0]
      break;
 8007a5a:	e0f2      	b.n	8007c42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	885b      	ldrh	r3, [r3, #2]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b05      	cmp	r3, #5
 8007a64:	f200 80ac 	bhi.w	8007bc0 <USBD_GetDescriptor+0x258>
 8007a68:	a201      	add	r2, pc, #4	@ (adr r2, 8007a70 <USBD_GetDescriptor+0x108>)
 8007a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6e:	bf00      	nop
 8007a70:	08007a89 	.word	0x08007a89
 8007a74:	08007abd 	.word	0x08007abd
 8007a78:	08007af1 	.word	0x08007af1
 8007a7c:	08007b25 	.word	0x08007b25
 8007a80:	08007b59 	.word	0x08007b59
 8007a84:	08007b8d 	.word	0x08007b8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	7c12      	ldrb	r2, [r2, #16]
 8007aa0:	f107 0108 	add.w	r1, r7, #8
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
 8007aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aaa:	e091      	b.n	8007bd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fab2 	bl	8008018 <USBD_CtlError>
            err++;
 8007ab4:	7afb      	ldrb	r3, [r7, #11]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aba:	e089      	b.n	8007bd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	7c12      	ldrb	r2, [r2, #16]
 8007ad4:	f107 0108 	add.w	r1, r7, #8
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4798      	blx	r3
 8007adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ade:	e077      	b.n	8007bd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa98 	bl	8008018 <USBD_CtlError>
            err++;
 8007ae8:	7afb      	ldrb	r3, [r7, #11]
 8007aea:	3301      	adds	r3, #1
 8007aec:	72fb      	strb	r3, [r7, #11]
          break;
 8007aee:	e06f      	b.n	8007bd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	7c12      	ldrb	r2, [r2, #16]
 8007b08:	f107 0108 	add.w	r1, r7, #8
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4798      	blx	r3
 8007b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b12:	e05d      	b.n	8007bd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fa7e 	bl	8008018 <USBD_CtlError>
            err++;
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	72fb      	strb	r3, [r7, #11]
          break;
 8007b22:	e055      	b.n	8007bd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7c12      	ldrb	r2, [r2, #16]
 8007b3c:	f107 0108 	add.w	r1, r7, #8
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b46:	e043      	b.n	8007bd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa64 	bl	8008018 <USBD_CtlError>
            err++;
 8007b50:	7afb      	ldrb	r3, [r7, #11]
 8007b52:	3301      	adds	r3, #1
 8007b54:	72fb      	strb	r3, [r7, #11]
          break;
 8007b56:	e03b      	b.n	8007bd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	7c12      	ldrb	r2, [r2, #16]
 8007b70:	f107 0108 	add.w	r1, r7, #8
 8007b74:	4610      	mov	r0, r2
 8007b76:	4798      	blx	r3
 8007b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b7a:	e029      	b.n	8007bd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa4a 	bl	8008018 <USBD_CtlError>
            err++;
 8007b84:	7afb      	ldrb	r3, [r7, #11]
 8007b86:	3301      	adds	r3, #1
 8007b88:	72fb      	strb	r3, [r7, #11]
          break;
 8007b8a:	e021      	b.n	8007bd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	7c12      	ldrb	r2, [r2, #16]
 8007ba4:	f107 0108 	add.w	r1, r7, #8
 8007ba8:	4610      	mov	r0, r2
 8007baa:	4798      	blx	r3
 8007bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bae:	e00f      	b.n	8007bd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa30 	bl	8008018 <USBD_CtlError>
            err++;
 8007bb8:	7afb      	ldrb	r3, [r7, #11]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bbe:	e007      	b.n	8007bd0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa28 	bl	8008018 <USBD_CtlError>
          err++;
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007bce:	bf00      	nop
      }
      break;
 8007bd0:	e037      	b.n	8007c42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7c1b      	ldrb	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be2:	f107 0208 	add.w	r2, r7, #8
 8007be6:	4610      	mov	r0, r2
 8007be8:	4798      	blx	r3
 8007bea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bec:	e029      	b.n	8007c42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fa11 	bl	8008018 <USBD_CtlError>
        err++;
 8007bf6:	7afb      	ldrb	r3, [r7, #11]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	72fb      	strb	r3, [r7, #11]
      break;
 8007bfc:	e021      	b.n	8007c42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	7c1b      	ldrb	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10d      	bne.n	8007c22 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0e:	f107 0208 	add.w	r2, r7, #8
 8007c12:	4610      	mov	r0, r2
 8007c14:	4798      	blx	r3
 8007c16:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	2207      	movs	r2, #7
 8007c1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c20:	e00f      	b.n	8007c42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f9f7 	bl	8008018 <USBD_CtlError>
        err++;
 8007c2a:	7afb      	ldrb	r3, [r7, #11]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c30:	e007      	b.n	8007c42 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f9ef 	bl	8008018 <USBD_CtlError>
      err++;
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c40:	bf00      	nop
  }

  if (err != 0U)
 8007c42:	7afb      	ldrb	r3, [r7, #11]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11e      	bne.n	8007c86 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	88db      	ldrh	r3, [r3, #6]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d016      	beq.n	8007c7e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007c50:	893b      	ldrh	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00e      	beq.n	8007c74 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	88da      	ldrh	r2, [r3, #6]
 8007c5a:	893b      	ldrh	r3, [r7, #8]
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	bf28      	it	cs
 8007c60:	4613      	movcs	r3, r2
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c66:	893b      	ldrh	r3, [r7, #8]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f9e4 	bl	800803a <USBD_CtlSendData>
 8007c72:	e009      	b.n	8007c88 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9ce 	bl	8008018 <USBD_CtlError>
 8007c7c:	e004      	b.n	8007c88 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa18 	bl	80080b4 <USBD_CtlSendStatus>
 8007c84:	e000      	b.n	8007c88 <USBD_GetDescriptor+0x320>
    return;
 8007c86:	bf00      	nop
  }
}
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop

08007c90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	889b      	ldrh	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d131      	bne.n	8007d06 <USBD_SetAddress+0x76>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	88db      	ldrh	r3, [r3, #6]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d12d      	bne.n	8007d06 <USBD_SetAddress+0x76>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	885b      	ldrh	r3, [r3, #2]
 8007cae:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cb0:	d829      	bhi.n	8007d06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d104      	bne.n	8007cd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f9a3 	bl	8008018 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd2:	e01d      	b.n	8007d10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7bfa      	ldrb	r2, [r7, #15]
 8007cd8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fd83 	bl	80087ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f9e4 	bl	80080b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfa:	e009      	b.n	8007d10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d04:	e004      	b.n	8007d10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f985 	bl	8008018 <USBD_CtlError>
  }
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007d2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d30:	4b4b      	ldr	r3, [pc, #300]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d905      	bls.n	8007d44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f96c 	bl	8008018 <USBD_CtlError>
    return USBD_FAIL;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e088      	b.n	8007e56 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d002      	beq.n	8007d56 <USBD_SetConfig+0x3e>
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d025      	beq.n	8007da0 <USBD_SetConfig+0x88>
 8007d54:	e071      	b.n	8007e3a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d56:	4b42      	ldr	r3, [pc, #264]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01c      	beq.n	8007d98 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007d5e:	4b40      	ldr	r3, [pc, #256]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d68:	4b3d      	ldr	r3, [pc, #244]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff f992 	bl	8007098 <USBD_SetClassConfig>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f949 	bl	8008018 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d86:	e065      	b.n	8007e54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f993 	bl	80080b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2203      	movs	r2, #3
 8007d92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d96:	e05d      	b.n	8007e54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f98b 	bl	80080b4 <USBD_CtlSendStatus>
      break;
 8007d9e:	e059      	b.n	8007e54 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007da0:	4b2f      	ldr	r3, [pc, #188]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d112      	bne.n	8007dce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007db0:	4b2b      	ldr	r3, [pc, #172]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dba:	4b29      	ldr	r3, [pc, #164]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff f985 	bl	80070d0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f974 	bl	80080b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dcc:	e042      	b.n	8007e54 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007dce:	4b24      	ldr	r3, [pc, #144]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d02a      	beq.n	8007e32 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff f973 	bl	80070d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007dea:	4b1d      	ldr	r3, [pc, #116]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007df4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff f94c 	bl	8007098 <USBD_SetClassConfig>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00f      	beq.n	8007e2a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f903 	bl	8008018 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7ff f958 	bl	80070d0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007e28:	e014      	b.n	8007e54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f942 	bl	80080b4 <USBD_CtlSendStatus>
      break;
 8007e30:	e010      	b.n	8007e54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f93e 	bl	80080b4 <USBD_CtlSendStatus>
      break;
 8007e38:	e00c      	b.n	8007e54 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f8eb 	bl	8008018 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e42:	4b07      	ldr	r3, [pc, #28]	@ (8007e60 <USBD_SetConfig+0x148>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff f941 	bl	80070d0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	73fb      	strb	r3, [r7, #15]
      break;
 8007e52:	bf00      	nop
  }

  return ret;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000178 	.word	0x20000178

08007e64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	88db      	ldrh	r3, [r3, #6]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d004      	beq.n	8007e80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f8cd 	bl	8008018 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e7e:	e023      	b.n	8007ec8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	dc02      	bgt.n	8007e92 <USBD_GetConfig+0x2e>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	dc03      	bgt.n	8007e98 <USBD_GetConfig+0x34>
 8007e90:	e015      	b.n	8007ebe <USBD_GetConfig+0x5a>
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d00b      	beq.n	8007eae <USBD_GetConfig+0x4a>
 8007e96:	e012      	b.n	8007ebe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f8c7 	bl	800803a <USBD_CtlSendData>
        break;
 8007eac:	e00c      	b.n	8007ec8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f8bf 	bl	800803a <USBD_CtlSendData>
        break;
 8007ebc:	e004      	b.n	8007ec8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f8a9 	bl	8008018 <USBD_CtlError>
        break;
 8007ec6:	bf00      	nop
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d81e      	bhi.n	8007f26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	88db      	ldrh	r3, [r3, #6]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d004      	beq.n	8007efa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f890 	bl	8008018 <USBD_CtlError>
        break;
 8007ef8:	e01a      	b.n	8007f30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f043 0202 	orr.w	r2, r3, #2
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	330c      	adds	r3, #12
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f88b 	bl	800803a <USBD_CtlSendData>
      break;
 8007f24:	e004      	b.n	8007f30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f875 	bl	8008018 <USBD_CtlError>
      break;
 8007f2e:	bf00      	nop
  }
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	885b      	ldrh	r3, [r3, #2]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d106      	bne.n	8007f58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f8ae 	bl	80080b4 <USBD_CtlSendStatus>
  }
}
 8007f58:	bf00      	nop
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d80b      	bhi.n	8007f90 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	885b      	ldrh	r3, [r3, #2]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d10c      	bne.n	8007f9a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f893 	bl	80080b4 <USBD_CtlSendStatus>
      }
      break;
 8007f8e:	e004      	b.n	8007f9a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f840 	bl	8008018 <USBD_CtlError>
      break;
 8007f98:	e000      	b.n	8007f9c <USBD_ClrFeature+0x3c>
      break;
 8007f9a:	bf00      	nop
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	781a      	ldrb	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	781a      	ldrb	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7ff fa92 	bl	80074f8 <SWAPBYTE>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f7ff fa85 	bl	80074f8 <SWAPBYTE>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3301      	adds	r3, #1
 8008000:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff fa78 	bl	80074f8 <SWAPBYTE>
 8008008:	4603      	mov	r3, r0
 800800a:	461a      	mov	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	80da      	strh	r2, [r3, #6]
}
 8008010:	bf00      	nop
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008022:	2180      	movs	r1, #128	@ 0x80
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fb77 	bl	8008718 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800802a:	2100      	movs	r1, #0
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fb73 	bl	8008718 <USBD_LL_StallEP>
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2202      	movs	r2, #2
 800804a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	2100      	movs	r1, #0
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 fbe2 	bl	800882a <USBD_LL_Transmit>

  return USBD_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	2100      	movs	r1, #0
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fbd1 	bl	800882a <USBD_LL_Transmit>

  return USBD_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	2100      	movs	r1, #0
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fbe1 	bl	800886c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2204      	movs	r2, #4
 80080c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080c4:	2300      	movs	r3, #0
 80080c6:	2200      	movs	r2, #0
 80080c8:	2100      	movs	r1, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fbad 	bl	800882a <USBD_LL_Transmit>

  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2205      	movs	r2, #5
 80080e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080ea:	2300      	movs	r3, #0
 80080ec:	2200      	movs	r2, #0
 80080ee:	2100      	movs	r1, #0
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fbbb 	bl	800886c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	689a      	ldr	r2, [r3, #8]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	601a      	str	r2, [r3, #0]
}
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6892      	ldr	r2, [r2, #8]
 800815e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6852      	ldr	r2, [r2, #4]
 8008168:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	429a      	cmp	r2, r3
 8008172:	d103      	bne.n	800817c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	1e5a      	subs	r2, r3, #1
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081a2:	2300      	movs	r3, #0
 80081a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081a6:	4b4f      	ldr	r3, [pc, #316]	@ (80082e4 <xTaskIncrementTick+0x148>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f040 8090 	bne.w	80082d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081b0:	4b4d      	ldr	r3, [pc, #308]	@ (80082e8 <xTaskIncrementTick+0x14c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081b8:	4a4b      	ldr	r2, [pc, #300]	@ (80082e8 <xTaskIncrementTick+0x14c>)
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d121      	bne.n	8008208 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80081c4:	4b49      	ldr	r3, [pc, #292]	@ (80082ec <xTaskIncrementTick+0x150>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00b      	beq.n	80081e6 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081e0:	bf00      	nop
 80081e2:	bf00      	nop
 80081e4:	e7fd      	b.n	80081e2 <xTaskIncrementTick+0x46>
 80081e6:	4b41      	ldr	r3, [pc, #260]	@ (80082ec <xTaskIncrementTick+0x150>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	4b40      	ldr	r3, [pc, #256]	@ (80082f0 <xTaskIncrementTick+0x154>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a3e      	ldr	r2, [pc, #248]	@ (80082ec <xTaskIncrementTick+0x150>)
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	4a3e      	ldr	r2, [pc, #248]	@ (80082f0 <xTaskIncrementTick+0x154>)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6013      	str	r3, [r2, #0]
 80081fa:	4b3e      	ldr	r3, [pc, #248]	@ (80082f4 <xTaskIncrementTick+0x158>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3301      	adds	r3, #1
 8008200:	4a3c      	ldr	r2, [pc, #240]	@ (80082f4 <xTaskIncrementTick+0x158>)
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	f000 f8e2 	bl	80083cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008208:	4b3b      	ldr	r3, [pc, #236]	@ (80082f8 <xTaskIncrementTick+0x15c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	429a      	cmp	r2, r3
 8008210:	d349      	bcc.n	80082a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008212:	4b36      	ldr	r3, [pc, #216]	@ (80082ec <xTaskIncrementTick+0x150>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d104      	bne.n	8008226 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800821c:	4b36      	ldr	r3, [pc, #216]	@ (80082f8 <xTaskIncrementTick+0x15c>)
 800821e:	f04f 32ff 	mov.w	r2, #4294967295
 8008222:	601a      	str	r2, [r3, #0]
					break;
 8008224:	e03f      	b.n	80082a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008226:	4b31      	ldr	r3, [pc, #196]	@ (80082ec <xTaskIncrementTick+0x150>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	429a      	cmp	r2, r3
 800823c:	d203      	bcs.n	8008246 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800823e:	4a2e      	ldr	r2, [pc, #184]	@ (80082f8 <xTaskIncrementTick+0x15c>)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008244:	e02f      	b.n	80082a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	3304      	adds	r3, #4
 800824a:	4618      	mov	r0, r3
 800824c:	f7ff ff7c 	bl	8008148 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	3318      	adds	r3, #24
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff ff73 	bl	8008148 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008266:	4b25      	ldr	r3, [pc, #148]	@ (80082fc <xTaskIncrementTick+0x160>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d903      	bls.n	8008276 <xTaskIncrementTick+0xda>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008272:	4a22      	ldr	r2, [pc, #136]	@ (80082fc <xTaskIncrementTick+0x160>)
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4a1f      	ldr	r2, [pc, #124]	@ (8008300 <xTaskIncrementTick+0x164>)
 8008284:	441a      	add	r2, r3
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	3304      	adds	r3, #4
 800828a:	4619      	mov	r1, r3
 800828c:	4610      	mov	r0, r2
 800828e:	f7ff ff37 	bl	8008100 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008296:	4b1b      	ldr	r3, [pc, #108]	@ (8008304 <xTaskIncrementTick+0x168>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829c:	429a      	cmp	r2, r3
 800829e:	d3b8      	bcc.n	8008212 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80082a0:	2301      	movs	r3, #1
 80082a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a4:	e7b5      	b.n	8008212 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082a6:	4b17      	ldr	r3, [pc, #92]	@ (8008304 <xTaskIncrementTick+0x168>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ac:	4914      	ldr	r1, [pc, #80]	@ (8008300 <xTaskIncrementTick+0x164>)
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	440b      	add	r3, r1
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d901      	bls.n	80082c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80082be:	2301      	movs	r3, #1
 80082c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082c2:	4b11      	ldr	r3, [pc, #68]	@ (8008308 <xTaskIncrementTick+0x16c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d007      	beq.n	80082da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80082ca:	2301      	movs	r3, #1
 80082cc:	617b      	str	r3, [r7, #20]
 80082ce:	e004      	b.n	80082da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80082d0:	4b0e      	ldr	r3, [pc, #56]	@ (800830c <xTaskIncrementTick+0x170>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3301      	adds	r3, #1
 80082d6:	4a0d      	ldr	r2, [pc, #52]	@ (800830c <xTaskIncrementTick+0x170>)
 80082d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80082da:	697b      	ldr	r3, [r7, #20]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	20000604 	.word	0x20000604
 80082e8:	200005e8 	.word	0x200005e8
 80082ec:	200005e0 	.word	0x200005e0
 80082f0:	200005e4 	.word	0x200005e4
 80082f4:	200005fc 	.word	0x200005fc
 80082f8:	20000600 	.word	0x20000600
 80082fc:	200005ec 	.word	0x200005ec
 8008300:	20000180 	.word	0x20000180
 8008304:	2000017c 	.word	0x2000017c
 8008308:	200005f8 	.word	0x200005f8
 800830c:	200005f4 	.word	0x200005f4

08008310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008316:	4b28      	ldr	r3, [pc, #160]	@ (80083b8 <vTaskSwitchContext+0xa8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800831e:	4b27      	ldr	r3, [pc, #156]	@ (80083bc <vTaskSwitchContext+0xac>)
 8008320:	2201      	movs	r2, #1
 8008322:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008324:	e042      	b.n	80083ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008326:	4b25      	ldr	r3, [pc, #148]	@ (80083bc <vTaskSwitchContext+0xac>)
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800832c:	4b24      	ldr	r3, [pc, #144]	@ (80083c0 <vTaskSwitchContext+0xb0>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	e011      	b.n	8008358 <vTaskSwitchContext+0x48>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10b      	bne.n	8008352 <vTaskSwitchContext+0x42>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	607b      	str	r3, [r7, #4]
}
 800834c:	bf00      	nop
 800834e:	bf00      	nop
 8008350:	e7fd      	b.n	800834e <vTaskSwitchContext+0x3e>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3b01      	subs	r3, #1
 8008356:	60fb      	str	r3, [r7, #12]
 8008358:	491a      	ldr	r1, [pc, #104]	@ (80083c4 <vTaskSwitchContext+0xb4>)
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4613      	mov	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d0e3      	beq.n	8008334 <vTaskSwitchContext+0x24>
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4a13      	ldr	r2, [pc, #76]	@ (80083c4 <vTaskSwitchContext+0xb4>)
 8008378:	4413      	add	r3, r2
 800837a:	60bb      	str	r3, [r7, #8]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	605a      	str	r2, [r3, #4]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	3308      	adds	r3, #8
 800838e:	429a      	cmp	r2, r3
 8008390:	d104      	bne.n	800839c <vTaskSwitchContext+0x8c>
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	605a      	str	r2, [r3, #4]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	4a09      	ldr	r2, [pc, #36]	@ (80083c8 <vTaskSwitchContext+0xb8>)
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	4a06      	ldr	r2, [pc, #24]	@ (80083c0 <vTaskSwitchContext+0xb0>)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6013      	str	r3, [r2, #0]
}
 80083ac:	bf00      	nop
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	20000604 	.word	0x20000604
 80083bc:	200005f8 	.word	0x200005f8
 80083c0:	200005ec 	.word	0x200005ec
 80083c4:	20000180 	.word	0x20000180
 80083c8:	2000017c 	.word	0x2000017c

080083cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008404 <prvResetNextTaskUnblockTime+0x38>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d104      	bne.n	80083e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008408 <prvResetNextTaskUnblockTime+0x3c>)
 80083de:	f04f 32ff 	mov.w	r2, #4294967295
 80083e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083e4:	e008      	b.n	80083f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e6:	4b07      	ldr	r3, [pc, #28]	@ (8008404 <prvResetNextTaskUnblockTime+0x38>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	4a04      	ldr	r2, [pc, #16]	@ (8008408 <prvResetNextTaskUnblockTime+0x3c>)
 80083f6:	6013      	str	r3, [r2, #0]
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	200005e0 	.word	0x200005e0
 8008408:	20000600 	.word	0x20000600

0800840c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008412:	4b0b      	ldr	r3, [pc, #44]	@ (8008440 <xTaskGetSchedulerState+0x34>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800841a:	2301      	movs	r3, #1
 800841c:	607b      	str	r3, [r7, #4]
 800841e:	e008      	b.n	8008432 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008420:	4b08      	ldr	r3, [pc, #32]	@ (8008444 <xTaskGetSchedulerState+0x38>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d102      	bne.n	800842e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008428:	2302      	movs	r3, #2
 800842a:	607b      	str	r3, [r7, #4]
 800842c:	e001      	b.n	8008432 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800842e:	2300      	movs	r3, #0
 8008430:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008432:	687b      	ldr	r3, [r7, #4]
	}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	200005f0 	.word	0x200005f0
 8008444:	20000604 	.word	0x20000604
	...

08008450 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008450:	4b07      	ldr	r3, [pc, #28]	@ (8008470 <pxCurrentTCBConst2>)
 8008452:	6819      	ldr	r1, [r3, #0]
 8008454:	6808      	ldr	r0, [r1, #0]
 8008456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	f380 8809 	msr	PSP, r0
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f04f 0000 	mov.w	r0, #0
 8008466:	f380 8811 	msr	BASEPRI, r0
 800846a:	4770      	bx	lr
 800846c:	f3af 8000 	nop.w

08008470 <pxCurrentTCBConst2>:
 8008470:	2000017c 	.word	0x2000017c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
	...

08008480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008480:	f3ef 8009 	mrs	r0, PSP
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	4b15      	ldr	r3, [pc, #84]	@ (80084e0 <pxCurrentTCBConst>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	f01e 0f10 	tst.w	lr, #16
 8008490:	bf08      	it	eq
 8008492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849a:	6010      	str	r0, [r2, #0]
 800849c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80084a4:	f380 8811 	msr	BASEPRI, r0
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f7ff ff2e 	bl	8008310 <vTaskSwitchContext>
 80084b4:	f04f 0000 	mov.w	r0, #0
 80084b8:	f380 8811 	msr	BASEPRI, r0
 80084bc:	bc09      	pop	{r0, r3}
 80084be:	6819      	ldr	r1, [r3, #0]
 80084c0:	6808      	ldr	r0, [r1, #0]
 80084c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c6:	f01e 0f10 	tst.w	lr, #16
 80084ca:	bf08      	it	eq
 80084cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084d0:	f380 8809 	msr	PSP, r0
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w

080084e0 <pxCurrentTCBConst>:
 80084e0:	2000017c 	.word	0x2000017c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop

080084e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	607b      	str	r3, [r7, #4]
}
 8008500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008502:	f7ff fe4b 	bl	800819c <xTaskIncrementTick>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800850c:	4b06      	ldr	r3, [pc, #24]	@ (8008528 <xPortSysTickHandler+0x40>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	2300      	movs	r3, #0
 8008516:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800851e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800853c:	4b0d      	ldr	r3, [pc, #52]	@ (8008574 <CDC_Transmit_FS+0x48>)
 800853e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008542:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800854e:	2301      	movs	r3, #1
 8008550:	e00b      	b.n	800856a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008552:	887b      	ldrh	r3, [r7, #2]
 8008554:	461a      	mov	r2, r3
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	4806      	ldr	r0, [pc, #24]	@ (8008574 <CDC_Transmit_FS+0x48>)
 800855a:	f7fe fd44 	bl	8006fe6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800855e:	4805      	ldr	r0, [pc, #20]	@ (8008574 <CDC_Transmit_FS+0x48>)
 8008560:	f7fe fd5f 	bl	8007022 <USBD_CDC_TransmitPacket>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008568:	7bfb      	ldrb	r3, [r7, #15]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000608 	.word	0x20000608

08008578 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800858c:	4619      	mov	r1, r3
 800858e:	4610      	mov	r0, r2
 8008590:	f7fe fdb6 	bl	8007100 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	440b      	add	r3, r1
 80085bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	78fb      	ldrb	r3, [r7, #3]
 80085c4:	4619      	mov	r1, r3
 80085c6:	f7fe fdf0 	bl	80071aa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80085ca:	bf00      	nop
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	4613      	mov	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	440b      	add	r3, r1
 80085f2:	3324      	adds	r3, #36	@ 0x24
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	4619      	mov	r1, r3
 80085fa:	f7fe fe39 	bl	8007270 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe ff4d 	bl	80074b4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800861a:	bf00      	nop
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800862a:	2301      	movs	r3, #1
 800862c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	795b      	ldrb	r3, [r3, #5]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d001      	beq.n	800863a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008636:	f7f8 facb 	bl	8000bd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008640:	7bfa      	ldrb	r2, [r7, #15]
 8008642:	4611      	mov	r1, r2
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe fef7 	bl	8007438 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008650:	4618      	mov	r0, r3
 8008652:	f7fe fea3 	bl	800739c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800866e:	4618      	mov	r0, r3
 8008670:	f7fe fef2 	bl	8007458 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7a5b      	ldrb	r3, [r3, #9]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d005      	beq.n	8008688 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800867c:	4b04      	ldr	r3, [pc, #16]	@ (8008690 <HAL_PCD_SuspendCallback+0x30>)
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	4a03      	ldr	r2, [pc, #12]	@ (8008690 <HAL_PCD_SuspendCallback+0x30>)
 8008682:	f043 0306 	orr.w	r3, r3, #6
 8008686:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	e000ed00 	.word	0xe000ed00

08008694 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	7a5b      	ldrb	r3, [r3, #9]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086a4:	4b08      	ldr	r3, [pc, #32]	@ (80086c8 <HAL_PCD_ResumeCallback+0x34>)
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	4a07      	ldr	r2, [pc, #28]	@ (80086c8 <HAL_PCD_ResumeCallback+0x34>)
 80086aa:	f023 0306 	bic.w	r3, r3, #6
 80086ae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80086b0:	f000 f934 	bl	800891c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe fee2 	bl	8007484 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	e000ed00 	.word	0xe000ed00

080086cc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	4608      	mov	r0, r1
 80086d6:	4611      	mov	r1, r2
 80086d8:	461a      	mov	r2, r3
 80086da:	4603      	mov	r3, r0
 80086dc:	70fb      	strb	r3, [r7, #3]
 80086de:	460b      	mov	r3, r1
 80086e0:	70bb      	strb	r3, [r7, #2]
 80086e2:	4613      	mov	r3, r2
 80086e4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80086f4:	78bb      	ldrb	r3, [r7, #2]
 80086f6:	883a      	ldrh	r2, [r7, #0]
 80086f8:	78f9      	ldrb	r1, [r7, #3]
 80086fa:	f7f9 f832 	bl	8001762 <HAL_PCD_EP_Open>
 80086fe:	4603      	mov	r3, r0
 8008700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	4618      	mov	r0, r3
 8008706:	f000 f90f 	bl	8008928 <USBD_Get_USB_Status>
 800870a:	4603      	mov	r3, r0
 800870c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800870e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008732:	78fa      	ldrb	r2, [r7, #3]
 8008734:	4611      	mov	r1, r2
 8008736:	4618      	mov	r0, r3
 8008738:	f7f9 f8da 	bl	80018f0 <HAL_PCD_EP_SetStall>
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f8f0 	bl	8008928 <USBD_Get_USB_Status>
 8008748:	4603      	mov	r3, r0
 800874a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800874c:	7bbb      	ldrb	r3, [r7, #14]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008770:	78fa      	ldrb	r2, [r7, #3]
 8008772:	4611      	mov	r1, r2
 8008774:	4618      	mov	r0, r3
 8008776:	f7f9 f90d 	bl	8001994 <HAL_PCD_EP_ClrStall>
 800877a:	4603      	mov	r3, r0
 800877c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	4618      	mov	r0, r3
 8008782:	f000 f8d1 	bl	8008928 <USBD_Get_USB_Status>
 8008786:	4603      	mov	r3, r0
 8008788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800878a:	7bbb      	ldrb	r3, [r7, #14]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80087a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	da0b      	bge.n	80087c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087b0:	78fb      	ldrb	r3, [r7, #3]
 80087b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087b6:	68f9      	ldr	r1, [r7, #12]
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	00db      	lsls	r3, r3, #3
 80087c0:	440b      	add	r3, r1
 80087c2:	3312      	adds	r3, #18
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	e00b      	b.n	80087e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087c8:	78fb      	ldrb	r3, [r7, #3]
 80087ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087ce:	68f9      	ldr	r1, [r7, #12]
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	440b      	add	r3, r1
 80087da:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80087de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008806:	78fa      	ldrb	r2, [r7, #3]
 8008808:	4611      	mov	r1, r2
 800880a:	4618      	mov	r0, r3
 800880c:	f7f8 ff85 	bl	800171a <HAL_PCD_SetAddress>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 f886 	bl	8008928 <USBD_Get_USB_Status>
 800881c:	4603      	mov	r3, r0
 800881e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008820:	7bbb      	ldrb	r3, [r7, #14]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b086      	sub	sp, #24
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
 8008836:	460b      	mov	r3, r1
 8008838:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008848:	7af9      	ldrb	r1, [r7, #11]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	f7f9 f818 	bl	8001882 <HAL_PCD_EP_Transmit>
 8008852:	4603      	mov	r3, r0
 8008854:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008856:	7dfb      	ldrb	r3, [r7, #23]
 8008858:	4618      	mov	r0, r3
 800885a:	f000 f865 	bl	8008928 <USBD_Get_USB_Status>
 800885e:	4603      	mov	r3, r0
 8008860:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008862:	7dbb      	ldrb	r3, [r7, #22]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	607a      	str	r2, [r7, #4]
 8008876:	603b      	str	r3, [r7, #0]
 8008878:	460b      	mov	r3, r1
 800887a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800888a:	7af9      	ldrb	r1, [r7, #11]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	f7f8 ffc6 	bl	8001820 <HAL_PCD_EP_Receive>
 8008894:	4603      	mov	r3, r0
 8008896:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 f844 	bl	8008928 <USBD_Get_USB_Status>
 80088a0:	4603      	mov	r3, r0
 80088a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80088bc:	78fb      	ldrb	r3, [r7, #3]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <HAL_PCDEx_LPM_Callback+0x18>
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d013      	beq.n	80088ee <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80088c6:	e023      	b.n	8008910 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7a5b      	ldrb	r3, [r3, #9]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d007      	beq.n	80088e0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80088d0:	f000 f824 	bl	800891c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088d4:	4b10      	ldr	r3, [pc, #64]	@ (8008918 <HAL_PCDEx_LPM_Callback+0x68>)
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008918 <HAL_PCDEx_LPM_Callback+0x68>)
 80088da:	f023 0306 	bic.w	r3, r3, #6
 80088de:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fdcc 	bl	8007484 <USBD_LL_Resume>
    break;
 80088ec:	e010      	b.n	8008910 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe fdaf 	bl	8007458 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	7a5b      	ldrb	r3, [r3, #9]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d005      	beq.n	800890e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008902:	4b05      	ldr	r3, [pc, #20]	@ (8008918 <HAL_PCDEx_LPM_Callback+0x68>)
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	4a04      	ldr	r2, [pc, #16]	@ (8008918 <HAL_PCDEx_LPM_Callback+0x68>)
 8008908:	f043 0306 	orr.w	r3, r3, #6
 800890c:	6113      	str	r3, [r2, #16]
    break;
 800890e:	bf00      	nop
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	e000ed00 	.word	0xe000ed00

0800891c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008920:	f7f7 ffe8 	bl	80008f4 <SystemClock_Config>
}
 8008924:	bf00      	nop
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	2b03      	cmp	r3, #3
 800893a:	d817      	bhi.n	800896c <USBD_Get_USB_Status+0x44>
 800893c:	a201      	add	r2, pc, #4	@ (adr r2, 8008944 <USBD_Get_USB_Status+0x1c>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	08008955 	.word	0x08008955
 8008948:	0800895b 	.word	0x0800895b
 800894c:	08008961 	.word	0x08008961
 8008950:	08008967 	.word	0x08008967
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
    break;
 8008958:	e00b      	b.n	8008972 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800895a:	2303      	movs	r3, #3
 800895c:	73fb      	strb	r3, [r7, #15]
    break;
 800895e:	e008      	b.n	8008972 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008960:	2301      	movs	r3, #1
 8008962:	73fb      	strb	r3, [r7, #15]
    break;
 8008964:	e005      	b.n	8008972 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008966:	2303      	movs	r3, #3
 8008968:	73fb      	strb	r3, [r7, #15]
    break;
 800896a:	e002      	b.n	8008972 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800896c:	2303      	movs	r3, #3
 800896e:	73fb      	strb	r3, [r7, #15]
    break;
 8008970:	bf00      	nop
  }
  return usb_status;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <_vsiprintf_r>:
 8008980:	b500      	push	{lr}
 8008982:	b09b      	sub	sp, #108	@ 0x6c
 8008984:	9100      	str	r1, [sp, #0]
 8008986:	9104      	str	r1, [sp, #16]
 8008988:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800898c:	9105      	str	r1, [sp, #20]
 800898e:	9102      	str	r1, [sp, #8]
 8008990:	4905      	ldr	r1, [pc, #20]	@ (80089a8 <_vsiprintf_r+0x28>)
 8008992:	9103      	str	r1, [sp, #12]
 8008994:	4669      	mov	r1, sp
 8008996:	f000 f9a9 	bl	8008cec <_svfiprintf_r>
 800899a:	9b00      	ldr	r3, [sp, #0]
 800899c:	2200      	movs	r2, #0
 800899e:	701a      	strb	r2, [r3, #0]
 80089a0:	b01b      	add	sp, #108	@ 0x6c
 80089a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80089a6:	bf00      	nop
 80089a8:	ffff0208 	.word	0xffff0208

080089ac <vsiprintf>:
 80089ac:	4613      	mov	r3, r2
 80089ae:	460a      	mov	r2, r1
 80089b0:	4601      	mov	r1, r0
 80089b2:	4802      	ldr	r0, [pc, #8]	@ (80089bc <vsiprintf+0x10>)
 80089b4:	6800      	ldr	r0, [r0, #0]
 80089b6:	f7ff bfe3 	b.w	8008980 <_vsiprintf_r>
 80089ba:	bf00      	nop
 80089bc:	2000000c 	.word	0x2000000c

080089c0 <memset>:
 80089c0:	4402      	add	r2, r0
 80089c2:	4603      	mov	r3, r0
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d100      	bne.n	80089ca <memset+0xa>
 80089c8:	4770      	bx	lr
 80089ca:	f803 1b01 	strb.w	r1, [r3], #1
 80089ce:	e7f9      	b.n	80089c4 <memset+0x4>

080089d0 <__errno>:
 80089d0:	4b01      	ldr	r3, [pc, #4]	@ (80089d8 <__errno+0x8>)
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	2000000c 	.word	0x2000000c

080089dc <__libc_init_array>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4d0d      	ldr	r5, [pc, #52]	@ (8008a14 <__libc_init_array+0x38>)
 80089e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008a18 <__libc_init_array+0x3c>)
 80089e2:	1b64      	subs	r4, r4, r5
 80089e4:	10a4      	asrs	r4, r4, #2
 80089e6:	2600      	movs	r6, #0
 80089e8:	42a6      	cmp	r6, r4
 80089ea:	d109      	bne.n	8008a00 <__libc_init_array+0x24>
 80089ec:	4d0b      	ldr	r5, [pc, #44]	@ (8008a1c <__libc_init_array+0x40>)
 80089ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008a20 <__libc_init_array+0x44>)
 80089f0:	f000 fc66 	bl	80092c0 <_init>
 80089f4:	1b64      	subs	r4, r4, r5
 80089f6:	10a4      	asrs	r4, r4, #2
 80089f8:	2600      	movs	r6, #0
 80089fa:	42a6      	cmp	r6, r4
 80089fc:	d105      	bne.n	8008a0a <__libc_init_array+0x2e>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a04:	4798      	blx	r3
 8008a06:	3601      	adds	r6, #1
 8008a08:	e7ee      	b.n	80089e8 <__libc_init_array+0xc>
 8008a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0e:	4798      	blx	r3
 8008a10:	3601      	adds	r6, #1
 8008a12:	e7f2      	b.n	80089fa <__libc_init_array+0x1e>
 8008a14:	08009384 	.word	0x08009384
 8008a18:	08009384 	.word	0x08009384
 8008a1c:	08009384 	.word	0x08009384
 8008a20:	08009388 	.word	0x08009388

08008a24 <__retarget_lock_acquire_recursive>:
 8008a24:	4770      	bx	lr

08008a26 <__retarget_lock_release_recursive>:
 8008a26:	4770      	bx	lr

08008a28 <memcpy>:
 8008a28:	440a      	add	r2, r1
 8008a2a:	4291      	cmp	r1, r2
 8008a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a30:	d100      	bne.n	8008a34 <memcpy+0xc>
 8008a32:	4770      	bx	lr
 8008a34:	b510      	push	{r4, lr}
 8008a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a3e:	4291      	cmp	r1, r2
 8008a40:	d1f9      	bne.n	8008a36 <memcpy+0xe>
 8008a42:	bd10      	pop	{r4, pc}

08008a44 <_free_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4605      	mov	r5, r0
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	d041      	beq.n	8008ad0 <_free_r+0x8c>
 8008a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a50:	1f0c      	subs	r4, r1, #4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bfb8      	it	lt
 8008a56:	18e4      	addlt	r4, r4, r3
 8008a58:	f000 f8e0 	bl	8008c1c <__malloc_lock>
 8008a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad4 <_free_r+0x90>)
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	b933      	cbnz	r3, 8008a70 <_free_r+0x2c>
 8008a62:	6063      	str	r3, [r4, #4]
 8008a64:	6014      	str	r4, [r2, #0]
 8008a66:	4628      	mov	r0, r5
 8008a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a6c:	f000 b8dc 	b.w	8008c28 <__malloc_unlock>
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d908      	bls.n	8008a86 <_free_r+0x42>
 8008a74:	6820      	ldr	r0, [r4, #0]
 8008a76:	1821      	adds	r1, r4, r0
 8008a78:	428b      	cmp	r3, r1
 8008a7a:	bf01      	itttt	eq
 8008a7c:	6819      	ldreq	r1, [r3, #0]
 8008a7e:	685b      	ldreq	r3, [r3, #4]
 8008a80:	1809      	addeq	r1, r1, r0
 8008a82:	6021      	streq	r1, [r4, #0]
 8008a84:	e7ed      	b.n	8008a62 <_free_r+0x1e>
 8008a86:	461a      	mov	r2, r3
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	b10b      	cbz	r3, 8008a90 <_free_r+0x4c>
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	d9fa      	bls.n	8008a86 <_free_r+0x42>
 8008a90:	6811      	ldr	r1, [r2, #0]
 8008a92:	1850      	adds	r0, r2, r1
 8008a94:	42a0      	cmp	r0, r4
 8008a96:	d10b      	bne.n	8008ab0 <_free_r+0x6c>
 8008a98:	6820      	ldr	r0, [r4, #0]
 8008a9a:	4401      	add	r1, r0
 8008a9c:	1850      	adds	r0, r2, r1
 8008a9e:	4283      	cmp	r3, r0
 8008aa0:	6011      	str	r1, [r2, #0]
 8008aa2:	d1e0      	bne.n	8008a66 <_free_r+0x22>
 8008aa4:	6818      	ldr	r0, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	6053      	str	r3, [r2, #4]
 8008aaa:	4408      	add	r0, r1
 8008aac:	6010      	str	r0, [r2, #0]
 8008aae:	e7da      	b.n	8008a66 <_free_r+0x22>
 8008ab0:	d902      	bls.n	8008ab8 <_free_r+0x74>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	602b      	str	r3, [r5, #0]
 8008ab6:	e7d6      	b.n	8008a66 <_free_r+0x22>
 8008ab8:	6820      	ldr	r0, [r4, #0]
 8008aba:	1821      	adds	r1, r4, r0
 8008abc:	428b      	cmp	r3, r1
 8008abe:	bf04      	itt	eq
 8008ac0:	6819      	ldreq	r1, [r3, #0]
 8008ac2:	685b      	ldreq	r3, [r3, #4]
 8008ac4:	6063      	str	r3, [r4, #4]
 8008ac6:	bf04      	itt	eq
 8008ac8:	1809      	addeq	r1, r1, r0
 8008aca:	6021      	streq	r1, [r4, #0]
 8008acc:	6054      	str	r4, [r2, #4]
 8008ace:	e7ca      	b.n	8008a66 <_free_r+0x22>
 8008ad0:	bd38      	pop	{r3, r4, r5, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20000cf8 	.word	0x20000cf8

08008ad8 <sbrk_aligned>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	4e0f      	ldr	r6, [pc, #60]	@ (8008b18 <sbrk_aligned+0x40>)
 8008adc:	460c      	mov	r4, r1
 8008ade:	6831      	ldr	r1, [r6, #0]
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	b911      	cbnz	r1, 8008aea <sbrk_aligned+0x12>
 8008ae4:	f000 fba6 	bl	8009234 <_sbrk_r>
 8008ae8:	6030      	str	r0, [r6, #0]
 8008aea:	4621      	mov	r1, r4
 8008aec:	4628      	mov	r0, r5
 8008aee:	f000 fba1 	bl	8009234 <_sbrk_r>
 8008af2:	1c43      	adds	r3, r0, #1
 8008af4:	d103      	bne.n	8008afe <sbrk_aligned+0x26>
 8008af6:	f04f 34ff 	mov.w	r4, #4294967295
 8008afa:	4620      	mov	r0, r4
 8008afc:	bd70      	pop	{r4, r5, r6, pc}
 8008afe:	1cc4      	adds	r4, r0, #3
 8008b00:	f024 0403 	bic.w	r4, r4, #3
 8008b04:	42a0      	cmp	r0, r4
 8008b06:	d0f8      	beq.n	8008afa <sbrk_aligned+0x22>
 8008b08:	1a21      	subs	r1, r4, r0
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f000 fb92 	bl	8009234 <_sbrk_r>
 8008b10:	3001      	adds	r0, #1
 8008b12:	d1f2      	bne.n	8008afa <sbrk_aligned+0x22>
 8008b14:	e7ef      	b.n	8008af6 <sbrk_aligned+0x1e>
 8008b16:	bf00      	nop
 8008b18:	20000cf4 	.word	0x20000cf4

08008b1c <_malloc_r>:
 8008b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b20:	1ccd      	adds	r5, r1, #3
 8008b22:	f025 0503 	bic.w	r5, r5, #3
 8008b26:	3508      	adds	r5, #8
 8008b28:	2d0c      	cmp	r5, #12
 8008b2a:	bf38      	it	cc
 8008b2c:	250c      	movcc	r5, #12
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	4606      	mov	r6, r0
 8008b32:	db01      	blt.n	8008b38 <_malloc_r+0x1c>
 8008b34:	42a9      	cmp	r1, r5
 8008b36:	d904      	bls.n	8008b42 <_malloc_r+0x26>
 8008b38:	230c      	movs	r3, #12
 8008b3a:	6033      	str	r3, [r6, #0]
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c18 <_malloc_r+0xfc>
 8008b46:	f000 f869 	bl	8008c1c <__malloc_lock>
 8008b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b4e:	461c      	mov	r4, r3
 8008b50:	bb44      	cbnz	r4, 8008ba4 <_malloc_r+0x88>
 8008b52:	4629      	mov	r1, r5
 8008b54:	4630      	mov	r0, r6
 8008b56:	f7ff ffbf 	bl	8008ad8 <sbrk_aligned>
 8008b5a:	1c43      	adds	r3, r0, #1
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	d158      	bne.n	8008c12 <_malloc_r+0xf6>
 8008b60:	f8d8 4000 	ldr.w	r4, [r8]
 8008b64:	4627      	mov	r7, r4
 8008b66:	2f00      	cmp	r7, #0
 8008b68:	d143      	bne.n	8008bf2 <_malloc_r+0xd6>
 8008b6a:	2c00      	cmp	r4, #0
 8008b6c:	d04b      	beq.n	8008c06 <_malloc_r+0xea>
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	4639      	mov	r1, r7
 8008b72:	4630      	mov	r0, r6
 8008b74:	eb04 0903 	add.w	r9, r4, r3
 8008b78:	f000 fb5c 	bl	8009234 <_sbrk_r>
 8008b7c:	4581      	cmp	r9, r0
 8008b7e:	d142      	bne.n	8008c06 <_malloc_r+0xea>
 8008b80:	6821      	ldr	r1, [r4, #0]
 8008b82:	1a6d      	subs	r5, r5, r1
 8008b84:	4629      	mov	r1, r5
 8008b86:	4630      	mov	r0, r6
 8008b88:	f7ff ffa6 	bl	8008ad8 <sbrk_aligned>
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d03a      	beq.n	8008c06 <_malloc_r+0xea>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	442b      	add	r3, r5
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	f8d8 3000 	ldr.w	r3, [r8]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	bb62      	cbnz	r2, 8008bf8 <_malloc_r+0xdc>
 8008b9e:	f8c8 7000 	str.w	r7, [r8]
 8008ba2:	e00f      	b.n	8008bc4 <_malloc_r+0xa8>
 8008ba4:	6822      	ldr	r2, [r4, #0]
 8008ba6:	1b52      	subs	r2, r2, r5
 8008ba8:	d420      	bmi.n	8008bec <_malloc_r+0xd0>
 8008baa:	2a0b      	cmp	r2, #11
 8008bac:	d917      	bls.n	8008bde <_malloc_r+0xc2>
 8008bae:	1961      	adds	r1, r4, r5
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	6025      	str	r5, [r4, #0]
 8008bb4:	bf18      	it	ne
 8008bb6:	6059      	strne	r1, [r3, #4]
 8008bb8:	6863      	ldr	r3, [r4, #4]
 8008bba:	bf08      	it	eq
 8008bbc:	f8c8 1000 	streq.w	r1, [r8]
 8008bc0:	5162      	str	r2, [r4, r5]
 8008bc2:	604b      	str	r3, [r1, #4]
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f000 f82f 	bl	8008c28 <__malloc_unlock>
 8008bca:	f104 000b 	add.w	r0, r4, #11
 8008bce:	1d23      	adds	r3, r4, #4
 8008bd0:	f020 0007 	bic.w	r0, r0, #7
 8008bd4:	1ac2      	subs	r2, r0, r3
 8008bd6:	bf1c      	itt	ne
 8008bd8:	1a1b      	subne	r3, r3, r0
 8008bda:	50a3      	strne	r3, [r4, r2]
 8008bdc:	e7af      	b.n	8008b3e <_malloc_r+0x22>
 8008bde:	6862      	ldr	r2, [r4, #4]
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	bf0c      	ite	eq
 8008be4:	f8c8 2000 	streq.w	r2, [r8]
 8008be8:	605a      	strne	r2, [r3, #4]
 8008bea:	e7eb      	b.n	8008bc4 <_malloc_r+0xa8>
 8008bec:	4623      	mov	r3, r4
 8008bee:	6864      	ldr	r4, [r4, #4]
 8008bf0:	e7ae      	b.n	8008b50 <_malloc_r+0x34>
 8008bf2:	463c      	mov	r4, r7
 8008bf4:	687f      	ldr	r7, [r7, #4]
 8008bf6:	e7b6      	b.n	8008b66 <_malloc_r+0x4a>
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	d1fb      	bne.n	8008bf8 <_malloc_r+0xdc>
 8008c00:	2300      	movs	r3, #0
 8008c02:	6053      	str	r3, [r2, #4]
 8008c04:	e7de      	b.n	8008bc4 <_malloc_r+0xa8>
 8008c06:	230c      	movs	r3, #12
 8008c08:	6033      	str	r3, [r6, #0]
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f000 f80c 	bl	8008c28 <__malloc_unlock>
 8008c10:	e794      	b.n	8008b3c <_malloc_r+0x20>
 8008c12:	6005      	str	r5, [r0, #0]
 8008c14:	e7d6      	b.n	8008bc4 <_malloc_r+0xa8>
 8008c16:	bf00      	nop
 8008c18:	20000cf8 	.word	0x20000cf8

08008c1c <__malloc_lock>:
 8008c1c:	4801      	ldr	r0, [pc, #4]	@ (8008c24 <__malloc_lock+0x8>)
 8008c1e:	f7ff bf01 	b.w	8008a24 <__retarget_lock_acquire_recursive>
 8008c22:	bf00      	nop
 8008c24:	20000cf0 	.word	0x20000cf0

08008c28 <__malloc_unlock>:
 8008c28:	4801      	ldr	r0, [pc, #4]	@ (8008c30 <__malloc_unlock+0x8>)
 8008c2a:	f7ff befc 	b.w	8008a26 <__retarget_lock_release_recursive>
 8008c2e:	bf00      	nop
 8008c30:	20000cf0 	.word	0x20000cf0

08008c34 <__ssputs_r>:
 8008c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c38:	688e      	ldr	r6, [r1, #8]
 8008c3a:	461f      	mov	r7, r3
 8008c3c:	42be      	cmp	r6, r7
 8008c3e:	680b      	ldr	r3, [r1, #0]
 8008c40:	4682      	mov	sl, r0
 8008c42:	460c      	mov	r4, r1
 8008c44:	4690      	mov	r8, r2
 8008c46:	d82d      	bhi.n	8008ca4 <__ssputs_r+0x70>
 8008c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c50:	d026      	beq.n	8008ca0 <__ssputs_r+0x6c>
 8008c52:	6965      	ldr	r5, [r4, #20]
 8008c54:	6909      	ldr	r1, [r1, #16]
 8008c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c5a:	eba3 0901 	sub.w	r9, r3, r1
 8008c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c62:	1c7b      	adds	r3, r7, #1
 8008c64:	444b      	add	r3, r9
 8008c66:	106d      	asrs	r5, r5, #1
 8008c68:	429d      	cmp	r5, r3
 8008c6a:	bf38      	it	cc
 8008c6c:	461d      	movcc	r5, r3
 8008c6e:	0553      	lsls	r3, r2, #21
 8008c70:	d527      	bpl.n	8008cc2 <__ssputs_r+0x8e>
 8008c72:	4629      	mov	r1, r5
 8008c74:	f7ff ff52 	bl	8008b1c <_malloc_r>
 8008c78:	4606      	mov	r6, r0
 8008c7a:	b360      	cbz	r0, 8008cd6 <__ssputs_r+0xa2>
 8008c7c:	6921      	ldr	r1, [r4, #16]
 8008c7e:	464a      	mov	r2, r9
 8008c80:	f7ff fed2 	bl	8008a28 <memcpy>
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c8e:	81a3      	strh	r3, [r4, #12]
 8008c90:	6126      	str	r6, [r4, #16]
 8008c92:	6165      	str	r5, [r4, #20]
 8008c94:	444e      	add	r6, r9
 8008c96:	eba5 0509 	sub.w	r5, r5, r9
 8008c9a:	6026      	str	r6, [r4, #0]
 8008c9c:	60a5      	str	r5, [r4, #8]
 8008c9e:	463e      	mov	r6, r7
 8008ca0:	42be      	cmp	r6, r7
 8008ca2:	d900      	bls.n	8008ca6 <__ssputs_r+0x72>
 8008ca4:	463e      	mov	r6, r7
 8008ca6:	6820      	ldr	r0, [r4, #0]
 8008ca8:	4632      	mov	r2, r6
 8008caa:	4641      	mov	r1, r8
 8008cac:	f000 faa8 	bl	8009200 <memmove>
 8008cb0:	68a3      	ldr	r3, [r4, #8]
 8008cb2:	1b9b      	subs	r3, r3, r6
 8008cb4:	60a3      	str	r3, [r4, #8]
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	4433      	add	r3, r6
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc2:	462a      	mov	r2, r5
 8008cc4:	f000 fac6 	bl	8009254 <_realloc_r>
 8008cc8:	4606      	mov	r6, r0
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d1e0      	bne.n	8008c90 <__ssputs_r+0x5c>
 8008cce:	6921      	ldr	r1, [r4, #16]
 8008cd0:	4650      	mov	r0, sl
 8008cd2:	f7ff feb7 	bl	8008a44 <_free_r>
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	f8ca 3000 	str.w	r3, [sl]
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce8:	e7e9      	b.n	8008cbe <__ssputs_r+0x8a>
	...

08008cec <_svfiprintf_r>:
 8008cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	4698      	mov	r8, r3
 8008cf2:	898b      	ldrh	r3, [r1, #12]
 8008cf4:	061b      	lsls	r3, r3, #24
 8008cf6:	b09d      	sub	sp, #116	@ 0x74
 8008cf8:	4607      	mov	r7, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	4614      	mov	r4, r2
 8008cfe:	d510      	bpl.n	8008d22 <_svfiprintf_r+0x36>
 8008d00:	690b      	ldr	r3, [r1, #16]
 8008d02:	b973      	cbnz	r3, 8008d22 <_svfiprintf_r+0x36>
 8008d04:	2140      	movs	r1, #64	@ 0x40
 8008d06:	f7ff ff09 	bl	8008b1c <_malloc_r>
 8008d0a:	6028      	str	r0, [r5, #0]
 8008d0c:	6128      	str	r0, [r5, #16]
 8008d0e:	b930      	cbnz	r0, 8008d1e <_svfiprintf_r+0x32>
 8008d10:	230c      	movs	r3, #12
 8008d12:	603b      	str	r3, [r7, #0]
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295
 8008d18:	b01d      	add	sp, #116	@ 0x74
 8008d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1e:	2340      	movs	r3, #64	@ 0x40
 8008d20:	616b      	str	r3, [r5, #20]
 8008d22:	2300      	movs	r3, #0
 8008d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d26:	2320      	movs	r3, #32
 8008d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d30:	2330      	movs	r3, #48	@ 0x30
 8008d32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ed0 <_svfiprintf_r+0x1e4>
 8008d36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d3a:	f04f 0901 	mov.w	r9, #1
 8008d3e:	4623      	mov	r3, r4
 8008d40:	469a      	mov	sl, r3
 8008d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d46:	b10a      	cbz	r2, 8008d4c <_svfiprintf_r+0x60>
 8008d48:	2a25      	cmp	r2, #37	@ 0x25
 8008d4a:	d1f9      	bne.n	8008d40 <_svfiprintf_r+0x54>
 8008d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d50:	d00b      	beq.n	8008d6a <_svfiprintf_r+0x7e>
 8008d52:	465b      	mov	r3, fp
 8008d54:	4622      	mov	r2, r4
 8008d56:	4629      	mov	r1, r5
 8008d58:	4638      	mov	r0, r7
 8008d5a:	f7ff ff6b 	bl	8008c34 <__ssputs_r>
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f000 80a7 	beq.w	8008eb2 <_svfiprintf_r+0x1c6>
 8008d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d66:	445a      	add	r2, fp
 8008d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 809f 	beq.w	8008eb2 <_svfiprintf_r+0x1c6>
 8008d74:	2300      	movs	r3, #0
 8008d76:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d7e:	f10a 0a01 	add.w	sl, sl, #1
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	9307      	str	r3, [sp, #28]
 8008d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d8c:	4654      	mov	r4, sl
 8008d8e:	2205      	movs	r2, #5
 8008d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d94:	484e      	ldr	r0, [pc, #312]	@ (8008ed0 <_svfiprintf_r+0x1e4>)
 8008d96:	f7f7 fa43 	bl	8000220 <memchr>
 8008d9a:	9a04      	ldr	r2, [sp, #16]
 8008d9c:	b9d8      	cbnz	r0, 8008dd6 <_svfiprintf_r+0xea>
 8008d9e:	06d0      	lsls	r0, r2, #27
 8008da0:	bf44      	itt	mi
 8008da2:	2320      	movmi	r3, #32
 8008da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008da8:	0711      	lsls	r1, r2, #28
 8008daa:	bf44      	itt	mi
 8008dac:	232b      	movmi	r3, #43	@ 0x2b
 8008dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008db2:	f89a 3000 	ldrb.w	r3, [sl]
 8008db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008db8:	d015      	beq.n	8008de6 <_svfiprintf_r+0xfa>
 8008dba:	9a07      	ldr	r2, [sp, #28]
 8008dbc:	4654      	mov	r4, sl
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	f04f 0c0a 	mov.w	ip, #10
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dca:	3b30      	subs	r3, #48	@ 0x30
 8008dcc:	2b09      	cmp	r3, #9
 8008dce:	d94b      	bls.n	8008e68 <_svfiprintf_r+0x17c>
 8008dd0:	b1b0      	cbz	r0, 8008e00 <_svfiprintf_r+0x114>
 8008dd2:	9207      	str	r2, [sp, #28]
 8008dd4:	e014      	b.n	8008e00 <_svfiprintf_r+0x114>
 8008dd6:	eba0 0308 	sub.w	r3, r0, r8
 8008dda:	fa09 f303 	lsl.w	r3, r9, r3
 8008dde:	4313      	orrs	r3, r2
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	46a2      	mov	sl, r4
 8008de4:	e7d2      	b.n	8008d8c <_svfiprintf_r+0xa0>
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	1d19      	adds	r1, r3, #4
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	9103      	str	r1, [sp, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	bfbb      	ittet	lt
 8008df2:	425b      	neglt	r3, r3
 8008df4:	f042 0202 	orrlt.w	r2, r2, #2
 8008df8:	9307      	strge	r3, [sp, #28]
 8008dfa:	9307      	strlt	r3, [sp, #28]
 8008dfc:	bfb8      	it	lt
 8008dfe:	9204      	strlt	r2, [sp, #16]
 8008e00:	7823      	ldrb	r3, [r4, #0]
 8008e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e04:	d10a      	bne.n	8008e1c <_svfiprintf_r+0x130>
 8008e06:	7863      	ldrb	r3, [r4, #1]
 8008e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e0a:	d132      	bne.n	8008e72 <_svfiprintf_r+0x186>
 8008e0c:	9b03      	ldr	r3, [sp, #12]
 8008e0e:	1d1a      	adds	r2, r3, #4
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	9203      	str	r2, [sp, #12]
 8008e14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e18:	3402      	adds	r4, #2
 8008e1a:	9305      	str	r3, [sp, #20]
 8008e1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ee0 <_svfiprintf_r+0x1f4>
 8008e20:	7821      	ldrb	r1, [r4, #0]
 8008e22:	2203      	movs	r2, #3
 8008e24:	4650      	mov	r0, sl
 8008e26:	f7f7 f9fb 	bl	8000220 <memchr>
 8008e2a:	b138      	cbz	r0, 8008e3c <_svfiprintf_r+0x150>
 8008e2c:	9b04      	ldr	r3, [sp, #16]
 8008e2e:	eba0 000a 	sub.w	r0, r0, sl
 8008e32:	2240      	movs	r2, #64	@ 0x40
 8008e34:	4082      	lsls	r2, r0
 8008e36:	4313      	orrs	r3, r2
 8008e38:	3401      	adds	r4, #1
 8008e3a:	9304      	str	r3, [sp, #16]
 8008e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e40:	4824      	ldr	r0, [pc, #144]	@ (8008ed4 <_svfiprintf_r+0x1e8>)
 8008e42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e46:	2206      	movs	r2, #6
 8008e48:	f7f7 f9ea 	bl	8000220 <memchr>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d036      	beq.n	8008ebe <_svfiprintf_r+0x1d2>
 8008e50:	4b21      	ldr	r3, [pc, #132]	@ (8008ed8 <_svfiprintf_r+0x1ec>)
 8008e52:	bb1b      	cbnz	r3, 8008e9c <_svfiprintf_r+0x1b0>
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	3307      	adds	r3, #7
 8008e58:	f023 0307 	bic.w	r3, r3, #7
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	9303      	str	r3, [sp, #12]
 8008e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e62:	4433      	add	r3, r6
 8008e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e66:	e76a      	b.n	8008d3e <_svfiprintf_r+0x52>
 8008e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	2001      	movs	r0, #1
 8008e70:	e7a8      	b.n	8008dc4 <_svfiprintf_r+0xd8>
 8008e72:	2300      	movs	r3, #0
 8008e74:	3401      	adds	r4, #1
 8008e76:	9305      	str	r3, [sp, #20]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f04f 0c0a 	mov.w	ip, #10
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e84:	3a30      	subs	r2, #48	@ 0x30
 8008e86:	2a09      	cmp	r2, #9
 8008e88:	d903      	bls.n	8008e92 <_svfiprintf_r+0x1a6>
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0c6      	beq.n	8008e1c <_svfiprintf_r+0x130>
 8008e8e:	9105      	str	r1, [sp, #20]
 8008e90:	e7c4      	b.n	8008e1c <_svfiprintf_r+0x130>
 8008e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e96:	4604      	mov	r4, r0
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e7f0      	b.n	8008e7e <_svfiprintf_r+0x192>
 8008e9c:	ab03      	add	r3, sp, #12
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8008edc <_svfiprintf_r+0x1f0>)
 8008ea4:	a904      	add	r1, sp, #16
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f3af 8000 	nop.w
 8008eac:	1c42      	adds	r2, r0, #1
 8008eae:	4606      	mov	r6, r0
 8008eb0:	d1d6      	bne.n	8008e60 <_svfiprintf_r+0x174>
 8008eb2:	89ab      	ldrh	r3, [r5, #12]
 8008eb4:	065b      	lsls	r3, r3, #25
 8008eb6:	f53f af2d 	bmi.w	8008d14 <_svfiprintf_r+0x28>
 8008eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ebc:	e72c      	b.n	8008d18 <_svfiprintf_r+0x2c>
 8008ebe:	ab03      	add	r3, sp, #12
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	462a      	mov	r2, r5
 8008ec4:	4b05      	ldr	r3, [pc, #20]	@ (8008edc <_svfiprintf_r+0x1f0>)
 8008ec6:	a904      	add	r1, sp, #16
 8008ec8:	4638      	mov	r0, r7
 8008eca:	f000 f879 	bl	8008fc0 <_printf_i>
 8008ece:	e7ed      	b.n	8008eac <_svfiprintf_r+0x1c0>
 8008ed0:	08009348 	.word	0x08009348
 8008ed4:	08009352 	.word	0x08009352
 8008ed8:	00000000 	.word	0x00000000
 8008edc:	08008c35 	.word	0x08008c35
 8008ee0:	0800934e 	.word	0x0800934e

08008ee4 <_printf_common>:
 8008ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee8:	4616      	mov	r6, r2
 8008eea:	4698      	mov	r8, r3
 8008eec:	688a      	ldr	r2, [r1, #8]
 8008eee:	690b      	ldr	r3, [r1, #16]
 8008ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	bfb8      	it	lt
 8008ef8:	4613      	movlt	r3, r2
 8008efa:	6033      	str	r3, [r6, #0]
 8008efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f00:	4607      	mov	r7, r0
 8008f02:	460c      	mov	r4, r1
 8008f04:	b10a      	cbz	r2, 8008f0a <_printf_common+0x26>
 8008f06:	3301      	adds	r3, #1
 8008f08:	6033      	str	r3, [r6, #0]
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	0699      	lsls	r1, r3, #26
 8008f0e:	bf42      	ittt	mi
 8008f10:	6833      	ldrmi	r3, [r6, #0]
 8008f12:	3302      	addmi	r3, #2
 8008f14:	6033      	strmi	r3, [r6, #0]
 8008f16:	6825      	ldr	r5, [r4, #0]
 8008f18:	f015 0506 	ands.w	r5, r5, #6
 8008f1c:	d106      	bne.n	8008f2c <_printf_common+0x48>
 8008f1e:	f104 0a19 	add.w	sl, r4, #25
 8008f22:	68e3      	ldr	r3, [r4, #12]
 8008f24:	6832      	ldr	r2, [r6, #0]
 8008f26:	1a9b      	subs	r3, r3, r2
 8008f28:	42ab      	cmp	r3, r5
 8008f2a:	dc26      	bgt.n	8008f7a <_printf_common+0x96>
 8008f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f30:	6822      	ldr	r2, [r4, #0]
 8008f32:	3b00      	subs	r3, #0
 8008f34:	bf18      	it	ne
 8008f36:	2301      	movne	r3, #1
 8008f38:	0692      	lsls	r2, r2, #26
 8008f3a:	d42b      	bmi.n	8008f94 <_printf_common+0xb0>
 8008f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f40:	4641      	mov	r1, r8
 8008f42:	4638      	mov	r0, r7
 8008f44:	47c8      	blx	r9
 8008f46:	3001      	adds	r0, #1
 8008f48:	d01e      	beq.n	8008f88 <_printf_common+0xa4>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	6922      	ldr	r2, [r4, #16]
 8008f4e:	f003 0306 	and.w	r3, r3, #6
 8008f52:	2b04      	cmp	r3, #4
 8008f54:	bf02      	ittt	eq
 8008f56:	68e5      	ldreq	r5, [r4, #12]
 8008f58:	6833      	ldreq	r3, [r6, #0]
 8008f5a:	1aed      	subeq	r5, r5, r3
 8008f5c:	68a3      	ldr	r3, [r4, #8]
 8008f5e:	bf0c      	ite	eq
 8008f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f64:	2500      	movne	r5, #0
 8008f66:	4293      	cmp	r3, r2
 8008f68:	bfc4      	itt	gt
 8008f6a:	1a9b      	subgt	r3, r3, r2
 8008f6c:	18ed      	addgt	r5, r5, r3
 8008f6e:	2600      	movs	r6, #0
 8008f70:	341a      	adds	r4, #26
 8008f72:	42b5      	cmp	r5, r6
 8008f74:	d11a      	bne.n	8008fac <_printf_common+0xc8>
 8008f76:	2000      	movs	r0, #0
 8008f78:	e008      	b.n	8008f8c <_printf_common+0xa8>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4652      	mov	r2, sl
 8008f7e:	4641      	mov	r1, r8
 8008f80:	4638      	mov	r0, r7
 8008f82:	47c8      	blx	r9
 8008f84:	3001      	adds	r0, #1
 8008f86:	d103      	bne.n	8008f90 <_printf_common+0xac>
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f90:	3501      	adds	r5, #1
 8008f92:	e7c6      	b.n	8008f22 <_printf_common+0x3e>
 8008f94:	18e1      	adds	r1, r4, r3
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	2030      	movs	r0, #48	@ 0x30
 8008f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f9e:	4422      	add	r2, r4
 8008fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fa8:	3302      	adds	r3, #2
 8008faa:	e7c7      	b.n	8008f3c <_printf_common+0x58>
 8008fac:	2301      	movs	r3, #1
 8008fae:	4622      	mov	r2, r4
 8008fb0:	4641      	mov	r1, r8
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	47c8      	blx	r9
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	d0e6      	beq.n	8008f88 <_printf_common+0xa4>
 8008fba:	3601      	adds	r6, #1
 8008fbc:	e7d9      	b.n	8008f72 <_printf_common+0x8e>
	...

08008fc0 <_printf_i>:
 8008fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc4:	7e0f      	ldrb	r7, [r1, #24]
 8008fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fc8:	2f78      	cmp	r7, #120	@ 0x78
 8008fca:	4691      	mov	r9, r2
 8008fcc:	4680      	mov	r8, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	469a      	mov	sl, r3
 8008fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fd6:	d807      	bhi.n	8008fe8 <_printf_i+0x28>
 8008fd8:	2f62      	cmp	r7, #98	@ 0x62
 8008fda:	d80a      	bhi.n	8008ff2 <_printf_i+0x32>
 8008fdc:	2f00      	cmp	r7, #0
 8008fde:	f000 80d2 	beq.w	8009186 <_printf_i+0x1c6>
 8008fe2:	2f58      	cmp	r7, #88	@ 0x58
 8008fe4:	f000 80b9 	beq.w	800915a <_printf_i+0x19a>
 8008fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ff0:	e03a      	b.n	8009068 <_printf_i+0xa8>
 8008ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ff6:	2b15      	cmp	r3, #21
 8008ff8:	d8f6      	bhi.n	8008fe8 <_printf_i+0x28>
 8008ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8009000 <_printf_i+0x40>)
 8008ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009000:	08009059 	.word	0x08009059
 8009004:	0800906d 	.word	0x0800906d
 8009008:	08008fe9 	.word	0x08008fe9
 800900c:	08008fe9 	.word	0x08008fe9
 8009010:	08008fe9 	.word	0x08008fe9
 8009014:	08008fe9 	.word	0x08008fe9
 8009018:	0800906d 	.word	0x0800906d
 800901c:	08008fe9 	.word	0x08008fe9
 8009020:	08008fe9 	.word	0x08008fe9
 8009024:	08008fe9 	.word	0x08008fe9
 8009028:	08008fe9 	.word	0x08008fe9
 800902c:	0800916d 	.word	0x0800916d
 8009030:	08009097 	.word	0x08009097
 8009034:	08009127 	.word	0x08009127
 8009038:	08008fe9 	.word	0x08008fe9
 800903c:	08008fe9 	.word	0x08008fe9
 8009040:	0800918f 	.word	0x0800918f
 8009044:	08008fe9 	.word	0x08008fe9
 8009048:	08009097 	.word	0x08009097
 800904c:	08008fe9 	.word	0x08008fe9
 8009050:	08008fe9 	.word	0x08008fe9
 8009054:	0800912f 	.word	0x0800912f
 8009058:	6833      	ldr	r3, [r6, #0]
 800905a:	1d1a      	adds	r2, r3, #4
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6032      	str	r2, [r6, #0]
 8009060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009068:	2301      	movs	r3, #1
 800906a:	e09d      	b.n	80091a8 <_printf_i+0x1e8>
 800906c:	6833      	ldr	r3, [r6, #0]
 800906e:	6820      	ldr	r0, [r4, #0]
 8009070:	1d19      	adds	r1, r3, #4
 8009072:	6031      	str	r1, [r6, #0]
 8009074:	0606      	lsls	r6, r0, #24
 8009076:	d501      	bpl.n	800907c <_printf_i+0xbc>
 8009078:	681d      	ldr	r5, [r3, #0]
 800907a:	e003      	b.n	8009084 <_printf_i+0xc4>
 800907c:	0645      	lsls	r5, r0, #25
 800907e:	d5fb      	bpl.n	8009078 <_printf_i+0xb8>
 8009080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009084:	2d00      	cmp	r5, #0
 8009086:	da03      	bge.n	8009090 <_printf_i+0xd0>
 8009088:	232d      	movs	r3, #45	@ 0x2d
 800908a:	426d      	negs	r5, r5
 800908c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009090:	4859      	ldr	r0, [pc, #356]	@ (80091f8 <_printf_i+0x238>)
 8009092:	230a      	movs	r3, #10
 8009094:	e011      	b.n	80090ba <_printf_i+0xfa>
 8009096:	6821      	ldr	r1, [r4, #0]
 8009098:	6833      	ldr	r3, [r6, #0]
 800909a:	0608      	lsls	r0, r1, #24
 800909c:	f853 5b04 	ldr.w	r5, [r3], #4
 80090a0:	d402      	bmi.n	80090a8 <_printf_i+0xe8>
 80090a2:	0649      	lsls	r1, r1, #25
 80090a4:	bf48      	it	mi
 80090a6:	b2ad      	uxthmi	r5, r5
 80090a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80090aa:	4853      	ldr	r0, [pc, #332]	@ (80091f8 <_printf_i+0x238>)
 80090ac:	6033      	str	r3, [r6, #0]
 80090ae:	bf14      	ite	ne
 80090b0:	230a      	movne	r3, #10
 80090b2:	2308      	moveq	r3, #8
 80090b4:	2100      	movs	r1, #0
 80090b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090ba:	6866      	ldr	r6, [r4, #4]
 80090bc:	60a6      	str	r6, [r4, #8]
 80090be:	2e00      	cmp	r6, #0
 80090c0:	bfa2      	ittt	ge
 80090c2:	6821      	ldrge	r1, [r4, #0]
 80090c4:	f021 0104 	bicge.w	r1, r1, #4
 80090c8:	6021      	strge	r1, [r4, #0]
 80090ca:	b90d      	cbnz	r5, 80090d0 <_printf_i+0x110>
 80090cc:	2e00      	cmp	r6, #0
 80090ce:	d04b      	beq.n	8009168 <_printf_i+0x1a8>
 80090d0:	4616      	mov	r6, r2
 80090d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80090d6:	fb03 5711 	mls	r7, r3, r1, r5
 80090da:	5dc7      	ldrb	r7, [r0, r7]
 80090dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090e0:	462f      	mov	r7, r5
 80090e2:	42bb      	cmp	r3, r7
 80090e4:	460d      	mov	r5, r1
 80090e6:	d9f4      	bls.n	80090d2 <_printf_i+0x112>
 80090e8:	2b08      	cmp	r3, #8
 80090ea:	d10b      	bne.n	8009104 <_printf_i+0x144>
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	07df      	lsls	r7, r3, #31
 80090f0:	d508      	bpl.n	8009104 <_printf_i+0x144>
 80090f2:	6923      	ldr	r3, [r4, #16]
 80090f4:	6861      	ldr	r1, [r4, #4]
 80090f6:	4299      	cmp	r1, r3
 80090f8:	bfde      	ittt	le
 80090fa:	2330      	movle	r3, #48	@ 0x30
 80090fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009100:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009104:	1b92      	subs	r2, r2, r6
 8009106:	6122      	str	r2, [r4, #16]
 8009108:	f8cd a000 	str.w	sl, [sp]
 800910c:	464b      	mov	r3, r9
 800910e:	aa03      	add	r2, sp, #12
 8009110:	4621      	mov	r1, r4
 8009112:	4640      	mov	r0, r8
 8009114:	f7ff fee6 	bl	8008ee4 <_printf_common>
 8009118:	3001      	adds	r0, #1
 800911a:	d14a      	bne.n	80091b2 <_printf_i+0x1f2>
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	b004      	add	sp, #16
 8009122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	f043 0320 	orr.w	r3, r3, #32
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	4833      	ldr	r0, [pc, #204]	@ (80091fc <_printf_i+0x23c>)
 8009130:	2778      	movs	r7, #120	@ 0x78
 8009132:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	6831      	ldr	r1, [r6, #0]
 800913a:	061f      	lsls	r7, r3, #24
 800913c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009140:	d402      	bmi.n	8009148 <_printf_i+0x188>
 8009142:	065f      	lsls	r7, r3, #25
 8009144:	bf48      	it	mi
 8009146:	b2ad      	uxthmi	r5, r5
 8009148:	6031      	str	r1, [r6, #0]
 800914a:	07d9      	lsls	r1, r3, #31
 800914c:	bf44      	itt	mi
 800914e:	f043 0320 	orrmi.w	r3, r3, #32
 8009152:	6023      	strmi	r3, [r4, #0]
 8009154:	b11d      	cbz	r5, 800915e <_printf_i+0x19e>
 8009156:	2310      	movs	r3, #16
 8009158:	e7ac      	b.n	80090b4 <_printf_i+0xf4>
 800915a:	4827      	ldr	r0, [pc, #156]	@ (80091f8 <_printf_i+0x238>)
 800915c:	e7e9      	b.n	8009132 <_printf_i+0x172>
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	f023 0320 	bic.w	r3, r3, #32
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	e7f6      	b.n	8009156 <_printf_i+0x196>
 8009168:	4616      	mov	r6, r2
 800916a:	e7bd      	b.n	80090e8 <_printf_i+0x128>
 800916c:	6833      	ldr	r3, [r6, #0]
 800916e:	6825      	ldr	r5, [r4, #0]
 8009170:	6961      	ldr	r1, [r4, #20]
 8009172:	1d18      	adds	r0, r3, #4
 8009174:	6030      	str	r0, [r6, #0]
 8009176:	062e      	lsls	r6, r5, #24
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	d501      	bpl.n	8009180 <_printf_i+0x1c0>
 800917c:	6019      	str	r1, [r3, #0]
 800917e:	e002      	b.n	8009186 <_printf_i+0x1c6>
 8009180:	0668      	lsls	r0, r5, #25
 8009182:	d5fb      	bpl.n	800917c <_printf_i+0x1bc>
 8009184:	8019      	strh	r1, [r3, #0]
 8009186:	2300      	movs	r3, #0
 8009188:	6123      	str	r3, [r4, #16]
 800918a:	4616      	mov	r6, r2
 800918c:	e7bc      	b.n	8009108 <_printf_i+0x148>
 800918e:	6833      	ldr	r3, [r6, #0]
 8009190:	1d1a      	adds	r2, r3, #4
 8009192:	6032      	str	r2, [r6, #0]
 8009194:	681e      	ldr	r6, [r3, #0]
 8009196:	6862      	ldr	r2, [r4, #4]
 8009198:	2100      	movs	r1, #0
 800919a:	4630      	mov	r0, r6
 800919c:	f7f7 f840 	bl	8000220 <memchr>
 80091a0:	b108      	cbz	r0, 80091a6 <_printf_i+0x1e6>
 80091a2:	1b80      	subs	r0, r0, r6
 80091a4:	6060      	str	r0, [r4, #4]
 80091a6:	6863      	ldr	r3, [r4, #4]
 80091a8:	6123      	str	r3, [r4, #16]
 80091aa:	2300      	movs	r3, #0
 80091ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091b0:	e7aa      	b.n	8009108 <_printf_i+0x148>
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	4632      	mov	r2, r6
 80091b6:	4649      	mov	r1, r9
 80091b8:	4640      	mov	r0, r8
 80091ba:	47d0      	blx	sl
 80091bc:	3001      	adds	r0, #1
 80091be:	d0ad      	beq.n	800911c <_printf_i+0x15c>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	079b      	lsls	r3, r3, #30
 80091c4:	d413      	bmi.n	80091ee <_printf_i+0x22e>
 80091c6:	68e0      	ldr	r0, [r4, #12]
 80091c8:	9b03      	ldr	r3, [sp, #12]
 80091ca:	4298      	cmp	r0, r3
 80091cc:	bfb8      	it	lt
 80091ce:	4618      	movlt	r0, r3
 80091d0:	e7a6      	b.n	8009120 <_printf_i+0x160>
 80091d2:	2301      	movs	r3, #1
 80091d4:	4632      	mov	r2, r6
 80091d6:	4649      	mov	r1, r9
 80091d8:	4640      	mov	r0, r8
 80091da:	47d0      	blx	sl
 80091dc:	3001      	adds	r0, #1
 80091de:	d09d      	beq.n	800911c <_printf_i+0x15c>
 80091e0:	3501      	adds	r5, #1
 80091e2:	68e3      	ldr	r3, [r4, #12]
 80091e4:	9903      	ldr	r1, [sp, #12]
 80091e6:	1a5b      	subs	r3, r3, r1
 80091e8:	42ab      	cmp	r3, r5
 80091ea:	dcf2      	bgt.n	80091d2 <_printf_i+0x212>
 80091ec:	e7eb      	b.n	80091c6 <_printf_i+0x206>
 80091ee:	2500      	movs	r5, #0
 80091f0:	f104 0619 	add.w	r6, r4, #25
 80091f4:	e7f5      	b.n	80091e2 <_printf_i+0x222>
 80091f6:	bf00      	nop
 80091f8:	08009359 	.word	0x08009359
 80091fc:	0800936a 	.word	0x0800936a

08009200 <memmove>:
 8009200:	4288      	cmp	r0, r1
 8009202:	b510      	push	{r4, lr}
 8009204:	eb01 0402 	add.w	r4, r1, r2
 8009208:	d902      	bls.n	8009210 <memmove+0x10>
 800920a:	4284      	cmp	r4, r0
 800920c:	4623      	mov	r3, r4
 800920e:	d807      	bhi.n	8009220 <memmove+0x20>
 8009210:	1e43      	subs	r3, r0, #1
 8009212:	42a1      	cmp	r1, r4
 8009214:	d008      	beq.n	8009228 <memmove+0x28>
 8009216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800921a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800921e:	e7f8      	b.n	8009212 <memmove+0x12>
 8009220:	4402      	add	r2, r0
 8009222:	4601      	mov	r1, r0
 8009224:	428a      	cmp	r2, r1
 8009226:	d100      	bne.n	800922a <memmove+0x2a>
 8009228:	bd10      	pop	{r4, pc}
 800922a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800922e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009232:	e7f7      	b.n	8009224 <memmove+0x24>

08009234 <_sbrk_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d06      	ldr	r5, [pc, #24]	@ (8009250 <_sbrk_r+0x1c>)
 8009238:	2300      	movs	r3, #0
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	f7f7 fdc2 	bl	8000dc8 <_sbrk>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_sbrk_r+0x1a>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_sbrk_r+0x1a>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20000cec 	.word	0x20000cec

08009254 <_realloc_r>:
 8009254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009258:	4680      	mov	r8, r0
 800925a:	4615      	mov	r5, r2
 800925c:	460c      	mov	r4, r1
 800925e:	b921      	cbnz	r1, 800926a <_realloc_r+0x16>
 8009260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009264:	4611      	mov	r1, r2
 8009266:	f7ff bc59 	b.w	8008b1c <_malloc_r>
 800926a:	b92a      	cbnz	r2, 8009278 <_realloc_r+0x24>
 800926c:	f7ff fbea 	bl	8008a44 <_free_r>
 8009270:	2400      	movs	r4, #0
 8009272:	4620      	mov	r0, r4
 8009274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009278:	f000 f81a 	bl	80092b0 <_malloc_usable_size_r>
 800927c:	4285      	cmp	r5, r0
 800927e:	4606      	mov	r6, r0
 8009280:	d802      	bhi.n	8009288 <_realloc_r+0x34>
 8009282:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009286:	d8f4      	bhi.n	8009272 <_realloc_r+0x1e>
 8009288:	4629      	mov	r1, r5
 800928a:	4640      	mov	r0, r8
 800928c:	f7ff fc46 	bl	8008b1c <_malloc_r>
 8009290:	4607      	mov	r7, r0
 8009292:	2800      	cmp	r0, #0
 8009294:	d0ec      	beq.n	8009270 <_realloc_r+0x1c>
 8009296:	42b5      	cmp	r5, r6
 8009298:	462a      	mov	r2, r5
 800929a:	4621      	mov	r1, r4
 800929c:	bf28      	it	cs
 800929e:	4632      	movcs	r2, r6
 80092a0:	f7ff fbc2 	bl	8008a28 <memcpy>
 80092a4:	4621      	mov	r1, r4
 80092a6:	4640      	mov	r0, r8
 80092a8:	f7ff fbcc 	bl	8008a44 <_free_r>
 80092ac:	463c      	mov	r4, r7
 80092ae:	e7e0      	b.n	8009272 <_realloc_r+0x1e>

080092b0 <_malloc_usable_size_r>:
 80092b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092b4:	1f18      	subs	r0, r3, #4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bfbc      	itt	lt
 80092ba:	580b      	ldrlt	r3, [r1, r0]
 80092bc:	18c0      	addlt	r0, r0, r3
 80092be:	4770      	bx	lr

080092c0 <_init>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	bf00      	nop
 80092c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c6:	bc08      	pop	{r3}
 80092c8:	469e      	mov	lr, r3
 80092ca:	4770      	bx	lr

080092cc <_fini>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr
