
FillBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005ea4  08005ea4  00006ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f2c  08005f2c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005f2c  08005f2c  00006f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f34  08005f34  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f34  08005f34  00006f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f38  08005f38  00006f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005f3c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d48  20000010  08005f4c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d58  08005f4c  00007d58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b470  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a1a  00000000  00000000  000224b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00025ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c7  00000000  00000000  00027498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003875  00000000  00000000  0002855f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001927a  00000000  00000000  0002bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc61a  00000000  00000000  0004504e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111668  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b58  00000000  00000000  001116ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00117204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005e8c 	.word	0x08005e8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08005e8c 	.word	0x08005e8c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fb29 	bl	8000b6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f81c 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f914 	bl	8000748 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000520:	f000 f862 	bl	80005e8 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000524:	f000 f8aa 	bl	800067c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000528:	f000 f8e6 	bl	80006f8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052c:	f002 fef0 	bl	8003310 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000530:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <main+0x38>)
 8000532:	2100      	movs	r1, #0
 8000534:	4805      	ldr	r0, [pc, #20]	@ (800054c <main+0x3c>)
 8000536:	f002 ff35 	bl	80033a4 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a04      	ldr	r2, [pc, #16]	@ (8000550 <main+0x40>)
 800053e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f002 ff0a 	bl	8003358 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x34>
 8000548:	08005ec8 	.word	0x08005ec8
 800054c:	08000899 	.word	0x08000899
 8000550:	20000400 	.word	0x20000400

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	@ 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2238      	movs	r2, #56	@ 0x38
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 fc58 	bl	8005e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800057a:	f000 fedd 	bl	8001338 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800057e:	2322      	movs	r3, #34	@ 0x22
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000586:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2340      	movs	r3, #64	@ 0x40
 800058a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0318 	add.w	r3, r7, #24
 8000598:	4618      	mov	r0, r3
 800059a:	f000 ff81 	bl	80014a0 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005a4:	f000 f980 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fa7f 	bl	8001ac4 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005cc:	f000 f96c 	bl	80008a8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 80005d6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80005da:	f001 fbaf 	bl	8001d3c <HAL_RCC_MCOConfig>
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	@ 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005ec:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 80005ee:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <MX_LPUART1_UART_Init+0x8c>)
 80005f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80005f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 80005f4:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <MX_LPUART1_UART_Init+0x90>)
 80005f6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000604:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800060a:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 800060c:	220c      	movs	r2, #12
 800060e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000610:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000628:	4811      	ldr	r0, [pc, #68]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 800062a:	f001 ff94 	bl	8002556 <HAL_UART_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000634:	f000 f938 	bl	80008a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000638:	2100      	movs	r1, #0
 800063a:	480d      	ldr	r0, [pc, #52]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 800063c:	f002 fd30 	bl	80030a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000646:	f000 f92f 	bl	80008a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064a:	2100      	movs	r1, #0
 800064c:	4808      	ldr	r0, [pc, #32]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 800064e:	f002 fd65 	bl	800311c <HAL_UARTEx_SetRxFifoThreshold>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000658:	f000 f926 	bl	80008a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_LPUART1_UART_Init+0x88>)
 800065e:	f002 fce6 	bl	800302e <HAL_UARTEx_DisableFifoMode>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000668:	f000 f91e 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40008000 	.word	0x40008000
 8000678:	00033324 	.word	0x00033324

0800067c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000680:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <MX_SPI1_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <MX_SPI1_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_SPI1_Init+0x74>)
 8000688:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800068c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_SPI1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <MX_SPI1_Init+0x74>)
 8000696:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800069a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_SPI1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_SPI1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a8:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_SPI1_Init+0x74>)
 80006aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_SPI1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_SPI1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_SPI1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <MX_SPI1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_SPI1_Init+0x74>)
 80006ca:	2207      	movs	r2, #7
 80006cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_SPI1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_SPI1_Init+0x74>)
 80006d6:	2208      	movs	r2, #8
 80006d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_SPI1_Init+0x74>)
 80006dc:	f001 fe90 	bl	8002400 <HAL_SPI_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 f8df 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000c0 	.word	0x200000c0
 80006f4:	40013000 	.word	0x40013000

080006f8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006fc:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <MX_USB_PCD_Init+0x48>)
 80006fe:	4a11      	ldr	r2, [pc, #68]	@ (8000744 <MX_USB_PCD_Init+0x4c>)
 8000700:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000702:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_USB_PCD_Init+0x48>)
 8000704:	2208      	movs	r2, #8
 8000706:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000708:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <MX_USB_PCD_Init+0x48>)
 800070a:	2202      	movs	r2, #2
 800070c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_USB_PCD_Init+0x48>)
 8000710:	2202      	movs	r2, #2
 8000712:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <MX_USB_PCD_Init+0x48>)
 8000716:	2200      	movs	r2, #0
 8000718:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_USB_PCD_Init+0x48>)
 800071c:	2200      	movs	r2, #0
 800071e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <MX_USB_PCD_Init+0x48>)
 8000722:	2200      	movs	r2, #0
 8000724:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_USB_PCD_Init+0x48>)
 8000728:	2200      	movs	r2, #0
 800072a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_USB_PCD_Init+0x48>)
 800072e:	f000 fd0b 	bl	8001148 <HAL_PCD_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000738:	f000 f8b6 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000124 	.word	0x20000124
 8000744:	40005c00 	.word	0x40005c00

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b4c      	ldr	r3, [pc, #304]	@ (8000890 <MX_GPIO_Init+0x148>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a4b      	ldr	r2, [pc, #300]	@ (8000890 <MX_GPIO_Init+0x148>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4b49      	ldr	r3, [pc, #292]	@ (8000890 <MX_GPIO_Init+0x148>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b46      	ldr	r3, [pc, #280]	@ (8000890 <MX_GPIO_Init+0x148>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a45      	ldr	r2, [pc, #276]	@ (8000890 <MX_GPIO_Init+0x148>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b43      	ldr	r3, [pc, #268]	@ (8000890 <MX_GPIO_Init+0x148>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b40      	ldr	r3, [pc, #256]	@ (8000890 <MX_GPIO_Init+0x148>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a3f      	ldr	r2, [pc, #252]	@ (8000890 <MX_GPIO_Init+0x148>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b3d      	ldr	r3, [pc, #244]	@ (8000890 <MX_GPIO_Init+0x148>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <MX_GPIO_Init+0x148>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a39      	ldr	r2, [pc, #228]	@ (8000890 <MX_GPIO_Init+0x148>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b37      	ldr	r3, [pc, #220]	@ (8000890 <MX_GPIO_Init+0x148>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f240 2103 	movw	r1, #515	@ 0x203
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c8:	f000 fca6 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 80007d2:	4830      	ldr	r0, [pc, #192]	@ (8000894 <MX_GPIO_Init+0x14c>)
 80007d4:	f000 fca0 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9;
 80007d8:	f240 2303 	movw	r3, #515	@ 0x203
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f4:	f000 fb0e 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10;
 80007f8:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000810:	f000 fb00 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000814:	2301      	movs	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000818:	2303      	movs	r3, #3
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	481b      	ldr	r0, [pc, #108]	@ (8000894 <MX_GPIO_Init+0x14c>)
 8000828:	f000 faf4 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800082c:	2302      	movs	r3, #2
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4815      	ldr	r0, [pc, #84]	@ (8000894 <MX_GPIO_Init+0x14c>)
 8000840:	f000 fae8 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 8000844:	f248 03c0 	movw	r3, #32960	@ 0x80c0
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	480d      	ldr	r0, [pc, #52]	@ (8000894 <MX_GPIO_Init+0x14c>)
 800085e:	f000 fad9 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000882:	f000 fac7 	bl	8000e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	@ 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400

08000898 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f002 fe11 	bl	80034c8 <osDelay>
 80008a6:	e7fb      	b.n	80008a0 <StartDefaultTask+0x8>

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <Error_Handler+0x8>

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_MspInit+0x50>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008be:	4a11      	ldr	r2, [pc, #68]	@ (8000904 <HAL_MspInit+0x50>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <HAL_MspInit+0x50>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <HAL_MspInit+0x50>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000904 <HAL_MspInit+0x50>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <HAL_MspInit+0x50>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	210f      	movs	r1, #15
 80008ee:	f06f 0001 	mvn.w	r0, #1
 80008f2:	f000 fa68 	bl	8000dc6 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008f6:	f000 fdc3 	bl	8001480 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09e      	sub	sp, #120	@ 0x78
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2250      	movs	r2, #80	@ 0x50
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f005 fa75 	bl	8005e18 <memset>
  if(huart->Instance==LPUART1)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a1f      	ldr	r2, [pc, #124]	@ (80009b0 <HAL_UART_MspInit+0xa8>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d136      	bne.n	80009a6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000938:	2320      	movs	r3, #32
 800093a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fb1f 	bl	8001f88 <HAL_RCCEx_PeriphCLKConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000950:	f7ff ffaa 	bl	80008a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <HAL_UART_MspInit+0xac>)
 8000956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000958:	4a16      	ldr	r2, [pc, #88]	@ (80009b4 <HAL_UART_MspInit+0xac>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_UART_MspInit+0xac>)
 8000962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <HAL_UART_MspInit+0xac>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000970:	4a10      	ldr	r2, [pc, #64]	@ (80009b4 <HAL_UART_MspInit+0xac>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_UART_MspInit+0xac>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000984:	230c      	movs	r3, #12
 8000986:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000994:	230c      	movs	r3, #12
 8000996:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a2:	f000 fa37 	bl	8000e14 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80009a6:	bf00      	nop
 80009a8:	3778      	adds	r7, #120	@ 0x78
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40008000 	.word	0x40008000
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <HAL_SPI_MspInit+0x7c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d128      	bne.n	8000a2c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <HAL_SPI_MspInit+0x80>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009de:	4a16      	ldr	r2, [pc, #88]	@ (8000a38 <HAL_SPI_MspInit+0x80>)
 80009e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <HAL_SPI_MspInit+0x80>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <HAL_SPI_MspInit+0x80>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a10      	ldr	r2, [pc, #64]	@ (8000a38 <HAL_SPI_MspInit+0x80>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <HAL_SPI_MspInit+0x80>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a0a:	23e0      	movs	r3, #224	@ 0xe0
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a28:	f000 f9f4 	bl	8000e14 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	@ 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40013000 	.word	0x40013000
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b098      	sub	sp, #96	@ 0x60
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	2250      	movs	r2, #80	@ 0x50
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 f9e3 	bl	8005e18 <memset>
  if(hpcd->Instance==USB)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a11      	ldr	r2, [pc, #68]	@ (8000a9c <HAL_PCD_MspInit+0x60>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d11a      	bne.n	8000a92 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a62:	2300      	movs	r3, #0
 8000a64:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 fa8c 	bl	8001f88 <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8000a76:	f7ff ff17 	bl	80008a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <HAL_PCD_MspInit+0x64>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7e:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <HAL_PCD_MspInit+0x64>)
 8000a80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_PCD_MspInit+0x64>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000a92:	bf00      	nop
 8000a94:	3760      	adds	r7, #96	@ 0x60
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40005c00 	.word	0x40005c00
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f897 	bl	8000c10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ae2:	f004 f919 	bl	8004d18 <xTaskGetSchedulerState>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d001      	beq.n	8000af0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000aec:	f004 ff14 	bl	8005918 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b18:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f7ff ffea 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	@ (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	@ (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f005 f96f 	bl	8005e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4a:	f7ff fce1 	bl	8000510 <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   r0, =_estack
 8000b50:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b5c:	08005f3c 	.word	0x08005f3c
  ldr r2, =_sbss
 8000b60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b64:	20001d58 	.word	0x20001d58

08000b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_2_IRQHandler>

08000b6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f91b 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f000 f80e 	bl	8000b9c <HAL_InitTick>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	e001      	b.n	8000b90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b8c:	f7ff fe92 	bl	80008b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b90:	79fb      	ldrb	r3, [r7, #7]

}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ba8:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <HAL_InitTick+0x68>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d022      	beq.n	8000bf6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <HAL_InitTick+0x6c>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <HAL_InitTick+0x68>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f918 	bl	8000dfa <HAL_SYSTICK_Config>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10f      	bne.n	8000bf0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b0f      	cmp	r3, #15
 8000bd4:	d809      	bhi.n	8000bea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	f04f 30ff 	mov.w	r0, #4294967295
 8000bde:	f000 f8f2 	bl	8000dc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_InitTick+0x70>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	e007      	b.n	8000bfa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e004      	b.n	8000bfa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e001      	b.n	8000bfa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <HAL_IncTick+0x1c>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a03      	ldr	r2, [pc, #12]	@ (8000c2c <HAL_IncTick+0x1c>)
 8000c20:	6013      	str	r3, [r2, #0]
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	20000404 	.word	0x20000404
 8000c30:	20000008 	.word	0x20000008

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000404 	.word	0x20000404

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	@ (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	@ (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	@ 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff47 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff5e 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff90 	bl	8000d04 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5f 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffb2 	bl	8000d6c <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e22:	e15a      	b.n	80010da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 814c 	beq.w	80010d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d005      	beq.n	8000e54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d130      	bne.n	8000eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	f003 0201 	and.w	r2, r3, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d017      	beq.n	8000ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d123      	bne.n	8000f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	6939      	ldr	r1, [r7, #16]
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0203 	and.w	r2, r3, #3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80a6 	beq.w	80010d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	4b5b      	ldr	r3, [pc, #364]	@ (80010f8 <HAL_GPIO_Init+0x2e4>)
 8000f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8c:	4a5a      	ldr	r2, [pc, #360]	@ (80010f8 <HAL_GPIO_Init+0x2e4>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f94:	4b58      	ldr	r3, [pc, #352]	@ (80010f8 <HAL_GPIO_Init+0x2e4>)
 8000f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa0:	4a56      	ldr	r2, [pc, #344]	@ (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fca:	d01f      	beq.n	800100c <HAL_GPIO_Init+0x1f8>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a4c      	ldr	r2, [pc, #304]	@ (8001100 <HAL_GPIO_Init+0x2ec>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d019      	beq.n	8001008 <HAL_GPIO_Init+0x1f4>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4b      	ldr	r2, [pc, #300]	@ (8001104 <HAL_GPIO_Init+0x2f0>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d013      	beq.n	8001004 <HAL_GPIO_Init+0x1f0>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4a      	ldr	r2, [pc, #296]	@ (8001108 <HAL_GPIO_Init+0x2f4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d00d      	beq.n	8001000 <HAL_GPIO_Init+0x1ec>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a49      	ldr	r2, [pc, #292]	@ (800110c <HAL_GPIO_Init+0x2f8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d007      	beq.n	8000ffc <HAL_GPIO_Init+0x1e8>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a48      	ldr	r2, [pc, #288]	@ (8001110 <HAL_GPIO_Init+0x2fc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d101      	bne.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	e00a      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	e008      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 8001000:	2303      	movs	r3, #3
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 8001004:	2302      	movs	r3, #2
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 800100c:	2300      	movs	r3, #0
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800101e:	4937      	ldr	r1, [pc, #220]	@ (80010fc <HAL_GPIO_Init+0x2e8>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102c:	4b39      	ldr	r3, [pc, #228]	@ (8001114 <HAL_GPIO_Init+0x300>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001050:	4a30      	ldr	r2, [pc, #192]	@ (8001114 <HAL_GPIO_Init+0x300>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001056:	4b2f      	ldr	r3, [pc, #188]	@ (8001114 <HAL_GPIO_Init+0x300>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107a:	4a26      	ldr	r2, [pc, #152]	@ (8001114 <HAL_GPIO_Init+0x300>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001080:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <HAL_GPIO_Init+0x300>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001114 <HAL_GPIO_Init+0x300>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <HAL_GPIO_Init+0x300>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ce:	4a11      	ldr	r2, [pc, #68]	@ (8001114 <HAL_GPIO_Init+0x300>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f ae9d 	bne.w	8000e24 <HAL_GPIO_Init+0x10>
  }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800
 8001108:	48000c00 	.word	0x48000c00
 800110c:	48001000 	.word	0x48001000
 8001110:	48001400 	.word	0x48001400
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001134:	e002      	b.n	800113c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e0c0      	b.n	80012dc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fc64 	bl	8000a3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2203      	movs	r2, #3
 8001178:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f002 f857 	bl	8003234 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e03e      	b.n	800120a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	3311      	adds	r3, #17
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	440b      	add	r3, r1
 80011ae:	3310      	adds	r3, #16
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	440b      	add	r3, r1
 80011c2:	3313      	adds	r3, #19
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	440b      	add	r3, r1
 80011d6:	3320      	adds	r3, #32
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	440b      	add	r3, r1
 80011ea:	3324      	adds	r3, #36	@ 0x24
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	440b      	add	r3, r1
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	3301      	adds	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	791b      	ldrb	r3, [r3, #4]
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	429a      	cmp	r2, r3
 8001212:	d3bb      	bcc.n	800118c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e044      	b.n	80012a4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	440b      	add	r3, r1
 8001254:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	440b      	add	r3, r1
 800126a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	440b      	add	r3, r1
 8001280:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	3301      	adds	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d3b5      	bcc.n	800121a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3304      	adds	r3, #4
 80012b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80012ba:	f001 ffd6 	bl	800326a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7a9b      	ldrb	r3, [r3, #10]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d102      	bne.n	80012da <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f805 	bl	80012e4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001308:	b29b      	uxth	r3, r3
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800131c:	b29b      	uxth	r3, r3
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	b29a      	uxth	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d141      	bne.n	80013ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001346:	4b4b      	ldr	r3, [pc, #300]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800134e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001352:	d131      	bne.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001354:	4b47      	ldr	r3, [pc, #284]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135a:	4a46      	ldr	r2, [pc, #280]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001360:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001364:	4b43      	ldr	r3, [pc, #268]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800136c:	4a41      	ldr	r2, [pc, #260]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001372:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001374:	4b40      	ldr	r3, [pc, #256]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2232      	movs	r2, #50	@ 0x32
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	4a3f      	ldr	r2, [pc, #252]	@ (800147c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	0c9b      	lsrs	r3, r3, #18
 8001386:	3301      	adds	r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138a:	e002      	b.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3b01      	subs	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001392:	4b38      	ldr	r3, [pc, #224]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800139e:	d102      	bne.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f2      	bne.n	800138c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a6:	4b33      	ldr	r3, [pc, #204]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b2:	d158      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e057      	b.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013be:	4a2d      	ldr	r2, [pc, #180]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013c8:	e04d      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013d0:	d141      	bne.n	8001456 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013d2:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013de:	d131      	bne.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e0:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e6:	4a23      	ldr	r2, [pc, #140]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2232      	movs	r2, #50	@ 0x32
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	4a1c      	ldr	r2, [pc, #112]	@ (800147c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	0c9b      	lsrs	r3, r3, #18
 8001412:	3301      	adds	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001416:	e002      	b.n	800141e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3b01      	subs	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800142a:	d102      	bne.n	8001432 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f2      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800143e:	d112      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e011      	b.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800144a:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001450:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001454:	e007      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001456:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001460:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001464:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40007000 	.word	0x40007000
 8001478:	20000000 	.word	0x20000000
 800147c:	431bde83 	.word	0x431bde83

08001480 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4a04      	ldr	r2, [pc, #16]	@ (800149c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148e:	6093      	str	r3, [r2, #8]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40007000 	.word	0x40007000

080014a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e2fe      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d075      	beq.n	80015aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014be:	4b97      	ldr	r3, [pc, #604]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c8:	4b94      	ldr	r3, [pc, #592]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	d102      	bne.n	80014de <HAL_RCC_OscConfig+0x3e>
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d002      	beq.n	80014e4 <HAL_RCC_OscConfig+0x44>
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d10b      	bne.n	80014fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	4b8d      	ldr	r3, [pc, #564]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d05b      	beq.n	80015a8 <HAL_RCC_OscConfig+0x108>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d157      	bne.n	80015a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e2d9      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001504:	d106      	bne.n	8001514 <HAL_RCC_OscConfig+0x74>
 8001506:	4b85      	ldr	r3, [pc, #532]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a84      	ldr	r2, [pc, #528]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e01d      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x98>
 800151e:	4b7f      	ldr	r3, [pc, #508]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a7e      	ldr	r2, [pc, #504]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b7c      	ldr	r3, [pc, #496]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a7b      	ldr	r2, [pc, #492]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001538:	4b78      	ldr	r3, [pc, #480]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a77      	ldr	r2, [pc, #476]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b75      	ldr	r3, [pc, #468]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a74      	ldr	r2, [pc, #464]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fb6c 	bl	8000c34 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fb68 	bl	8000c34 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e29e      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	4b6a      	ldr	r3, [pc, #424]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0xc0>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fb58 	bl	8000c34 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fb54 	bl	8000c34 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e28a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	4b60      	ldr	r3, [pc, #384]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0xe8>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d075      	beq.n	80016a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b6:	4b59      	ldr	r3, [pc, #356]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c0:	4b56      	ldr	r3, [pc, #344]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b0c      	cmp	r3, #12
 80015ce:	d102      	bne.n	80015d6 <HAL_RCC_OscConfig+0x136>
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d002      	beq.n	80015dc <HAL_RCC_OscConfig+0x13c>
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d11f      	bne.n	800161c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015dc:	4b4f      	ldr	r3, [pc, #316]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x154>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e25d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b49      	ldr	r3, [pc, #292]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	061b      	lsls	r3, r3, #24
 8001602:	4946      	ldr	r1, [pc, #280]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001608:	4b45      	ldr	r3, [pc, #276]	@ (8001720 <HAL_RCC_OscConfig+0x280>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fac5 	bl	8000b9c <HAL_InitTick>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d043      	beq.n	80016a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e249      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d023      	beq.n	800166c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b3d      	ldr	r3, [pc, #244]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a3c      	ldr	r2, [pc, #240]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fb00 	bl	8000c34 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff fafc 	bl	8000c34 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e232      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164a:	4b34      	ldr	r3, [pc, #208]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001656:	4b31      	ldr	r3, [pc, #196]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	061b      	lsls	r3, r3, #24
 8001664:	492d      	ldr	r1, [pc, #180]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
 800166a:	e01a      	b.n	80016a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166c:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2a      	ldr	r2, [pc, #168]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001672:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fadc 	bl	8000c34 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff fad8 	bl	8000c34 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e20e      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001692:	4b22      	ldr	r3, [pc, #136]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x1e0>
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d041      	beq.n	8001732 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d01c      	beq.n	80016f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016bc:	4a17      	ldr	r2, [pc, #92]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c6:	f7ff fab5 	bl	8000c34 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fab1 	bl	8000c34 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1e7      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e0:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80016e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0ef      	beq.n	80016ce <HAL_RCC_OscConfig+0x22e>
 80016ee:	e020      	b.n	8001732 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f0:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f6:	4a09      	ldr	r2, [pc, #36]	@ (800171c <HAL_RCC_OscConfig+0x27c>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff fa98 	bl	8000c34 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001706:	e00d      	b.n	8001724 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fa94 	bl	8000c34 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d906      	bls.n	8001724 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1ca      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001724:	4b8c      	ldr	r3, [pc, #560]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ea      	bne.n	8001708 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80a6 	beq.w	800188c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001744:	4b84      	ldr	r3, [pc, #528]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x2b4>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x2b6>
 8001754:	2300      	movs	r3, #0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00d      	beq.n	8001776 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b7f      	ldr	r3, [pc, #508]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	4a7e      	ldr	r2, [pc, #504]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001764:	6593      	str	r3, [r2, #88]	@ 0x58
 8001766:	4b7c      	ldr	r3, [pc, #496]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001772:	2301      	movs	r3, #1
 8001774:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001776:	4b79      	ldr	r3, [pc, #484]	@ (800195c <HAL_RCC_OscConfig+0x4bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177e:	2b00      	cmp	r3, #0
 8001780:	d118      	bne.n	80017b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001782:	4b76      	ldr	r3, [pc, #472]	@ (800195c <HAL_RCC_OscConfig+0x4bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a75      	ldr	r2, [pc, #468]	@ (800195c <HAL_RCC_OscConfig+0x4bc>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178e:	f7ff fa51 	bl	8000c34 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001796:	f7ff fa4d 	bl	8000c34 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e183      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a8:	4b6c      	ldr	r3, [pc, #432]	@ (800195c <HAL_RCC_OscConfig+0x4bc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d108      	bne.n	80017ce <HAL_RCC_OscConfig+0x32e>
 80017bc:	4b66      	ldr	r3, [pc, #408]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80017be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c2:	4a65      	ldr	r2, [pc, #404]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017cc:	e024      	b.n	8001818 <HAL_RCC_OscConfig+0x378>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d110      	bne.n	80017f8 <HAL_RCC_OscConfig+0x358>
 80017d6:	4b60      	ldr	r3, [pc, #384]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80017d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017dc:	4a5e      	ldr	r2, [pc, #376]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017f6:	e00f      	b.n	8001818 <HAL_RCC_OscConfig+0x378>
 80017f8:	4b57      	ldr	r3, [pc, #348]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fe:	4a56      	ldr	r2, [pc, #344]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001808:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180e:	4a52      	ldr	r2, [pc, #328]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d016      	beq.n	800184e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fa08 	bl	8000c34 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff fa04 	bl	8000c34 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e138      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183e:	4b46      	ldr	r3, [pc, #280]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ed      	beq.n	8001828 <HAL_RCC_OscConfig+0x388>
 800184c:	e015      	b.n	800187a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff f9f1 	bl	8000c34 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff f9ed 	bl	8000c34 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e121      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800186c:	4b3a      	ldr	r3, [pc, #232]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ed      	bne.n	8001856 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800187a:	7ffb      	ldrb	r3, [r7, #31]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4b35      	ldr	r3, [pc, #212]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001884:	4a34      	ldr	r2, [pc, #208]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800188a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	2b00      	cmp	r3, #0
 8001896:	d03c      	beq.n	8001912 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01c      	beq.n	80018da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80018a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff f9c0 	bl	8000c34 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018b8:	f7ff f9bc 	bl	8000c34 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e0f2      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ca:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80018cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ef      	beq.n	80018b8 <HAL_RCC_OscConfig+0x418>
 80018d8:	e01b      	b.n	8001912 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018da:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80018dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff f9a3 	bl	8000c34 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f2:	f7ff f99f 	bl	8000c34 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0d5      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001904:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001906:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ef      	bne.n	80018f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80c9 	beq.w	8001aae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b0c      	cmp	r3, #12
 8001926:	f000 8083 	beq.w	8001a30 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d15e      	bne.n	80019f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a08      	ldr	r2, [pc, #32]	@ (8001958 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800193c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff f979 	bl	8000c34 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001944:	e00c      	b.n	8001960 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001946:	f7ff f975 	bl	8000c34 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d905      	bls.n	8001960 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e0ab      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
 8001958:	40021000 	.word	0x40021000
 800195c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001960:	4b55      	ldr	r3, [pc, #340]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ec      	bne.n	8001946 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196c:	4b52      	ldr	r3, [pc, #328]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4b52      	ldr	r3, [pc, #328]	@ (8001abc <HAL_RCC_OscConfig+0x61c>)
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6a11      	ldr	r1, [r2, #32]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800197c:	3a01      	subs	r2, #1
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	4311      	orrs	r1, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001986:	0212      	lsls	r2, r2, #8
 8001988:	4311      	orrs	r1, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800198e:	0852      	lsrs	r2, r2, #1
 8001990:	3a01      	subs	r2, #1
 8001992:	0552      	lsls	r2, r2, #21
 8001994:	4311      	orrs	r1, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800199a:	0852      	lsrs	r2, r2, #1
 800199c:	3a01      	subs	r2, #1
 800199e:	0652      	lsls	r2, r2, #25
 80019a0:	4311      	orrs	r1, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019a6:	06d2      	lsls	r2, r2, #27
 80019a8:	430a      	orrs	r2, r1
 80019aa:	4943      	ldr	r1, [pc, #268]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b0:	4b41      	ldr	r3, [pc, #260]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a40      	ldr	r2, [pc, #256]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019bc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f934 	bl	8000c34 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f930 	bl	8000c34 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e066      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x530>
 80019ee:	e05e      	b.n	8001aae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f0:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a30      	ldr	r2, [pc, #192]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 80019f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff f91a 	bl	8000c34 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff f916 	bl	8000c34 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e04c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a16:	4b28      	ldr	r3, [pc, #160]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a22:	4b25      	ldr	r3, [pc, #148]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	4924      	ldr	r1, [pc, #144]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 8001a28:	4b25      	ldr	r3, [pc, #148]	@ (8001ac0 <HAL_RCC_OscConfig+0x620>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	60cb      	str	r3, [r1, #12]
 8001a2e:	e03e      	b.n	8001aae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e039      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <HAL_RCC_OscConfig+0x618>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0203 	and.w	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d12c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d123      	bne.n	8001aaa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d11b      	bne.n	8001aaa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d113      	bne.n	8001aaa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d109      	bne.n	8001aaa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa0:	085b      	lsrs	r3, r3, #1
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	019f800c 	.word	0x019f800c
 8001ac0:	feeefffc 	.word	0xfeeefffc

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e11e      	b.n	8001d1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b91      	ldr	r3, [pc, #580]	@ (8001d24 <HAL_RCC_ClockConfig+0x260>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d910      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b8e      	ldr	r3, [pc, #568]	@ (8001d24 <HAL_RCC_ClockConfig+0x260>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 020f 	bic.w	r2, r3, #15
 8001af2:	498c      	ldr	r1, [pc, #560]	@ (8001d24 <HAL_RCC_ClockConfig+0x260>)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b8a      	ldr	r3, [pc, #552]	@ (8001d24 <HAL_RCC_ClockConfig+0x260>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e106      	b.n	8001d1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d073      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d129      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b20:	4b81      	ldr	r3, [pc, #516]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0f4      	b.n	8001d1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b30:	f000 f9e4 	bl	8001efc <RCC_GetSysClockFreqFromPLLSource>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4a7c      	ldr	r2, [pc, #496]	@ (8001d2c <HAL_RCC_ClockConfig+0x268>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d93f      	bls.n	8001bbe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b3e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d033      	beq.n	8001bbe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d12f      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b5e:	4b72      	ldr	r3, [pc, #456]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b66:	4a70      	ldr	r2, [pc, #448]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e024      	b.n	8001bbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0c6      	b.n	8001d1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8c:	4b66      	ldr	r3, [pc, #408]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0be      	b.n	8001d1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b9c:	f000 f914 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4a61      	ldr	r2, [pc, #388]	@ (8001d2c <HAL_RCC_ClockConfig+0x268>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d909      	bls.n	8001bbe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001baa:	4b5f      	ldr	r3, [pc, #380]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bb2:	4a5d      	ldr	r2, [pc, #372]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bba:	2380      	movs	r3, #128	@ 0x80
 8001bbc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b5a      	ldr	r3, [pc, #360]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4957      	ldr	r1, [pc, #348]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd0:	f7ff f830 	bl	8000c34 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff f82c 	bl	8000c34 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e095      	b.n	8001d1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b4e      	ldr	r3, [pc, #312]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d023      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c18:	4b43      	ldr	r3, [pc, #268]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a42      	ldr	r2, [pc, #264]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001c1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c30:	4b3d      	ldr	r3, [pc, #244]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c38:	4a3b      	ldr	r2, [pc, #236]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001c3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b39      	ldr	r3, [pc, #228]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4936      	ldr	r1, [pc, #216]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b80      	cmp	r3, #128	@ 0x80
 8001c58:	d105      	bne.n	8001c66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c5a:	4b33      	ldr	r3, [pc, #204]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4a32      	ldr	r2, [pc, #200]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001c60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c66:	4b2f      	ldr	r3, [pc, #188]	@ (8001d24 <HAL_RCC_ClockConfig+0x260>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d21d      	bcs.n	8001cb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c74:	4b2b      	ldr	r3, [pc, #172]	@ (8001d24 <HAL_RCC_ClockConfig+0x260>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 020f 	bic.w	r2, r3, #15
 8001c7c:	4929      	ldr	r1, [pc, #164]	@ (8001d24 <HAL_RCC_ClockConfig+0x260>)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c84:	f7fe ffd6 	bl	8000c34 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7fe ffd2 	bl	8000c34 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e03b      	b.n	8001d1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_RCC_ClockConfig+0x260>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1ed      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4917      	ldr	r1, [pc, #92]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cda:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	490f      	ldr	r1, [pc, #60]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cee:	f000 f86b 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <HAL_RCC_ClockConfig+0x264>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	490c      	ldr	r1, [pc, #48]	@ (8001d30 <HAL_RCC_ClockConfig+0x26c>)
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <HAL_RCC_ClockConfig+0x270>)
 8001d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <HAL_RCC_ClockConfig+0x274>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe ff42 	bl	8000b9c <HAL_InitTick>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	04c4b400 	.word	0x04c4b400
 8001d30:	08005eec 	.word	0x08005eec
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	@ 0x30
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	0c1b      	lsrs	r3, r3, #16
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8001d68:	029b      	lsls	r3, r3, #10
 8001d6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	0c1b      	lsrs	r3, r3, #16
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8001d76:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <HAL_RCC_MCOConfig+0x88>)
 8001d78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	4910      	ldr	r1, [pc, #64]	@ (8001dc4 <HAL_RCC_MCOConfig+0x88>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	0d1b      	lsrs	r3, r3, #20
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d9e:	f7ff f839 	bl	8000e14 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8001da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d109      	bne.n	8001dbc <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_RCC_MCOConfig+0x88>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	4903      	ldr	r1, [pc, #12]	@ (8001dc4 <HAL_RCC_MCOConfig+0x88>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3730      	adds	r7, #48	@ 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dce:	4b2c      	ldr	r3, [pc, #176]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dda:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	e047      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001de0:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dec:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	e03e      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001df2:	4b23      	ldr	r3, [pc, #140]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d136      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3301      	adds	r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d10c      	bne.n	8001e36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	4a16      	ldr	r2, [pc, #88]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e26:	68d2      	ldr	r2, [r2, #12]
 8001e28:	0a12      	lsrs	r2, r2, #8
 8001e2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
      break;
 8001e34:	e00c      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e36:	4a13      	ldr	r2, [pc, #76]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4a10      	ldr	r2, [pc, #64]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e40:	68d2      	ldr	r2, [r2, #12]
 8001e42:	0a12      	lsrs	r2, r2, #8
 8001e44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
      break;
 8001e4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0e5b      	lsrs	r3, r3, #25
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	e001      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e70:	693b      	ldr	r3, [r7, #16]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	00f42400 	.word	0x00f42400
 8001e88:	007a1200 	.word	0x007a1200

08001e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ea8:	f7ff fff0 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4904      	ldr	r1, [pc, #16]	@ (8001ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08005efc 	.word	0x08005efc

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ed4:	f7ff ffda 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0adb      	lsrs	r3, r3, #11
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4904      	ldr	r1, [pc, #16]	@ (8001ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08005efc 	.word	0x08005efc

08001efc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f02:	4b1e      	ldr	r3, [pc, #120]	@ (8001f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3301      	adds	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d10c      	bne.n	8001f3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f20:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	4a14      	ldr	r2, [pc, #80]	@ (8001f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f2a:	68d2      	ldr	r2, [r2, #12]
 8001f2c:	0a12      	lsrs	r2, r2, #8
 8001f2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
    break;
 8001f38:	e00c      	b.n	8001f54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f3a:	4a12      	ldr	r2, [pc, #72]	@ (8001f84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4a0e      	ldr	r2, [pc, #56]	@ (8001f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f44:	68d2      	ldr	r2, [r2, #12]
 8001f46:	0a12      	lsrs	r2, r2, #8
 8001f48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
    break;
 8001f52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0e5b      	lsrs	r3, r3, #25
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f6e:	687b      	ldr	r3, [r7, #4]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	007a1200 	.word	0x007a1200
 8001f84:	00f42400 	.word	0x00f42400

08001f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f90:	2300      	movs	r3, #0
 8001f92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f94:	2300      	movs	r3, #0
 8001f96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8098 	beq.w	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001faa:	4b43      	ldr	r3, [pc, #268]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	4b40      	ldr	r3, [pc, #256]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	4a3f      	ldr	r2, [pc, #252]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a39      	ldr	r2, [pc, #228]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fde:	f7fe fe29 	bl	8000c34 <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fe4:	e009      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe6:	f7fe fe25 	bl	8000c34 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d902      	bls.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	74fb      	strb	r3, [r7, #19]
        break;
 8001ff8:	e005      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ffa:	4b30      	ldr	r3, [pc, #192]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0ef      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d159      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800200c:	4b2a      	ldr	r3, [pc, #168]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002016:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01e      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	429a      	cmp	r2, r3
 8002026:	d019      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002028:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002032:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	4a1f      	ldr	r2, [pc, #124]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002044:	4b1c      	ldr	r3, [pc, #112]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204a:	4a1b      	ldr	r2, [pc, #108]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002054:	4a18      	ldr	r2, [pc, #96]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7fe fde5 	bl	8000c34 <HAL_GetTick>
 800206a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206c:	e00b      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe fde1 	bl	8000c34 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d902      	bls.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	74fb      	strb	r3, [r7, #19]
            break;
 8002084:	e006      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ec      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a8:	4903      	ldr	r1, [pc, #12]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020b0:	e008      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	74bb      	strb	r3, [r7, #18]
 80020b6:	e005      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c4:	7c7b      	ldrb	r3, [r7, #17]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d105      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4ba7      	ldr	r3, [pc, #668]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	4aa6      	ldr	r2, [pc, #664]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020e2:	4ba1      	ldr	r3, [pc, #644]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e8:	f023 0203 	bic.w	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	499d      	ldr	r1, [pc, #628]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002104:	4b98      	ldr	r3, [pc, #608]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	f023 020c 	bic.w	r2, r3, #12
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4995      	ldr	r1, [pc, #596]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002126:	4b90      	ldr	r3, [pc, #576]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	498c      	ldr	r1, [pc, #560]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002148:	4b87      	ldr	r3, [pc, #540]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	4984      	ldr	r1, [pc, #528]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800216a:	4b7f      	ldr	r3, [pc, #508]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002170:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	497b      	ldr	r1, [pc, #492]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800218c:	4b76      	ldr	r3, [pc, #472]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002192:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	4973      	ldr	r1, [pc, #460]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	496a      	ldr	r1, [pc, #424]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021d0:	4b65      	ldr	r3, [pc, #404]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4962      	ldr	r1, [pc, #392]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	4959      	ldr	r1, [pc, #356]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002214:	4b54      	ldr	r3, [pc, #336]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	4951      	ldr	r1, [pc, #324]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002232:	2b00      	cmp	r3, #0
 8002234:	d015      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002236:	4b4c      	ldr	r3, [pc, #304]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	4948      	ldr	r1, [pc, #288]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002254:	d105      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002256:	4b44      	ldr	r3, [pc, #272]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	4a43      	ldr	r2, [pc, #268]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002260:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800226a:	2b00      	cmp	r3, #0
 800226c:	d015      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800226e:	4b3e      	ldr	r3, [pc, #248]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002274:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227c:	493a      	ldr	r1, [pc, #232]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002288:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800228c:	d105      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228e:	4b36      	ldr	r3, [pc, #216]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4a35      	ldr	r2, [pc, #212]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002294:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002298:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d015      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022a6:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b4:	492c      	ldr	r1, [pc, #176]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022c4:	d105      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c6:	4b28      	ldr	r3, [pc, #160]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4a27      	ldr	r2, [pc, #156]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d015      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022de:	4b22      	ldr	r3, [pc, #136]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ec:	491e      	ldr	r1, [pc, #120]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022fc:	d105      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	4a19      	ldr	r2, [pc, #100]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002304:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002308:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d015      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002316:	4b14      	ldr	r3, [pc, #80]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002324:	4910      	ldr	r1, [pc, #64]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002330:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002334:	d105      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002336:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4a0b      	ldr	r2, [pc, #44]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002340:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d018      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800234e:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002354:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	4902      	ldr	r1, [pc, #8]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	e001      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002368:	40021000 	.word	0x40021000
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002372:	d105      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002374:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a20      	ldr	r2, [pc, #128]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d015      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	4918      	ldr	r1, [pc, #96]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023aa:	d105      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023ac:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a12      	ldr	r2, [pc, #72]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d015      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023c4:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d2:	490a      	ldr	r1, [pc, #40]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023e2:	d105      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80023ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e09d      	b.n	800254e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002422:	d009      	beq.n	8002438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
 800242a:	e005      	b.n	8002438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe fab0 	bl	80009b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800246e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002478:	d902      	bls.n	8002480 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e002      	b.n	8002486 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002480:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002484:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800248e:	d007      	beq.n	80024a0 <HAL_SPI_Init+0xa0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002498:	d002      	beq.n	80024a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e2:	ea42 0103 	orr.w	r1, r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	0c1b      	lsrs	r3, r3, #16
 80024fc:	f003 0204 	and.w	r2, r3, #4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800251c:	ea42 0103 	orr.w	r1, r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800253c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e042      	b.n	80025ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe f9c4 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2224      	movs	r2, #36	@ 0x24
 8002584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fb25 	bl	8002bf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f826 	bl	80025f8 <UART_SetConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e01b      	b.n	80025ee <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fba4 	bl	8002d34 <UART_CheckIdleState>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025fc:	b08c      	sub	sp, #48	@ 0x30
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	431a      	orrs	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	431a      	orrs	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	4313      	orrs	r3, r2
 800261e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4baa      	ldr	r3, [pc, #680]	@ (80028d0 <UART_SetConfig+0x2d8>)
 8002628:	4013      	ands	r3, r2
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002630:	430b      	orrs	r3, r1
 8002632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a9f      	ldr	r2, [pc, #636]	@ (80028d4 <UART_SetConfig+0x2dc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d004      	beq.n	8002664 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002660:	4313      	orrs	r3, r2
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800266e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002678:	430b      	orrs	r3, r1
 800267a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002682:	f023 010f 	bic.w	r1, r3, #15
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a90      	ldr	r2, [pc, #576]	@ (80028d8 <UART_SetConfig+0x2e0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d125      	bne.n	80026e8 <UART_SetConfig+0xf0>
 800269c:	4b8f      	ldr	r3, [pc, #572]	@ (80028dc <UART_SetConfig+0x2e4>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d81a      	bhi.n	80026e0 <UART_SetConfig+0xe8>
 80026aa:	a201      	add	r2, pc, #4	@ (adr r2, 80026b0 <UART_SetConfig+0xb8>)
 80026ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b0:	080026c1 	.word	0x080026c1
 80026b4:	080026d1 	.word	0x080026d1
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	080026d9 	.word	0x080026d9
 80026c0:	2301      	movs	r3, #1
 80026c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026c6:	e116      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80026c8:	2302      	movs	r3, #2
 80026ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026ce:	e112      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80026d0:	2304      	movs	r3, #4
 80026d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026d6:	e10e      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80026d8:	2308      	movs	r3, #8
 80026da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026de:	e10a      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80026e0:	2310      	movs	r3, #16
 80026e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026e6:	e106      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a7c      	ldr	r2, [pc, #496]	@ (80028e0 <UART_SetConfig+0x2e8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d138      	bne.n	8002764 <UART_SetConfig+0x16c>
 80026f2:	4b7a      	ldr	r3, [pc, #488]	@ (80028dc <UART_SetConfig+0x2e4>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b0c      	cmp	r3, #12
 80026fe:	d82d      	bhi.n	800275c <UART_SetConfig+0x164>
 8002700:	a201      	add	r2, pc, #4	@ (adr r2, 8002708 <UART_SetConfig+0x110>)
 8002702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002706:	bf00      	nop
 8002708:	0800273d 	.word	0x0800273d
 800270c:	0800275d 	.word	0x0800275d
 8002710:	0800275d 	.word	0x0800275d
 8002714:	0800275d 	.word	0x0800275d
 8002718:	0800274d 	.word	0x0800274d
 800271c:	0800275d 	.word	0x0800275d
 8002720:	0800275d 	.word	0x0800275d
 8002724:	0800275d 	.word	0x0800275d
 8002728:	08002745 	.word	0x08002745
 800272c:	0800275d 	.word	0x0800275d
 8002730:	0800275d 	.word	0x0800275d
 8002734:	0800275d 	.word	0x0800275d
 8002738:	08002755 	.word	0x08002755
 800273c:	2300      	movs	r3, #0
 800273e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002742:	e0d8      	b.n	80028f6 <UART_SetConfig+0x2fe>
 8002744:	2302      	movs	r3, #2
 8002746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800274a:	e0d4      	b.n	80028f6 <UART_SetConfig+0x2fe>
 800274c:	2304      	movs	r3, #4
 800274e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002752:	e0d0      	b.n	80028f6 <UART_SetConfig+0x2fe>
 8002754:	2308      	movs	r3, #8
 8002756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800275a:	e0cc      	b.n	80028f6 <UART_SetConfig+0x2fe>
 800275c:	2310      	movs	r3, #16
 800275e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002762:	e0c8      	b.n	80028f6 <UART_SetConfig+0x2fe>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a5e      	ldr	r2, [pc, #376]	@ (80028e4 <UART_SetConfig+0x2ec>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d125      	bne.n	80027ba <UART_SetConfig+0x1c2>
 800276e:	4b5b      	ldr	r3, [pc, #364]	@ (80028dc <UART_SetConfig+0x2e4>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002774:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002778:	2b30      	cmp	r3, #48	@ 0x30
 800277a:	d016      	beq.n	80027aa <UART_SetConfig+0x1b2>
 800277c:	2b30      	cmp	r3, #48	@ 0x30
 800277e:	d818      	bhi.n	80027b2 <UART_SetConfig+0x1ba>
 8002780:	2b20      	cmp	r3, #32
 8002782:	d00a      	beq.n	800279a <UART_SetConfig+0x1a2>
 8002784:	2b20      	cmp	r3, #32
 8002786:	d814      	bhi.n	80027b2 <UART_SetConfig+0x1ba>
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <UART_SetConfig+0x19a>
 800278c:	2b10      	cmp	r3, #16
 800278e:	d008      	beq.n	80027a2 <UART_SetConfig+0x1aa>
 8002790:	e00f      	b.n	80027b2 <UART_SetConfig+0x1ba>
 8002792:	2300      	movs	r3, #0
 8002794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002798:	e0ad      	b.n	80028f6 <UART_SetConfig+0x2fe>
 800279a:	2302      	movs	r3, #2
 800279c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027a0:	e0a9      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80027a2:	2304      	movs	r3, #4
 80027a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027a8:	e0a5      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80027aa:	2308      	movs	r3, #8
 80027ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027b0:	e0a1      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80027b2:	2310      	movs	r3, #16
 80027b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027b8:	e09d      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a4a      	ldr	r2, [pc, #296]	@ (80028e8 <UART_SetConfig+0x2f0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d125      	bne.n	8002810 <UART_SetConfig+0x218>
 80027c4:	4b45      	ldr	r3, [pc, #276]	@ (80028dc <UART_SetConfig+0x2e4>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80027ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80027d0:	d016      	beq.n	8002800 <UART_SetConfig+0x208>
 80027d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80027d4:	d818      	bhi.n	8002808 <UART_SetConfig+0x210>
 80027d6:	2b80      	cmp	r3, #128	@ 0x80
 80027d8:	d00a      	beq.n	80027f0 <UART_SetConfig+0x1f8>
 80027da:	2b80      	cmp	r3, #128	@ 0x80
 80027dc:	d814      	bhi.n	8002808 <UART_SetConfig+0x210>
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <UART_SetConfig+0x1f0>
 80027e2:	2b40      	cmp	r3, #64	@ 0x40
 80027e4:	d008      	beq.n	80027f8 <UART_SetConfig+0x200>
 80027e6:	e00f      	b.n	8002808 <UART_SetConfig+0x210>
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027ee:	e082      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80027f0:	2302      	movs	r3, #2
 80027f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027f6:	e07e      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80027f8:	2304      	movs	r3, #4
 80027fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027fe:	e07a      	b.n	80028f6 <UART_SetConfig+0x2fe>
 8002800:	2308      	movs	r3, #8
 8002802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002806:	e076      	b.n	80028f6 <UART_SetConfig+0x2fe>
 8002808:	2310      	movs	r3, #16
 800280a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800280e:	e072      	b.n	80028f6 <UART_SetConfig+0x2fe>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a35      	ldr	r2, [pc, #212]	@ (80028ec <UART_SetConfig+0x2f4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d12a      	bne.n	8002870 <UART_SetConfig+0x278>
 800281a:	4b30      	ldr	r3, [pc, #192]	@ (80028dc <UART_SetConfig+0x2e4>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002820:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002828:	d01a      	beq.n	8002860 <UART_SetConfig+0x268>
 800282a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800282e:	d81b      	bhi.n	8002868 <UART_SetConfig+0x270>
 8002830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002834:	d00c      	beq.n	8002850 <UART_SetConfig+0x258>
 8002836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800283a:	d815      	bhi.n	8002868 <UART_SetConfig+0x270>
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <UART_SetConfig+0x250>
 8002840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002844:	d008      	beq.n	8002858 <UART_SetConfig+0x260>
 8002846:	e00f      	b.n	8002868 <UART_SetConfig+0x270>
 8002848:	2300      	movs	r3, #0
 800284a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800284e:	e052      	b.n	80028f6 <UART_SetConfig+0x2fe>
 8002850:	2302      	movs	r3, #2
 8002852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002856:	e04e      	b.n	80028f6 <UART_SetConfig+0x2fe>
 8002858:	2304      	movs	r3, #4
 800285a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800285e:	e04a      	b.n	80028f6 <UART_SetConfig+0x2fe>
 8002860:	2308      	movs	r3, #8
 8002862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002866:	e046      	b.n	80028f6 <UART_SetConfig+0x2fe>
 8002868:	2310      	movs	r3, #16
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800286e:	e042      	b.n	80028f6 <UART_SetConfig+0x2fe>
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a17      	ldr	r2, [pc, #92]	@ (80028d4 <UART_SetConfig+0x2dc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d13a      	bne.n	80028f0 <UART_SetConfig+0x2f8>
 800287a:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <UART_SetConfig+0x2e4>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002880:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002884:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002888:	d01a      	beq.n	80028c0 <UART_SetConfig+0x2c8>
 800288a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800288e:	d81b      	bhi.n	80028c8 <UART_SetConfig+0x2d0>
 8002890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002894:	d00c      	beq.n	80028b0 <UART_SetConfig+0x2b8>
 8002896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800289a:	d815      	bhi.n	80028c8 <UART_SetConfig+0x2d0>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <UART_SetConfig+0x2b0>
 80028a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a4:	d008      	beq.n	80028b8 <UART_SetConfig+0x2c0>
 80028a6:	e00f      	b.n	80028c8 <UART_SetConfig+0x2d0>
 80028a8:	2300      	movs	r3, #0
 80028aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ae:	e022      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80028b0:	2302      	movs	r3, #2
 80028b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028b6:	e01e      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80028b8:	2304      	movs	r3, #4
 80028ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028be:	e01a      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80028c0:	2308      	movs	r3, #8
 80028c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028c6:	e016      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80028c8:	2310      	movs	r3, #16
 80028ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ce:	e012      	b.n	80028f6 <UART_SetConfig+0x2fe>
 80028d0:	cfff69f3 	.word	0xcfff69f3
 80028d4:	40008000 	.word	0x40008000
 80028d8:	40013800 	.word	0x40013800
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40004400 	.word	0x40004400
 80028e4:	40004800 	.word	0x40004800
 80028e8:	40004c00 	.word	0x40004c00
 80028ec:	40005000 	.word	0x40005000
 80028f0:	2310      	movs	r3, #16
 80028f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4aae      	ldr	r2, [pc, #696]	@ (8002bb4 <UART_SetConfig+0x5bc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	f040 8097 	bne.w	8002a30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002906:	2b08      	cmp	r3, #8
 8002908:	d823      	bhi.n	8002952 <UART_SetConfig+0x35a>
 800290a:	a201      	add	r2, pc, #4	@ (adr r2, 8002910 <UART_SetConfig+0x318>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	08002935 	.word	0x08002935
 8002914:	08002953 	.word	0x08002953
 8002918:	0800293d 	.word	0x0800293d
 800291c:	08002953 	.word	0x08002953
 8002920:	08002943 	.word	0x08002943
 8002924:	08002953 	.word	0x08002953
 8002928:	08002953 	.word	0x08002953
 800292c:	08002953 	.word	0x08002953
 8002930:	0800294b 	.word	0x0800294b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002934:	f7ff fab6 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8002938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800293a:	e010      	b.n	800295e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800293c:	4b9e      	ldr	r3, [pc, #632]	@ (8002bb8 <UART_SetConfig+0x5c0>)
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002940:	e00d      	b.n	800295e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002942:	f7ff fa41 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002946:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002948:	e009      	b.n	800295e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800294a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002950:	e005      	b.n	800295e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800295c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8130 	beq.w	8002bc6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	4a94      	ldr	r2, [pc, #592]	@ (8002bbc <UART_SetConfig+0x5c4>)
 800296c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002970:	461a      	mov	r2, r3
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	fbb3 f3f2 	udiv	r3, r3, r2
 8002978:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	429a      	cmp	r2, r3
 8002988:	d305      	bcc.n	8002996 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	429a      	cmp	r2, r3
 8002994:	d903      	bls.n	800299e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800299c:	e113      	b.n	8002bc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	2200      	movs	r2, #0
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	60fa      	str	r2, [r7, #12]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	4a84      	ldr	r2, [pc, #528]	@ (8002bbc <UART_SetConfig+0x5c4>)
 80029ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2200      	movs	r2, #0
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029c0:	f7fd fc2e 	bl	8000220 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	020b      	lsls	r3, r1, #8
 80029d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80029da:	0202      	lsls	r2, r0, #8
 80029dc:	6979      	ldr	r1, [r7, #20]
 80029de:	6849      	ldr	r1, [r1, #4]
 80029e0:	0849      	lsrs	r1, r1, #1
 80029e2:	2000      	movs	r0, #0
 80029e4:	460c      	mov	r4, r1
 80029e6:	4605      	mov	r5, r0
 80029e8:	eb12 0804 	adds.w	r8, r2, r4
 80029ec:	eb43 0905 	adc.w	r9, r3, r5
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	469a      	mov	sl, r3
 80029f8:	4693      	mov	fp, r2
 80029fa:	4652      	mov	r2, sl
 80029fc:	465b      	mov	r3, fp
 80029fe:	4640      	mov	r0, r8
 8002a00:	4649      	mov	r1, r9
 8002a02:	f7fd fc0d 	bl	8000220 <__aeabi_uldivmod>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a14:	d308      	bcc.n	8002a28 <UART_SetConfig+0x430>
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a1c:	d204      	bcs.n	8002a28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6a3a      	ldr	r2, [r7, #32]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	e0ce      	b.n	8002bc6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002a2e:	e0ca      	b.n	8002bc6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a38:	d166      	bne.n	8002b08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d827      	bhi.n	8002a92 <UART_SetConfig+0x49a>
 8002a42:	a201      	add	r2, pc, #4	@ (adr r2, 8002a48 <UART_SetConfig+0x450>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a6d 	.word	0x08002a6d
 8002a4c:	08002a75 	.word	0x08002a75
 8002a50:	08002a7d 	.word	0x08002a7d
 8002a54:	08002a93 	.word	0x08002a93
 8002a58:	08002a83 	.word	0x08002a83
 8002a5c:	08002a93 	.word	0x08002a93
 8002a60:	08002a93 	.word	0x08002a93
 8002a64:	08002a93 	.word	0x08002a93
 8002a68:	08002a8b 	.word	0x08002a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a6c:	f7ff fa1a 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8002a70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a72:	e014      	b.n	8002a9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a74:	f7ff fa2c 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8002a78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a7a:	e010      	b.n	8002a9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a7c:	4b4e      	ldr	r3, [pc, #312]	@ (8002bb8 <UART_SetConfig+0x5c0>)
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a80:	e00d      	b.n	8002a9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a82:	f7ff f9a1 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002a86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a88:	e009      	b.n	8002a9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a90:	e005      	b.n	8002a9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8090 	beq.w	8002bc6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	4a44      	ldr	r2, [pc, #272]	@ (8002bbc <UART_SetConfig+0x5c4>)
 8002aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ab8:	005a      	lsls	r2, r3, #1
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	441a      	add	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	d916      	bls.n	8002b00 <UART_SetConfig+0x508>
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ad8:	d212      	bcs.n	8002b00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	f023 030f 	bic.w	r3, r3, #15
 8002ae2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	8bfb      	ldrh	r3, [r7, #30]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	8bfa      	ldrh	r2, [r7, #30]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	e062      	b.n	8002bc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002b06:	e05e      	b.n	8002bc6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d828      	bhi.n	8002b62 <UART_SetConfig+0x56a>
 8002b10:	a201      	add	r2, pc, #4	@ (adr r2, 8002b18 <UART_SetConfig+0x520>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b3d 	.word	0x08002b3d
 8002b1c:	08002b45 	.word	0x08002b45
 8002b20:	08002b4d 	.word	0x08002b4d
 8002b24:	08002b63 	.word	0x08002b63
 8002b28:	08002b53 	.word	0x08002b53
 8002b2c:	08002b63 	.word	0x08002b63
 8002b30:	08002b63 	.word	0x08002b63
 8002b34:	08002b63 	.word	0x08002b63
 8002b38:	08002b5b 	.word	0x08002b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b3c:	f7ff f9b2 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8002b40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b42:	e014      	b.n	8002b6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b44:	f7ff f9c4 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8002b48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b4a:	e010      	b.n	8002b6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <UART_SetConfig+0x5c0>)
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b50:	e00d      	b.n	8002b6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b52:	f7ff f939 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002b56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b58:	e009      	b.n	8002b6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b60:	e005      	b.n	8002b6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002b6c:	bf00      	nop
    }

    if (pclk != 0U)
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d028      	beq.n	8002bc6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	4a10      	ldr	r2, [pc, #64]	@ (8002bbc <UART_SetConfig+0x5c4>)
 8002b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	441a      	add	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	2b0f      	cmp	r3, #15
 8002b9c:	d910      	bls.n	8002bc0 <UART_SetConfig+0x5c8>
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba4:	d20c      	bcs.n	8002bc0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60da      	str	r2, [r3, #12]
 8002bb0:	e009      	b.n	8002bc6 <UART_SetConfig+0x5ce>
 8002bb2:	bf00      	nop
 8002bb4:	40008000 	.word	0x40008000
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	08005f04 	.word	0x08005f04
      }
      else
      {
        ret = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2200      	movs	r2, #0
 8002be0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002be2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3730      	adds	r7, #48	@ 0x30
 8002bea:	46bd      	mov	sp, r7
 8002bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01a      	beq.n	8002d06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cee:	d10a      	bne.n	8002d06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
  }
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b098      	sub	sp, #96	@ 0x60
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d44:	f7fd ff76 	bl	8000c34 <HAL_GetTick>
 8002d48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d12f      	bne.n	8002db8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d60:	2200      	movs	r2, #0
 8002d62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f88e 	bl	8002e88 <UART_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d022      	beq.n	8002db8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7a:	e853 3f00 	ldrex	r3, [r3]
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d98:	e841 2300 	strex	r3, r2, [r1]
 8002d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e6      	bne.n	8002d72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e063      	b.n	8002e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d149      	bne.n	8002e5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f857 	bl	8002e88 <UART_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d03c      	beq.n	8002e5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	e853 3f00 	ldrex	r3, [r3]
 8002dec:	623b      	str	r3, [r7, #32]
   return(result);
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e6      	bne.n	8002de0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3308      	adds	r3, #8
 8002e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3308      	adds	r3, #8
 8002e30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e32:	61fa      	str	r2, [r7, #28]
 8002e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e5      	bne.n	8002e12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e012      	b.n	8002e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3758      	adds	r7, #88	@ 0x58
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e98:	e04f      	b.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d04b      	beq.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea2:	f7fd fec7 	bl	8000c34 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d302      	bcc.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e04e      	b.n	8002f5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d037      	beq.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b80      	cmp	r3, #128	@ 0x80
 8002ece:	d034      	beq.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b40      	cmp	r3, #64	@ 0x40
 8002ed4:	d031      	beq.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d110      	bne.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2208      	movs	r2, #8
 8002eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f838 	bl	8002f62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e029      	b.n	8002f5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f14:	d111      	bne.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f81e 	bl	8002f62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e00f      	b.n	8002f5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d0a0      	beq.n	8002e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b095      	sub	sp, #84	@ 0x54
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f72:	e853 3f00 	ldrex	r3, [r3]
 8002f76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f88:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e6      	bne.n	8002f6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e3      	bne.n	8002f9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d118      	bne.n	800300e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	e853 3f00 	ldrex	r3, [r3]
 8002fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f023 0310 	bic.w	r3, r3, #16
 8002ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	6979      	ldr	r1, [r7, #20]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	613b      	str	r3, [r7, #16]
   return(result);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e6      	bne.n	8002fdc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003022:	bf00      	nop
 8003024:	3754      	adds	r7, #84	@ 0x54
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_UARTEx_DisableFifoMode+0x16>
 8003040:	2302      	movs	r3, #2
 8003042:	e027      	b.n	8003094 <HAL_UARTEx_DisableFifoMode+0x66>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2224      	movs	r2, #36	@ 0x24
 8003050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003072:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e02d      	b.n	8003114 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	@ 0x24
 80030c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f84f 	bl	8003198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003130:	2302      	movs	r3, #2
 8003132:	e02d      	b.n	8003190 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	@ 0x24
 8003140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f811 	bl	8003198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d108      	bne.n	80031ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80031b8:	e031      	b.n	800321e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80031ba:	2308      	movs	r3, #8
 80031bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80031be:	2308      	movs	r3, #8
 80031c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	0e5b      	lsrs	r3, r3, #25
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	0f5b      	lsrs	r3, r3, #29
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031e2:	7bbb      	ldrb	r3, [r7, #14]
 80031e4:	7b3a      	ldrb	r2, [r7, #12]
 80031e6:	4911      	ldr	r1, [pc, #68]	@ (800322c <UARTEx_SetNbDataToProcess+0x94>)
 80031e8:	5c8a      	ldrb	r2, [r1, r2]
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80031ee:	7b3a      	ldrb	r2, [r7, #12]
 80031f0:	490f      	ldr	r1, [pc, #60]	@ (8003230 <UARTEx_SetNbDataToProcess+0x98>)
 80031f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	7b7a      	ldrb	r2, [r7, #13]
 8003204:	4909      	ldr	r1, [pc, #36]	@ (800322c <UARTEx_SetNbDataToProcess+0x94>)
 8003206:	5c8a      	ldrb	r2, [r1, r2]
 8003208:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800320c:	7b7a      	ldrb	r2, [r7, #13]
 800320e:	4908      	ldr	r1, [pc, #32]	@ (8003230 <UARTEx_SetNbDataToProcess+0x98>)
 8003210:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003212:	fb93 f3f2 	sdiv	r3, r3, r2
 8003216:	b29a      	uxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	08005f1c 	.word	0x08005f1c
 8003230:	08005f24 	.word	0x08005f24

08003234 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800323c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003240:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	b29b      	uxth	r3, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	b29b      	uxth	r3, r3
 8003252:	4013      	ands	r3, r2
 8003254:	b29a      	uxth	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <__NVIC_SetPriority>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	db0a      	blt.n	80032d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	490c      	ldr	r1, [pc, #48]	@ (80032f4 <__NVIC_SetPriority+0x4c>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	0112      	lsls	r2, r2, #4
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	440b      	add	r3, r1
 80032cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80032d0:	e00a      	b.n	80032e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4908      	ldr	r1, [pc, #32]	@ (80032f8 <__NVIC_SetPriority+0x50>)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	3b04      	subs	r3, #4
 80032e0:	0112      	lsls	r2, r2, #4
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	440b      	add	r3, r1
 80032e6:	761a      	strb	r2, [r3, #24]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000e100 	.word	0xe000e100
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003300:	2100      	movs	r1, #0
 8003302:	f06f 0004 	mvn.w	r0, #4
 8003306:	f7ff ffcf 	bl	80032a8 <__NVIC_SetPriority>
#endif
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003316:	f3ef 8305 	mrs	r3, IPSR
 800331a:	603b      	str	r3, [r7, #0]
  return(result);
 800331c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003322:	f06f 0305 	mvn.w	r3, #5
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	e00c      	b.n	8003344 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800332a:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <osKernelInitialize+0x44>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003332:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <osKernelInitialize+0x44>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003338:	2300      	movs	r3, #0
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	e002      	b.n	8003344 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003344:	687b      	ldr	r3, [r7, #4]
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000408 	.word	0x20000408

08003358 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800335e:	f3ef 8305 	mrs	r3, IPSR
 8003362:	603b      	str	r3, [r7, #0]
  return(result);
 8003364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <osKernelStart+0x1a>
    stat = osErrorISR;
 800336a:	f06f 0305 	mvn.w	r3, #5
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e010      	b.n	8003394 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003372:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <osKernelStart+0x48>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d109      	bne.n	800338e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800337a:	f7ff ffbf 	bl	80032fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800337e:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <osKernelStart+0x48>)
 8003380:	2202      	movs	r2, #2
 8003382:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003384:	f001 f87a 	bl	800447c <vTaskStartScheduler>
      stat = osOK;
 8003388:	2300      	movs	r3, #0
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	e002      	b.n	8003394 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
 8003392:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003394:	687b      	ldr	r3, [r7, #4]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000408 	.word	0x20000408

080033a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08e      	sub	sp, #56	@ 0x38
 80033a8:	af04      	add	r7, sp, #16
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033b4:	f3ef 8305 	mrs	r3, IPSR
 80033b8:	617b      	str	r3, [r7, #20]
  return(result);
 80033ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d17e      	bne.n	80034be <osThreadNew+0x11a>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d07b      	beq.n	80034be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80033c6:	2380      	movs	r3, #128	@ 0x80
 80033c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80033ca:	2318      	movs	r3, #24
 80033cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d045      	beq.n	800346a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <osThreadNew+0x48>
        name = attr->name;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <osThreadNew+0x6e>
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b38      	cmp	r3, #56	@ 0x38
 8003404:	d805      	bhi.n	8003412 <osThreadNew+0x6e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <osThreadNew+0x72>
        return (NULL);
 8003412:	2300      	movs	r3, #0
 8003414:	e054      	b.n	80034c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <osThreadNew+0xa8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b5b      	cmp	r3, #91	@ 0x5b
 8003434:	d90a      	bls.n	800344c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <osThreadNew+0xa8>
        mem = 1;
 8003446:	2301      	movs	r3, #1
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e010      	b.n	800346e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10c      	bne.n	800346e <osThreadNew+0xca>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d108      	bne.n	800346e <osThreadNew+0xca>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <osThreadNew+0xca>
          mem = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	e001      	b.n	800346e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d110      	bne.n	8003496 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800347c:	9202      	str	r2, [sp, #8]
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fe1a 	bl	80040c4 <xTaskCreateStatic>
 8003490:	4603      	mov	r3, r0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	e013      	b.n	80034be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d110      	bne.n	80034be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	f107 0310 	add.w	r3, r7, #16
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fe68 	bl	8004184 <xTaskCreate>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <osThreadNew+0x11a>
            hTask = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034be:	693b      	ldr	r3, [r7, #16]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	@ 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d0:	f3ef 8305 	mrs	r3, IPSR
 80034d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80034d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <osDelay+0x1c>
    stat = osErrorISR;
 80034dc:	f06f 0305 	mvn.w	r3, #5
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e007      	b.n	80034f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 ff8e 	bl	8004410 <vTaskDelay>
    }
  }

  return (stat);
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a07      	ldr	r2, [pc, #28]	@ (800352c <vApplicationGetIdleTaskMemory+0x2c>)
 8003510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4a06      	ldr	r2, [pc, #24]	@ (8003530 <vApplicationGetIdleTaskMemory+0x30>)
 8003516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2280      	movs	r2, #128	@ 0x80
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	2000040c 	.word	0x2000040c
 8003530:	20000468 	.word	0x20000468

08003534 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a07      	ldr	r2, [pc, #28]	@ (8003560 <vApplicationGetTimerTaskMemory+0x2c>)
 8003544:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4a06      	ldr	r2, [pc, #24]	@ (8003564 <vApplicationGetTimerTaskMemory+0x30>)
 800354a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	20000668 	.word	0x20000668
 8003564:	200006c4 	.word	0x200006c4

08003568 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f103 0208 	add.w	r2, r3, #8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f04f 32ff 	mov.w	r2, #4294967295
 8003580:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f103 0208 	add.w	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f103 0208 	add.w	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d103      	bne.n	800362a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e00c      	b.n	8003644 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3308      	adds	r3, #8
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	e002      	b.n	8003638 <vListInsert+0x2e>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	d2f6      	bcs.n	8003632 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6892      	ldr	r2, [r2, #8]
 8003692:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6852      	ldr	r2, [r2, #4]
 800369c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d103      	bne.n	80036b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10b      	bne.n	80036fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036f6:	bf00      	nop
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036fc:	f002 f87c 	bl	80057f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003708:	68f9      	ldr	r1, [r7, #12]
 800370a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	441a      	add	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372c:	3b01      	subs	r3, #1
 800372e:	68f9      	ldr	r1, [r7, #12]
 8003730:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	441a      	add	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	22ff      	movs	r2, #255	@ 0xff
 8003740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	22ff      	movs	r2, #255	@ 0xff
 8003748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d114      	bne.n	800377c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01a      	beq.n	8003790 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3310      	adds	r3, #16
 800375e:	4618      	mov	r0, r3
 8003760:	f001 f91a 	bl	8004998 <xTaskRemoveFromEventList>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d012      	beq.n	8003790 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <xQueueGenericReset+0xd0>)
 800376c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	e009      	b.n	8003790 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3310      	adds	r3, #16
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fef1 	bl	8003568 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3324      	adds	r3, #36	@ 0x24
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff feec 	bl	8003568 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003790:	f002 f864 	bl	800585c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	e000ed04 	.word	0xe000ed04

080037a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08e      	sub	sp, #56	@ 0x38
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	e7fd      	b.n	80037cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	e7fd      	b.n	80037ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <xQueueGenericCreateStatic+0x56>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <xQueueGenericCreateStatic+0x5a>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <xQueueGenericCreateStatic+0x5c>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	623b      	str	r3, [r7, #32]
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <xQueueGenericCreateStatic+0x84>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <xQueueGenericCreateStatic+0x88>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <xQueueGenericCreateStatic+0x8a>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	61fb      	str	r3, [r7, #28]
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	e7fd      	b.n	8003846 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800384a:	2350      	movs	r3, #80	@ 0x50
 800384c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b50      	cmp	r3, #80	@ 0x50
 8003852:	d00b      	beq.n	800386c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	61bb      	str	r3, [r7, #24]
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800386c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003880:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f805 	bl	800389e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003896:	4618      	mov	r0, r3
 8003898:	3730      	adds	r7, #48	@ 0x30
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e002      	b.n	80038c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038cc:	2101      	movs	r1, #1
 80038ce:	69b8      	ldr	r0, [r7, #24]
 80038d0:	f7ff fefe 	bl	80036d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08e      	sub	sp, #56	@ 0x38
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038f2:	2300      	movs	r3, #0
 80038f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80038fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10b      	bne.n	8003918 <xQueueGenericSend+0x34>
	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <xQueueGenericSend+0x42>
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <xQueueGenericSend+0x46>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <xQueueGenericSend+0x48>
 800392a:	2300      	movs	r3, #0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <xQueueGenericSend+0x64>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d103      	bne.n	8003956 <xQueueGenericSend+0x72>
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <xQueueGenericSend+0x76>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <xQueueGenericSend+0x78>
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <xQueueGenericSend+0x94>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	623b      	str	r3, [r7, #32]
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003978:	f001 f9ce 	bl	8004d18 <xTaskGetSchedulerState>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <xQueueGenericSend+0xa4>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <xQueueGenericSend+0xa8>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <xQueueGenericSend+0xaa>
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <xQueueGenericSend+0xc6>
	__asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	61fb      	str	r3, [r7, #28]
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	e7fd      	b.n	80039a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039aa:	f001 ff25 	bl	80057f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <xQueueGenericSend+0xdc>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d129      	bne.n	8003a14 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039c6:	f000 fa0f 	bl	8003de8 <prvCopyDataToQueue>
 80039ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	3324      	adds	r3, #36	@ 0x24
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 ffdd 	bl	8004998 <xTaskRemoveFromEventList>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039e4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae4 <xQueueGenericSend+0x200>)
 80039e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	e00a      	b.n	8003a0c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039fc:	4b39      	ldr	r3, [pc, #228]	@ (8003ae4 <xQueueGenericSend+0x200>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a0c:	f001 ff26 	bl	800585c <vPortExitCritical>
				return pdPASS;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e063      	b.n	8003adc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a1a:	f001 ff1f 	bl	800585c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e05c      	b.n	8003adc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 f817 	bl	8004a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a32:	2301      	movs	r3, #1
 8003a34:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a36:	f001 ff11 	bl	800585c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a3a:	f000 fd87 	bl	800454c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a3e:	f001 fedb 	bl	80057f8 <vPortEnterCritical>
 8003a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d103      	bne.n	8003a58 <xQueueGenericSend+0x174>
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a5e:	b25b      	sxtb	r3, r3
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d103      	bne.n	8003a6e <xQueueGenericSend+0x18a>
 8003a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a6e:	f001 fef5 	bl	800585c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a72:	1d3a      	adds	r2, r7, #4
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f001 f806 	bl	8004a8c <xTaskCheckForTimeOut>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d124      	bne.n	8003ad0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a88:	f000 faa6 	bl	8003fd8 <prvIsQueueFull>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d018      	beq.n	8003ac4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a94:	3310      	adds	r3, #16
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 ff2a 	bl	80048f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003aa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aa2:	f000 fa31 	bl	8003f08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003aa6:	f000 fd5f 	bl	8004568 <xTaskResumeAll>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f47f af7c 	bne.w	80039aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <xQueueGenericSend+0x200>)
 8003ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	e772      	b.n	80039aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ac6:	f000 fa1f 	bl	8003f08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aca:	f000 fd4d 	bl	8004568 <xTaskResumeAll>
 8003ace:	e76c      	b.n	80039aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ad2:	f000 fa19 	bl	8003f08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ad6:	f000 fd47 	bl	8004568 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ada:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3738      	adds	r7, #56	@ 0x38
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	e000ed04 	.word	0xe000ed04

08003ae8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b090      	sub	sp, #64	@ 0x40
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b12:	bf00      	nop
 8003b14:	bf00      	nop
 8003b16:	e7fd      	b.n	8003b14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <xQueueGenericSendFromISR+0x3e>
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <xQueueGenericSendFromISR+0x42>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <xQueueGenericSendFromISR+0x44>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10b      	bne.n	8003b48 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b42:	bf00      	nop
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d103      	bne.n	8003b56 <xQueueGenericSendFromISR+0x6e>
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <xQueueGenericSendFromISR+0x72>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <xQueueGenericSendFromISR+0x74>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	623b      	str	r3, [r7, #32]
}
 8003b72:	bf00      	nop
 8003b74:	bf00      	nop
 8003b76:	e7fd      	b.n	8003b74 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b78:	f001 ff1e 	bl	80059b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b7c:	f3ef 8211 	mrs	r2, BASEPRI
 8003b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	61fa      	str	r2, [r7, #28]
 8003b92:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b94:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b96:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <xQueueGenericSendFromISR+0xc2>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d12f      	bne.n	8003c0a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003bc0:	f000 f912 	bl	8003de8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bc4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d112      	bne.n	8003bf4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd8:	3324      	adds	r3, #36	@ 0x24
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fedc 	bl	8004998 <xTaskRemoveFromEventList>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00e      	beq.n	8003c04 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00b      	beq.n	8003c04 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e007      	b.n	8003c04 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	b25a      	sxtb	r2, r3
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003c04:	2301      	movs	r3, #1
 8003c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003c08:	e001      	b.n	8003c0e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c10:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3740      	adds	r7, #64	@ 0x40
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08c      	sub	sp, #48	@ 0x30
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <xQueueReceive+0x32>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	623b      	str	r3, [r7, #32]
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	e7fd      	b.n	8003c52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d103      	bne.n	8003c64 <xQueueReceive+0x40>
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <xQueueReceive+0x44>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <xQueueReceive+0x46>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <xQueueReceive+0x62>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	61fb      	str	r3, [r7, #28]
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	e7fd      	b.n	8003c82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c86:	f001 f847 	bl	8004d18 <xTaskGetSchedulerState>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <xQueueReceive+0x72>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <xQueueReceive+0x76>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <xQueueReceive+0x78>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10b      	bne.n	8003cb8 <xQueueReceive+0x94>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	61bb      	str	r3, [r7, #24]
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cb8:	f001 fd9e 	bl	80057f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01f      	beq.n	8003d08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ccc:	f000 f8f6 	bl	8003ebc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	1e5a      	subs	r2, r3, #1
 8003cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00f      	beq.n	8003d00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce2:	3310      	adds	r3, #16
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fe57 	bl	8004998 <xTaskRemoveFromEventList>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8003de4 <xQueueReceive+0x1c0>)
 8003cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d00:	f001 fdac 	bl	800585c <vPortExitCritical>
				return pdPASS;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e069      	b.n	8003ddc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d0e:	f001 fda5 	bl	800585c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e062      	b.n	8003ddc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d1c:	f107 0310 	add.w	r3, r7, #16
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fe9d 	bl	8004a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d2a:	f001 fd97 	bl	800585c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d2e:	f000 fc0d 	bl	800454c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d32:	f001 fd61 	bl	80057f8 <vPortEnterCritical>
 8003d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d3c:	b25b      	sxtb	r3, r3
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d103      	bne.n	8003d4c <xQueueReceive+0x128>
 8003d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d52:	b25b      	sxtb	r3, r3
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d103      	bne.n	8003d62 <xQueueReceive+0x13e>
 8003d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d62:	f001 fd7b 	bl	800585c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d66:	1d3a      	adds	r2, r7, #4
 8003d68:	f107 0310 	add.w	r3, r7, #16
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fe8c 	bl	8004a8c <xTaskCheckForTimeOut>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d123      	bne.n	8003dc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d7c:	f000 f916 	bl	8003fac <prvIsQueueEmpty>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d017      	beq.n	8003db6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d88:	3324      	adds	r3, #36	@ 0x24
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fdb0 	bl	80048f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d96:	f000 f8b7 	bl	8003f08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d9a:	f000 fbe5 	bl	8004568 <xTaskResumeAll>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d189      	bne.n	8003cb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003da4:	4b0f      	ldr	r3, [pc, #60]	@ (8003de4 <xQueueReceive+0x1c0>)
 8003da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	e780      	b.n	8003cb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003db8:	f000 f8a6 	bl	8003f08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dbc:	f000 fbd4 	bl	8004568 <xTaskResumeAll>
 8003dc0:	e77a      	b.n	8003cb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dc4:	f000 f8a0 	bl	8003f08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dc8:	f000 fbce 	bl	8004568 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dce:	f000 f8ed 	bl	8003fac <prvIsQueueEmpty>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f43f af6f 	beq.w	8003cb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3730      	adds	r7, #48	@ 0x30
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d14d      	bne.n	8003eaa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 ff9e 	bl	8004d54 <xTaskPriorityDisinherit>
 8003e18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	e043      	b.n	8003eaa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d119      	bne.n	8003e5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6858      	ldr	r0, [r3, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	461a      	mov	r2, r3
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	f002 f81c 	bl	8005e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	441a      	add	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d32b      	bcc.n	8003eaa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	e026      	b.n	8003eaa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68d8      	ldr	r0, [r3, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	461a      	mov	r2, r3
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	f002 f802 	bl	8005e70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	425b      	negs	r3, r3
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d207      	bcs.n	8003e98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	425b      	negs	r3, r3
 8003e92:	441a      	add	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d105      	bne.n	8003eaa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003eb2:	697b      	ldr	r3, [r7, #20]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d018      	beq.n	8003f00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	441a      	add	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d303      	bcc.n	8003ef0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68d9      	ldr	r1, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6838      	ldr	r0, [r7, #0]
 8003efc:	f001 ffb8 	bl	8005e70 <memcpy>
	}
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f10:	f001 fc72 	bl	80057f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f1c:	e011      	b.n	8003f42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d012      	beq.n	8003f4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3324      	adds	r3, #36	@ 0x24
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fd34 	bl	8004998 <xTaskRemoveFromEventList>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f36:	f000 fe0d 	bl	8004b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	dce9      	bgt.n	8003f1e <prvUnlockQueue+0x16>
 8003f4a:	e000      	b.n	8003f4e <prvUnlockQueue+0x46>
					break;
 8003f4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	22ff      	movs	r2, #255	@ 0xff
 8003f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003f56:	f001 fc81 	bl	800585c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f5a:	f001 fc4d 	bl	80057f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f66:	e011      	b.n	8003f8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d012      	beq.n	8003f96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3310      	adds	r3, #16
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fd0f 	bl	8004998 <xTaskRemoveFromEventList>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f80:	f000 fde8 	bl	8004b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f84:	7bbb      	ldrb	r3, [r7, #14]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	dce9      	bgt.n	8003f68 <prvUnlockQueue+0x60>
 8003f94:	e000      	b.n	8003f98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	22ff      	movs	r2, #255	@ 0xff
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003fa0:	f001 fc5c 	bl	800585c <vPortExitCritical>
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fb4:	f001 fc20 	bl	80057f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e001      	b.n	8003fca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fca:	f001 fc47 	bl	800585c <vPortExitCritical>

	return xReturn;
 8003fce:	68fb      	ldr	r3, [r7, #12]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fe0:	f001 fc0a 	bl	80057f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d102      	bne.n	8003ff6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e001      	b.n	8003ffa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ffa:	f001 fc2f 	bl	800585c <vPortExitCritical>

	return xReturn;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e014      	b.n	8004042 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004018:	4a0f      	ldr	r2, [pc, #60]	@ (8004058 <vQueueAddToRegistry+0x50>)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004024:	490c      	ldr	r1, [pc, #48]	@ (8004058 <vQueueAddToRegistry+0x50>)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800402e:	4a0a      	ldr	r2, [pc, #40]	@ (8004058 <vQueueAddToRegistry+0x50>)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800403a:	e006      	b.n	800404a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b07      	cmp	r3, #7
 8004046:	d9e7      	bls.n	8004018 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000ac4 	.word	0x20000ac4

0800405c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800406c:	f001 fbc4 	bl	80057f8 <vPortEnterCritical>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004076:	b25b      	sxtb	r3, r3
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d103      	bne.n	8004086 <vQueueWaitForMessageRestricted+0x2a>
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800408c:	b25b      	sxtb	r3, r3
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d103      	bne.n	800409c <vQueueWaitForMessageRestricted+0x40>
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800409c:	f001 fbde 	bl	800585c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	3324      	adds	r3, #36	@ 0x24
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fc45 	bl	8004940 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040b6:	6978      	ldr	r0, [r7, #20]
 80040b8:	f7ff ff26 	bl	8003f08 <prvUnlockQueue>
	}
 80040bc:	bf00      	nop
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08e      	sub	sp, #56	@ 0x38
 80040c8:	af04      	add	r7, sp, #16
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	623b      	str	r3, [r7, #32]
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <xTaskCreateStatic+0x4a>
	__asm volatile
 80040f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	61fb      	str	r3, [r7, #28]
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	e7fd      	b.n	800410a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800410e:	235c      	movs	r3, #92	@ 0x5c
 8004110:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b5c      	cmp	r3, #92	@ 0x5c
 8004116:	d00b      	beq.n	8004130 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	61bb      	str	r3, [r7, #24]
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004130:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01e      	beq.n	8004176 <xTaskCreateStatic+0xb2>
 8004138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01b      	beq.n	8004176 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004150:	2300      	movs	r3, #0
 8004152:	9303      	str	r3, [sp, #12]
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	9302      	str	r3, [sp, #8]
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f850 	bl	800420e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800416e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004170:	f000 f8de 	bl	8004330 <prvAddNewTaskToReadyList>
 8004174:	e001      	b.n	800417a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800417a:	697b      	ldr	r3, [r7, #20]
	}
 800417c:	4618      	mov	r0, r3
 800417e:	3728      	adds	r7, #40	@ 0x28
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08c      	sub	sp, #48	@ 0x30
 8004188:	af04      	add	r7, sp, #16
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4618      	mov	r0, r3
 800419a:	f001 fc4f 	bl	8005a3c <pvPortMalloc>
 800419e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00e      	beq.n	80041c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041a6:	205c      	movs	r0, #92	@ 0x5c
 80041a8:	f001 fc48 	bl	8005a3c <pvPortMalloc>
 80041ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80041ba:	e005      	b.n	80041c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041bc:	6978      	ldr	r0, [r7, #20]
 80041be:	f001 fd0b 	bl	8005bd8 <vPortFree>
 80041c2:	e001      	b.n	80041c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d017      	beq.n	80041fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041d6:	88fa      	ldrh	r2, [r7, #6]
 80041d8:	2300      	movs	r3, #0
 80041da:	9303      	str	r3, [sp, #12]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	9302      	str	r3, [sp, #8]
 80041e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f80e 	bl	800420e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041f2:	69f8      	ldr	r0, [r7, #28]
 80041f4:	f000 f89c 	bl	8004330 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041f8:	2301      	movs	r3, #1
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	e002      	b.n	8004204 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004204:	69bb      	ldr	r3, [r7, #24]
	}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b088      	sub	sp, #32
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	461a      	mov	r2, r3
 8004226:	21a5      	movs	r1, #165	@ 0xa5
 8004228:	f001 fdf6 	bl	8005e18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004236:	3b01      	subs	r3, #1
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f023 0307 	bic.w	r3, r3, #7
 8004244:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	617b      	str	r3, [r7, #20]
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01f      	beq.n	80042ae <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	e012      	b.n	800429a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	7819      	ldrb	r1, [r3, #0]
 800427c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	3334      	adds	r3, #52	@ 0x34
 8004284:	460a      	mov	r2, r1
 8004286:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d006      	beq.n	80042a2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	3301      	adds	r3, #1
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	2b0f      	cmp	r3, #15
 800429e:	d9e9      	bls.n	8004274 <prvInitialiseNewTask+0x66>
 80042a0:	e000      	b.n	80042a4 <prvInitialiseNewTask+0x96>
			{
				break;
 80042a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042ac:	e003      	b.n	80042b6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	2b37      	cmp	r3, #55	@ 0x37
 80042ba:	d901      	bls.n	80042c0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042bc:	2337      	movs	r3, #55	@ 0x37
 80042be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042ca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ce:	2200      	movs	r2, #0
 80042d0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	3304      	adds	r3, #4
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff f966 	bl	80035a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	3318      	adds	r3, #24
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff f961 	bl	80035a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80042f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	2200      	movs	r2, #0
 8004300:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	68f9      	ldr	r1, [r7, #12]
 800430e:	69b8      	ldr	r0, [r7, #24]
 8004310:	f001 f93e 	bl	8005590 <pxPortInitialiseStack>
 8004314:	4602      	mov	r2, r0
 8004316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004318:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800431a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004326:	bf00      	nop
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004338:	f001 fa5e 	bl	80057f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800433c:	4b2d      	ldr	r3, [pc, #180]	@ (80043f4 <prvAddNewTaskToReadyList+0xc4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3301      	adds	r3, #1
 8004342:	4a2c      	ldr	r2, [pc, #176]	@ (80043f4 <prvAddNewTaskToReadyList+0xc4>)
 8004344:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004346:	4b2c      	ldr	r3, [pc, #176]	@ (80043f8 <prvAddNewTaskToReadyList+0xc8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800434e:	4a2a      	ldr	r2, [pc, #168]	@ (80043f8 <prvAddNewTaskToReadyList+0xc8>)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004354:	4b27      	ldr	r3, [pc, #156]	@ (80043f4 <prvAddNewTaskToReadyList+0xc4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d110      	bne.n	800437e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800435c:	f000 fc1e 	bl	8004b9c <prvInitialiseTaskLists>
 8004360:	e00d      	b.n	800437e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004362:	4b26      	ldr	r3, [pc, #152]	@ (80043fc <prvAddNewTaskToReadyList+0xcc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800436a:	4b23      	ldr	r3, [pc, #140]	@ (80043f8 <prvAddNewTaskToReadyList+0xc8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004374:	429a      	cmp	r2, r3
 8004376:	d802      	bhi.n	800437e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004378:	4a1f      	ldr	r2, [pc, #124]	@ (80043f8 <prvAddNewTaskToReadyList+0xc8>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800437e:	4b20      	ldr	r3, [pc, #128]	@ (8004400 <prvAddNewTaskToReadyList+0xd0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	4a1e      	ldr	r2, [pc, #120]	@ (8004400 <prvAddNewTaskToReadyList+0xd0>)
 8004386:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004388:	4b1d      	ldr	r3, [pc, #116]	@ (8004400 <prvAddNewTaskToReadyList+0xd0>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004394:	4b1b      	ldr	r3, [pc, #108]	@ (8004404 <prvAddNewTaskToReadyList+0xd4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d903      	bls.n	80043a4 <prvAddNewTaskToReadyList+0x74>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	4a18      	ldr	r2, [pc, #96]	@ (8004404 <prvAddNewTaskToReadyList+0xd4>)
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <prvAddNewTaskToReadyList+0xd8>)
 80043b2:	441a      	add	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f7ff f901 	bl	80035c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043c0:	f001 fa4c 	bl	800585c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043c4:	4b0d      	ldr	r3, [pc, #52]	@ (80043fc <prvAddNewTaskToReadyList+0xcc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00e      	beq.n	80043ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043cc:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <prvAddNewTaskToReadyList+0xc8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d207      	bcs.n	80043ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043da:	4b0c      	ldr	r3, [pc, #48]	@ (800440c <prvAddNewTaskToReadyList+0xdc>)
 80043dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000fd8 	.word	0x20000fd8
 80043f8:	20000b04 	.word	0x20000b04
 80043fc:	20000fe4 	.word	0x20000fe4
 8004400:	20000ff4 	.word	0x20000ff4
 8004404:	20000fe0 	.word	0x20000fe0
 8004408:	20000b08 	.word	0x20000b08
 800440c:	e000ed04 	.word	0xe000ed04

08004410 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d018      	beq.n	8004454 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004422:	4b14      	ldr	r3, [pc, #80]	@ (8004474 <vTaskDelay+0x64>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <vTaskDelay+0x32>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	60bb      	str	r3, [r7, #8]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004442:	f000 f883 	bl	800454c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004446:	2100      	movs	r1, #0
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fcf3 	bl	8004e34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800444e:	f000 f88b 	bl	8004568 <xTaskResumeAll>
 8004452:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d107      	bne.n	800446a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800445a:	4b07      	ldr	r3, [pc, #28]	@ (8004478 <vTaskDelay+0x68>)
 800445c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20001000 	.word	0x20001000
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	@ 0x28
 8004480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800448a:	463a      	mov	r2, r7
 800448c:	1d39      	adds	r1, r7, #4
 800448e:	f107 0308 	add.w	r3, r7, #8
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff f834 	bl	8003500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	9202      	str	r2, [sp, #8]
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	2300      	movs	r3, #0
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	2300      	movs	r3, #0
 80044a8:	460a      	mov	r2, r1
 80044aa:	4922      	ldr	r1, [pc, #136]	@ (8004534 <vTaskStartScheduler+0xb8>)
 80044ac:	4822      	ldr	r0, [pc, #136]	@ (8004538 <vTaskStartScheduler+0xbc>)
 80044ae:	f7ff fe09 	bl	80040c4 <xTaskCreateStatic>
 80044b2:	4603      	mov	r3, r0
 80044b4:	4a21      	ldr	r2, [pc, #132]	@ (800453c <vTaskStartScheduler+0xc0>)
 80044b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044b8:	4b20      	ldr	r3, [pc, #128]	@ (800453c <vTaskStartScheduler+0xc0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044c0:	2301      	movs	r3, #1
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	e001      	b.n	80044ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d102      	bne.n	80044d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044d0:	f000 fd04 	bl	8004edc <xTimerCreateTimerTask>
 80044d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d116      	bne.n	800450a <vTaskStartScheduler+0x8e>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	613b      	str	r3, [r7, #16]
}
 80044ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044f0:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <vTaskStartScheduler+0xc4>)
 80044f2:	f04f 32ff 	mov.w	r2, #4294967295
 80044f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044f8:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <vTaskStartScheduler+0xc8>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044fe:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <vTaskStartScheduler+0xcc>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004504:	f001 f8d4 	bl	80056b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004508:	e00f      	b.n	800452a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d10b      	bne.n	800452a <vTaskStartScheduler+0xae>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	60fb      	str	r3, [r7, #12]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <vTaskStartScheduler+0xaa>
}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	08005eb0 	.word	0x08005eb0
 8004538:	08004b6d 	.word	0x08004b6d
 800453c:	20000ffc 	.word	0x20000ffc
 8004540:	20000ff8 	.word	0x20000ff8
 8004544:	20000fe4 	.word	0x20000fe4
 8004548:	20000fdc 	.word	0x20000fdc

0800454c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004550:	4b04      	ldr	r3, [pc, #16]	@ (8004564 <vTaskSuspendAll+0x18>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	4a03      	ldr	r2, [pc, #12]	@ (8004564 <vTaskSuspendAll+0x18>)
 8004558:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	20001000 	.word	0x20001000

08004568 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004576:	4b42      	ldr	r3, [pc, #264]	@ (8004680 <xTaskResumeAll+0x118>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <xTaskResumeAll+0x2e>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	603b      	str	r3, [r7, #0]
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	e7fd      	b.n	8004592 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004596:	f001 f92f 	bl	80057f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800459a:	4b39      	ldr	r3, [pc, #228]	@ (8004680 <xTaskResumeAll+0x118>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3b01      	subs	r3, #1
 80045a0:	4a37      	ldr	r2, [pc, #220]	@ (8004680 <xTaskResumeAll+0x118>)
 80045a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a4:	4b36      	ldr	r3, [pc, #216]	@ (8004680 <xTaskResumeAll+0x118>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d162      	bne.n	8004672 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045ac:	4b35      	ldr	r3, [pc, #212]	@ (8004684 <xTaskResumeAll+0x11c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05e      	beq.n	8004672 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045b4:	e02f      	b.n	8004616 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b6:	4b34      	ldr	r3, [pc, #208]	@ (8004688 <xTaskResumeAll+0x120>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3318      	adds	r3, #24
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff f85a 	bl	800367c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff f855 	bl	800367c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d6:	4b2d      	ldr	r3, [pc, #180]	@ (800468c <xTaskResumeAll+0x124>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d903      	bls.n	80045e6 <xTaskResumeAll+0x7e>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	4a2a      	ldr	r2, [pc, #168]	@ (800468c <xTaskResumeAll+0x124>)
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4a27      	ldr	r2, [pc, #156]	@ (8004690 <xTaskResumeAll+0x128>)
 80045f4:	441a      	add	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f7fe ffe0 	bl	80035c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004606:	4b23      	ldr	r3, [pc, #140]	@ (8004694 <xTaskResumeAll+0x12c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	429a      	cmp	r2, r3
 800460e:	d302      	bcc.n	8004616 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004610:	4b21      	ldr	r3, [pc, #132]	@ (8004698 <xTaskResumeAll+0x130>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004616:	4b1c      	ldr	r3, [pc, #112]	@ (8004688 <xTaskResumeAll+0x120>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1cb      	bne.n	80045b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004624:	f000 fb58 	bl	8004cd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004628:	4b1c      	ldr	r3, [pc, #112]	@ (800469c <xTaskResumeAll+0x134>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d010      	beq.n	8004656 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004634:	f000 f846 	bl	80046c4 <xTaskIncrementTick>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800463e:	4b16      	ldr	r3, [pc, #88]	@ (8004698 <xTaskResumeAll+0x130>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3b01      	subs	r3, #1
 8004648:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f1      	bne.n	8004634 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004650:	4b12      	ldr	r3, [pc, #72]	@ (800469c <xTaskResumeAll+0x134>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004656:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <xTaskResumeAll+0x130>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800465e:	2301      	movs	r3, #1
 8004660:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004662:	4b0f      	ldr	r3, [pc, #60]	@ (80046a0 <xTaskResumeAll+0x138>)
 8004664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004672:	f001 f8f3 	bl	800585c <vPortExitCritical>

	return xAlreadyYielded;
 8004676:	68bb      	ldr	r3, [r7, #8]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20001000 	.word	0x20001000
 8004684:	20000fd8 	.word	0x20000fd8
 8004688:	20000f98 	.word	0x20000f98
 800468c:	20000fe0 	.word	0x20000fe0
 8004690:	20000b08 	.word	0x20000b08
 8004694:	20000b04 	.word	0x20000b04
 8004698:	20000fec 	.word	0x20000fec
 800469c:	20000fe8 	.word	0x20000fe8
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046aa:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <xTaskGetTickCount+0x1c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046b0:	687b      	ldr	r3, [r7, #4]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000fdc 	.word	0x20000fdc

080046c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ce:	4b4f      	ldr	r3, [pc, #316]	@ (800480c <xTaskIncrementTick+0x148>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 8090 	bne.w	80047f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004810 <xTaskIncrementTick+0x14c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3301      	adds	r3, #1
 80046de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004810 <xTaskIncrementTick+0x14c>)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d121      	bne.n	8004730 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80046ec:	4b49      	ldr	r3, [pc, #292]	@ (8004814 <xTaskIncrementTick+0x150>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <xTaskIncrementTick+0x4a>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	603b      	str	r3, [r7, #0]
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	e7fd      	b.n	800470a <xTaskIncrementTick+0x46>
 800470e:	4b41      	ldr	r3, [pc, #260]	@ (8004814 <xTaskIncrementTick+0x150>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	4b40      	ldr	r3, [pc, #256]	@ (8004818 <xTaskIncrementTick+0x154>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a3e      	ldr	r2, [pc, #248]	@ (8004814 <xTaskIncrementTick+0x150>)
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4a3e      	ldr	r2, [pc, #248]	@ (8004818 <xTaskIncrementTick+0x154>)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b3e      	ldr	r3, [pc, #248]	@ (800481c <xTaskIncrementTick+0x158>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3301      	adds	r3, #1
 8004728:	4a3c      	ldr	r2, [pc, #240]	@ (800481c <xTaskIncrementTick+0x158>)
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	f000 fad4 	bl	8004cd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004730:	4b3b      	ldr	r3, [pc, #236]	@ (8004820 <xTaskIncrementTick+0x15c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	d349      	bcc.n	80047ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800473a:	4b36      	ldr	r3, [pc, #216]	@ (8004814 <xTaskIncrementTick+0x150>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004744:	4b36      	ldr	r3, [pc, #216]	@ (8004820 <xTaskIncrementTick+0x15c>)
 8004746:	f04f 32ff 	mov.w	r2, #4294967295
 800474a:	601a      	str	r2, [r3, #0]
					break;
 800474c:	e03f      	b.n	80047ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800474e:	4b31      	ldr	r3, [pc, #196]	@ (8004814 <xTaskIncrementTick+0x150>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d203      	bcs.n	800476e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004766:	4a2e      	ldr	r2, [pc, #184]	@ (8004820 <xTaskIncrementTick+0x15c>)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800476c:	e02f      	b.n	80047ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3304      	adds	r3, #4
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe ff82 	bl	800367c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	3318      	adds	r3, #24
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe ff79 	bl	800367c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478e:	4b25      	ldr	r3, [pc, #148]	@ (8004824 <xTaskIncrementTick+0x160>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d903      	bls.n	800479e <xTaskIncrementTick+0xda>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479a:	4a22      	ldr	r2, [pc, #136]	@ (8004824 <xTaskIncrementTick+0x160>)
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004828 <xTaskIncrementTick+0x164>)
 80047ac:	441a      	add	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f7fe ff04 	bl	80035c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047be:	4b1b      	ldr	r3, [pc, #108]	@ (800482c <xTaskIncrementTick+0x168>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d3b8      	bcc.n	800473a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047cc:	e7b5      	b.n	800473a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047ce:	4b17      	ldr	r3, [pc, #92]	@ (800482c <xTaskIncrementTick+0x168>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d4:	4914      	ldr	r1, [pc, #80]	@ (8004828 <xTaskIncrementTick+0x164>)
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d901      	bls.n	80047ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80047e6:	2301      	movs	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047ea:	4b11      	ldr	r3, [pc, #68]	@ (8004830 <xTaskIncrementTick+0x16c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80047f2:	2301      	movs	r3, #1
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e004      	b.n	8004802 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004834 <xTaskIncrementTick+0x170>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	4a0d      	ldr	r2, [pc, #52]	@ (8004834 <xTaskIncrementTick+0x170>)
 8004800:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004802:	697b      	ldr	r3, [r7, #20]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20001000 	.word	0x20001000
 8004810:	20000fdc 	.word	0x20000fdc
 8004814:	20000f90 	.word	0x20000f90
 8004818:	20000f94 	.word	0x20000f94
 800481c:	20000ff0 	.word	0x20000ff0
 8004820:	20000ff8 	.word	0x20000ff8
 8004824:	20000fe0 	.word	0x20000fe0
 8004828:	20000b08 	.word	0x20000b08
 800482c:	20000b04 	.word	0x20000b04
 8004830:	20000fec 	.word	0x20000fec
 8004834:	20000fe8 	.word	0x20000fe8

08004838 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800483e:	4b28      	ldr	r3, [pc, #160]	@ (80048e0 <vTaskSwitchContext+0xa8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004846:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <vTaskSwitchContext+0xac>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800484c:	e042      	b.n	80048d4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800484e:	4b25      	ldr	r3, [pc, #148]	@ (80048e4 <vTaskSwitchContext+0xac>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004854:	4b24      	ldr	r3, [pc, #144]	@ (80048e8 <vTaskSwitchContext+0xb0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	e011      	b.n	8004880 <vTaskSwitchContext+0x48>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <vTaskSwitchContext+0x42>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	607b      	str	r3, [r7, #4]
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <vTaskSwitchContext+0x3e>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b01      	subs	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	491a      	ldr	r1, [pc, #104]	@ (80048ec <vTaskSwitchContext+0xb4>)
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0e3      	beq.n	800485c <vTaskSwitchContext+0x24>
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4a13      	ldr	r2, [pc, #76]	@ (80048ec <vTaskSwitchContext+0xb4>)
 80048a0:	4413      	add	r3, r2
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	3308      	adds	r3, #8
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d104      	bne.n	80048c4 <vTaskSwitchContext+0x8c>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	4a09      	ldr	r2, [pc, #36]	@ (80048f0 <vTaskSwitchContext+0xb8>)
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	4a06      	ldr	r2, [pc, #24]	@ (80048e8 <vTaskSwitchContext+0xb0>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6013      	str	r3, [r2, #0]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	20001000 	.word	0x20001000
 80048e4:	20000fec 	.word	0x20000fec
 80048e8:	20000fe0 	.word	0x20000fe0
 80048ec:	20000b08 	.word	0x20000b08
 80048f0:	20000b04 	.word	0x20000b04

080048f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	60fb      	str	r3, [r7, #12]
}
 8004916:	bf00      	nop
 8004918:	bf00      	nop
 800491a:	e7fd      	b.n	8004918 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800491c:	4b07      	ldr	r3, [pc, #28]	@ (800493c <vTaskPlaceOnEventList+0x48>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3318      	adds	r3, #24
 8004922:	4619      	mov	r1, r3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fe fe70 	bl	800360a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800492a:	2101      	movs	r1, #1
 800492c:	6838      	ldr	r0, [r7, #0]
 800492e:	f000 fa81 	bl	8004e34 <prvAddCurrentTaskToDelayedList>
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000b04 	.word	0x20000b04

08004940 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	617b      	str	r3, [r7, #20]
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	e7fd      	b.n	8004966 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800496a:	4b0a      	ldr	r3, [pc, #40]	@ (8004994 <vTaskPlaceOnEventListRestricted+0x54>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3318      	adds	r3, #24
 8004970:	4619      	mov	r1, r3
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7fe fe25 	bl	80035c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800497e:	f04f 33ff 	mov.w	r3, #4294967295
 8004982:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	68b8      	ldr	r0, [r7, #8]
 8004988:	f000 fa54 	bl	8004e34 <prvAddCurrentTaskToDelayedList>
	}
 800498c:	bf00      	nop
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000b04 	.word	0x20000b04

08004998 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10b      	bne.n	80049c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	60fb      	str	r3, [r7, #12]
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	e7fd      	b.n	80049c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	3318      	adds	r3, #24
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fe fe56 	bl	800367c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a48 <xTaskRemoveFromEventList+0xb0>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d11d      	bne.n	8004a14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	3304      	adds	r3, #4
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fe fe4d 	bl	800367c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e6:	4b19      	ldr	r3, [pc, #100]	@ (8004a4c <xTaskRemoveFromEventList+0xb4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d903      	bls.n	80049f6 <xTaskRemoveFromEventList+0x5e>
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	4a16      	ldr	r2, [pc, #88]	@ (8004a4c <xTaskRemoveFromEventList+0xb4>)
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4a13      	ldr	r2, [pc, #76]	@ (8004a50 <xTaskRemoveFromEventList+0xb8>)
 8004a04:	441a      	add	r2, r3
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f7fe fdd8 	bl	80035c2 <vListInsertEnd>
 8004a12:	e005      	b.n	8004a20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	3318      	adds	r3, #24
 8004a18:	4619      	mov	r1, r3
 8004a1a:	480e      	ldr	r0, [pc, #56]	@ (8004a54 <xTaskRemoveFromEventList+0xbc>)
 8004a1c:	f7fe fdd1 	bl	80035c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a24:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <xTaskRemoveFromEventList+0xc0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d905      	bls.n	8004a3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a32:	4b0a      	ldr	r3, [pc, #40]	@ (8004a5c <xTaskRemoveFromEventList+0xc4>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e001      	b.n	8004a3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a3e:	697b      	ldr	r3, [r7, #20]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20001000 	.word	0x20001000
 8004a4c:	20000fe0 	.word	0x20000fe0
 8004a50:	20000b08 	.word	0x20000b08
 8004a54:	20000f98 	.word	0x20000f98
 8004a58:	20000b04 	.word	0x20000b04
 8004a5c:	20000fec 	.word	0x20000fec

08004a60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a68:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <vTaskInternalSetTimeOutState+0x24>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a70:	4b05      	ldr	r3, [pc, #20]	@ (8004a88 <vTaskInternalSetTimeOutState+0x28>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	605a      	str	r2, [r3, #4]
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	20000ff0 	.word	0x20000ff0
 8004a88:	20000fdc 	.word	0x20000fdc

08004a8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	613b      	str	r3, [r7, #16]
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	e7fd      	b.n	8004ab0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	60fb      	str	r3, [r7, #12]
}
 8004acc:	bf00      	nop
 8004ace:	bf00      	nop
 8004ad0:	e7fd      	b.n	8004ace <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004ad2:	f000 fe91 	bl	80057f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b4c <xTaskCheckForTimeOut+0xc0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aee:	d102      	bne.n	8004af6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61fb      	str	r3, [r7, #28]
 8004af4:	e023      	b.n	8004b3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b15      	ldr	r3, [pc, #84]	@ (8004b50 <xTaskCheckForTimeOut+0xc4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d007      	beq.n	8004b12 <xTaskCheckForTimeOut+0x86>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d302      	bcc.n	8004b12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	e015      	b.n	8004b3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d20b      	bcs.n	8004b34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	1ad2      	subs	r2, r2, r3
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff ff99 	bl	8004a60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	e004      	b.n	8004b3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b3e:	f000 fe8d 	bl	800585c <vPortExitCritical>

	return xReturn;
 8004b42:	69fb      	ldr	r3, [r7, #28]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000fdc 	.word	0x20000fdc
 8004b50:	20000ff0 	.word	0x20000ff0

08004b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b58:	4b03      	ldr	r3, [pc, #12]	@ (8004b68 <vTaskMissedYield+0x14>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	20000fec 	.word	0x20000fec

08004b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b74:	f000 f852 	bl	8004c1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b78:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <prvIdleTask+0x28>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d9f9      	bls.n	8004b74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b80:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <prvIdleTask+0x2c>)
 8004b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b90:	e7f0      	b.n	8004b74 <prvIdleTask+0x8>
 8004b92:	bf00      	nop
 8004b94:	20000b08 	.word	0x20000b08
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	e00c      	b.n	8004bc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	4613      	mov	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4a12      	ldr	r2, [pc, #72]	@ (8004bfc <prvInitialiseTaskLists+0x60>)
 8004bb4:	4413      	add	r3, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fe fcd6 	bl	8003568 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b37      	cmp	r3, #55	@ 0x37
 8004bc6:	d9ef      	bls.n	8004ba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bc8:	480d      	ldr	r0, [pc, #52]	@ (8004c00 <prvInitialiseTaskLists+0x64>)
 8004bca:	f7fe fccd 	bl	8003568 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bce:	480d      	ldr	r0, [pc, #52]	@ (8004c04 <prvInitialiseTaskLists+0x68>)
 8004bd0:	f7fe fcca 	bl	8003568 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bd4:	480c      	ldr	r0, [pc, #48]	@ (8004c08 <prvInitialiseTaskLists+0x6c>)
 8004bd6:	f7fe fcc7 	bl	8003568 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bda:	480c      	ldr	r0, [pc, #48]	@ (8004c0c <prvInitialiseTaskLists+0x70>)
 8004bdc:	f7fe fcc4 	bl	8003568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004be0:	480b      	ldr	r0, [pc, #44]	@ (8004c10 <prvInitialiseTaskLists+0x74>)
 8004be2:	f7fe fcc1 	bl	8003568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004be6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <prvInitialiseTaskLists+0x78>)
 8004be8:	4a05      	ldr	r2, [pc, #20]	@ (8004c00 <prvInitialiseTaskLists+0x64>)
 8004bea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bec:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <prvInitialiseTaskLists+0x7c>)
 8004bee:	4a05      	ldr	r2, [pc, #20]	@ (8004c04 <prvInitialiseTaskLists+0x68>)
 8004bf0:	601a      	str	r2, [r3, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000b08 	.word	0x20000b08
 8004c00:	20000f68 	.word	0x20000f68
 8004c04:	20000f7c 	.word	0x20000f7c
 8004c08:	20000f98 	.word	0x20000f98
 8004c0c:	20000fac 	.word	0x20000fac
 8004c10:	20000fc4 	.word	0x20000fc4
 8004c14:	20000f90 	.word	0x20000f90
 8004c18:	20000f94 	.word	0x20000f94

08004c1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c22:	e019      	b.n	8004c58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c24:	f000 fde8 	bl	80057f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c28:	4b10      	ldr	r3, [pc, #64]	@ (8004c6c <prvCheckTasksWaitingTermination+0x50>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fe fd21 	bl	800367c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c70 <prvCheckTasksWaitingTermination+0x54>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	4a0b      	ldr	r2, [pc, #44]	@ (8004c70 <prvCheckTasksWaitingTermination+0x54>)
 8004c42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c44:	4b0b      	ldr	r3, [pc, #44]	@ (8004c74 <prvCheckTasksWaitingTermination+0x58>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c74 <prvCheckTasksWaitingTermination+0x58>)
 8004c4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c4e:	f000 fe05 	bl	800585c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f810 	bl	8004c78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c58:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <prvCheckTasksWaitingTermination+0x58>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e1      	bne.n	8004c24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000fac 	.word	0x20000fac
 8004c70:	20000fd8 	.word	0x20000fd8
 8004c74:	20000fc0 	.word	0x20000fc0

08004c78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d108      	bne.n	8004c9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 ffa2 	bl	8005bd8 <vPortFree>
				vPortFree( pxTCB );
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 ff9f 	bl	8005bd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c9a:	e019      	b.n	8004cd0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d103      	bne.n	8004cae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 ff96 	bl	8005bd8 <vPortFree>
	}
 8004cac:	e010      	b.n	8004cd0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d00b      	beq.n	8004cd0 <prvDeleteTCB+0x58>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60fb      	str	r3, [r7, #12]
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <prvDeleteTCB+0x54>
	}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cde:	4b0c      	ldr	r3, [pc, #48]	@ (8004d10 <prvResetNextTaskUnblockTime+0x38>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d14 <prvResetNextTaskUnblockTime+0x3c>)
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295
 8004cee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cf0:	e008      	b.n	8004d04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf2:	4b07      	ldr	r3, [pc, #28]	@ (8004d10 <prvResetNextTaskUnblockTime+0x38>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4a04      	ldr	r2, [pc, #16]	@ (8004d14 <prvResetNextTaskUnblockTime+0x3c>)
 8004d02:	6013      	str	r3, [r2, #0]
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20000f90 	.word	0x20000f90
 8004d14:	20000ff8 	.word	0x20000ff8

08004d18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <xTaskGetSchedulerState+0x34>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d26:	2301      	movs	r3, #1
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	e008      	b.n	8004d3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d2c:	4b08      	ldr	r3, [pc, #32]	@ (8004d50 <xTaskGetSchedulerState+0x38>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d34:	2302      	movs	r3, #2
 8004d36:	607b      	str	r3, [r7, #4]
 8004d38:	e001      	b.n	8004d3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d3e:	687b      	ldr	r3, [r7, #4]
	}
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	20000fe4 	.word	0x20000fe4
 8004d50:	20001000 	.word	0x20001000

08004d54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d058      	beq.n	8004e1c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004e28 <xTaskPriorityDisinherit+0xd4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d00b      	beq.n	8004d8c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	60fb      	str	r3, [r7, #12]
}
 8004d86:	bf00      	nop
 8004d88:	bf00      	nop
 8004d8a:	e7fd      	b.n	8004d88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	60bb      	str	r3, [r7, #8]
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db0:	1e5a      	subs	r2, r3, #1
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d02c      	beq.n	8004e1c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d128      	bne.n	8004e1c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fc54 	bl	800367c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dec:	4b0f      	ldr	r3, [pc, #60]	@ (8004e2c <xTaskPriorityDisinherit+0xd8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d903      	bls.n	8004dfc <xTaskPriorityDisinherit+0xa8>
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	4a0c      	ldr	r2, [pc, #48]	@ (8004e2c <xTaskPriorityDisinherit+0xd8>)
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4a09      	ldr	r2, [pc, #36]	@ (8004e30 <xTaskPriorityDisinherit+0xdc>)
 8004e0a:	441a      	add	r2, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7fe fbd5 	bl	80035c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e1c:	697b      	ldr	r3, [r7, #20]
	}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000b04 	.word	0x20000b04
 8004e2c:	20000fe0 	.word	0x20000fe0
 8004e30:	20000b08 	.word	0x20000b08

08004e34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e3e:	4b21      	ldr	r3, [pc, #132]	@ (8004ec4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e44:	4b20      	ldr	r3, [pc, #128]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe fc16 	bl	800367c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d10a      	bne.n	8004e6e <prvAddCurrentTaskToDelayedList+0x3a>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	4819      	ldr	r0, [pc, #100]	@ (8004ecc <prvAddCurrentTaskToDelayedList+0x98>)
 8004e68:	f7fe fbab 	bl	80035c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e6c:	e026      	b.n	8004ebc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e76:	4b14      	ldr	r3, [pc, #80]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d209      	bcs.n	8004e9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e86:	4b12      	ldr	r3, [pc, #72]	@ (8004ed0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f7fe fbb9 	bl	800360a <vListInsert>
}
 8004e98:	e010      	b.n	8004ebc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f7fe fbaf 	bl	800360a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004eac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d202      	bcs.n	8004ebc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004eb6:	4a08      	ldr	r2, [pc, #32]	@ (8004ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	6013      	str	r3, [r2, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000fdc 	.word	0x20000fdc
 8004ec8:	20000b04 	.word	0x20000b04
 8004ecc:	20000fc4 	.word	0x20000fc4
 8004ed0:	20000f94 	.word	0x20000f94
 8004ed4:	20000f90 	.word	0x20000f90
 8004ed8:	20000ff8 	.word	0x20000ff8

08004edc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	@ 0x28
 8004ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ee6:	f000 fb13 	bl	8005510 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004eea:	4b1d      	ldr	r3, [pc, #116]	@ (8004f60 <xTimerCreateTimerTask+0x84>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d021      	beq.n	8004f36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004efa:	1d3a      	adds	r2, r7, #4
 8004efc:	f107 0108 	add.w	r1, r7, #8
 8004f00:	f107 030c 	add.w	r3, r7, #12
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe fb15 	bl	8003534 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	9202      	str	r2, [sp, #8]
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	2302      	movs	r3, #2
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	4911      	ldr	r1, [pc, #68]	@ (8004f64 <xTimerCreateTimerTask+0x88>)
 8004f1e:	4812      	ldr	r0, [pc, #72]	@ (8004f68 <xTimerCreateTimerTask+0x8c>)
 8004f20:	f7ff f8d0 	bl	80040c4 <xTaskCreateStatic>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4a11      	ldr	r2, [pc, #68]	@ (8004f6c <xTimerCreateTimerTask+0x90>)
 8004f28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f2a:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <xTimerCreateTimerTask+0x90>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f32:	2301      	movs	r3, #1
 8004f34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	613b      	str	r3, [r7, #16]
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f54:	697b      	ldr	r3, [r7, #20]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20001034 	.word	0x20001034
 8004f64:	08005eb8 	.word	0x08005eb8
 8004f68:	080050a9 	.word	0x080050a9
 8004f6c:	20001038 	.word	0x20001038

08004f70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	@ 0x28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10b      	bne.n	8004fa0 <xTimerGenericCommand+0x30>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	623b      	str	r3, [r7, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	bf00      	nop
 8004f9e:	e7fd      	b.n	8004f9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fa0:	4b19      	ldr	r3, [pc, #100]	@ (8005008 <xTimerGenericCommand+0x98>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d02a      	beq.n	8004ffe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b05      	cmp	r3, #5
 8004fb8:	dc18      	bgt.n	8004fec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fba:	f7ff fead 	bl	8004d18 <xTaskGetSchedulerState>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d109      	bne.n	8004fd8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fc4:	4b10      	ldr	r3, [pc, #64]	@ (8005008 <xTimerGenericCommand+0x98>)
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	f107 0110 	add.w	r1, r7, #16
 8004fcc:	2300      	movs	r3, #0
 8004fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd0:	f7fe fc88 	bl	80038e4 <xQueueGenericSend>
 8004fd4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004fd6:	e012      	b.n	8004ffe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <xTimerGenericCommand+0x98>)
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	f107 0110 	add.w	r1, r7, #16
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f7fe fc7e 	bl	80038e4 <xQueueGenericSend>
 8004fe8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004fea:	e008      	b.n	8004ffe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fec:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <xTimerGenericCommand+0x98>)
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	f107 0110 	add.w	r1, r7, #16
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	f7fe fd76 	bl	8003ae8 <xQueueGenericSendFromISR>
 8004ffc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005000:	4618      	mov	r0, r3
 8005002:	3728      	adds	r7, #40	@ 0x28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20001034 	.word	0x20001034

0800500c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af02      	add	r7, sp, #8
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005016:	4b23      	ldr	r3, [pc, #140]	@ (80050a4 <prvProcessExpiredTimer+0x98>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	3304      	adds	r3, #4
 8005024:	4618      	mov	r0, r3
 8005026:	f7fe fb29 	bl	800367c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d023      	beq.n	8005080 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	18d1      	adds	r1, r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	6978      	ldr	r0, [r7, #20]
 8005046:	f000 f8d5 	bl	80051f4 <prvInsertTimerInActiveList>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d020      	beq.n	8005092 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005050:	2300      	movs	r3, #0
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	2100      	movs	r1, #0
 800505a:	6978      	ldr	r0, [r7, #20]
 800505c:	f7ff ff88 	bl	8004f70 <xTimerGenericCommand>
 8005060:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d114      	bne.n	8005092 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	60fb      	str	r3, [r7, #12]
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	e7fd      	b.n	800507c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005086:	f023 0301 	bic.w	r3, r3, #1
 800508a:	b2da      	uxtb	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	6978      	ldr	r0, [r7, #20]
 8005098:	4798      	blx	r3
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	2000102c 	.word	0x2000102c

080050a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f859 	bl	800516c <prvGetNextExpireTime>
 80050ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4619      	mov	r1, r3
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f805 	bl	80050d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050c6:	f000 f8d7 	bl	8005278 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050ca:	bf00      	nop
 80050cc:	e7f0      	b.n	80050b0 <prvTimerTask+0x8>
	...

080050d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050da:	f7ff fa37 	bl	800454c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050de:	f107 0308 	add.w	r3, r7, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f866 	bl	80051b4 <prvSampleTimeNow>
 80050e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d130      	bne.n	8005152 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <prvProcessTimerOrBlockTask+0x3c>
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d806      	bhi.n	800510c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050fe:	f7ff fa33 	bl	8004568 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ff81 	bl	800500c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800510a:	e024      	b.n	8005156 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d008      	beq.n	8005124 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005112:	4b13      	ldr	r3, [pc, #76]	@ (8005160 <prvProcessTimerOrBlockTask+0x90>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <prvProcessTimerOrBlockTask+0x50>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <prvProcessTimerOrBlockTask+0x52>
 8005120:	2300      	movs	r3, #0
 8005122:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005124:	4b0f      	ldr	r3, [pc, #60]	@ (8005164 <prvProcessTimerOrBlockTask+0x94>)
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	4619      	mov	r1, r3
 8005132:	f7fe ff93 	bl	800405c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005136:	f7ff fa17 	bl	8004568 <xTaskResumeAll>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005140:	4b09      	ldr	r3, [pc, #36]	@ (8005168 <prvProcessTimerOrBlockTask+0x98>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
}
 8005150:	e001      	b.n	8005156 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005152:	f7ff fa09 	bl	8004568 <xTaskResumeAll>
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20001030 	.word	0x20001030
 8005164:	20001034 	.word	0x20001034
 8005168:	e000ed04 	.word	0xe000ed04

0800516c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005174:	4b0e      	ldr	r3, [pc, #56]	@ (80051b0 <prvGetNextExpireTime+0x44>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <prvGetNextExpireTime+0x16>
 800517e:	2201      	movs	r2, #1
 8005180:	e000      	b.n	8005184 <prvGetNextExpireTime+0x18>
 8005182:	2200      	movs	r2, #0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005190:	4b07      	ldr	r3, [pc, #28]	@ (80051b0 <prvGetNextExpireTime+0x44>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	e001      	b.n	80051a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051a0:	68fb      	ldr	r3, [r7, #12]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	2000102c 	.word	0x2000102c

080051b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051bc:	f7ff fa72 	bl	80046a4 <xTaskGetTickCount>
 80051c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051c2:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <prvSampleTimeNow+0x3c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d205      	bcs.n	80051d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051cc:	f000 f93a 	bl	8005444 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e002      	b.n	80051de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051de:	4a04      	ldr	r2, [pc, #16]	@ (80051f0 <prvSampleTimeNow+0x3c>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051e4:	68fb      	ldr	r3, [r7, #12]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	2000103c 	.word	0x2000103c

080051f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d812      	bhi.n	8005240 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	429a      	cmp	r2, r3
 8005226:	d302      	bcc.n	800522e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005228:	2301      	movs	r3, #1
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e01b      	b.n	8005266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800522e:	4b10      	ldr	r3, [pc, #64]	@ (8005270 <prvInsertTimerInActiveList+0x7c>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fe f9e6 	bl	800360a <vListInsert>
 800523e:	e012      	b.n	8005266 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d206      	bcs.n	8005256 <prvInsertTimerInActiveList+0x62>
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d302      	bcc.n	8005256 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e007      	b.n	8005266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005256:	4b07      	ldr	r3, [pc, #28]	@ (8005274 <prvInsertTimerInActiveList+0x80>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3304      	adds	r3, #4
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f7fe f9d2 	bl	800360a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005266:	697b      	ldr	r3, [r7, #20]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20001030 	.word	0x20001030
 8005274:	2000102c 	.word	0x2000102c

08005278 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08e      	sub	sp, #56	@ 0x38
 800527c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800527e:	e0ce      	b.n	800541e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	da19      	bge.n	80052ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	3304      	adds	r3, #4
 800528a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	61fb      	str	r3, [r7, #28]
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	e7fd      	b.n	80052a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b0:	6850      	ldr	r0, [r2, #4]
 80052b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b4:	6892      	ldr	r2, [r2, #8]
 80052b6:	4611      	mov	r1, r2
 80052b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f2c0 80ae 	blt.w	800541e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d004      	beq.n	80052d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d0:	3304      	adds	r3, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe f9d2 	bl	800367c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052d8:	463b      	mov	r3, r7
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff ff6a 	bl	80051b4 <prvSampleTimeNow>
 80052e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b09      	cmp	r3, #9
 80052e6:	f200 8097 	bhi.w	8005418 <prvProcessReceivedCommands+0x1a0>
 80052ea:	a201      	add	r2, pc, #4	@ (adr r2, 80052f0 <prvProcessReceivedCommands+0x78>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005319 	.word	0x08005319
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005319 	.word	0x08005319
 80052fc:	0800538f 	.word	0x0800538f
 8005300:	080053a3 	.word	0x080053a3
 8005304:	080053ef 	.word	0x080053ef
 8005308:	08005319 	.word	0x08005319
 800530c:	08005319 	.word	0x08005319
 8005310:	0800538f 	.word	0x0800538f
 8005314:	080053a3 	.word	0x080053a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005326:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	18d1      	adds	r1, r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005338:	f7ff ff5c 	bl	80051f4 <prvInsertTimerInActiveList>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d06c      	beq.n	800541c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005348:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d061      	beq.n	800541c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	441a      	add	r2, r3
 8005360:	2300      	movs	r3, #0
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	2300      	movs	r3, #0
 8005366:	2100      	movs	r1, #0
 8005368:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800536a:	f7ff fe01 	bl	8004f70 <xTimerGenericCommand>
 800536e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d152      	bne.n	800541c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	61bb      	str	r3, [r7, #24]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	b2da      	uxtb	r2, r3
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80053a0:	e03d      	b.n	800541e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10b      	bne.n	80053da <prvProcessReceivedCommands+0x162>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	617b      	str	r3, [r7, #20]
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	e7fd      	b.n	80053d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	18d1      	adds	r1, r2, r3
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053e8:	f7ff ff04 	bl	80051f4 <prvInsertTimerInActiveList>
					break;
 80053ec:	e017      	b.n	800541e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d103      	bne.n	8005404 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80053fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053fe:	f000 fbeb 	bl	8005bd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005402:	e00c      	b.n	800541e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800540a:	f023 0301 	bic.w	r3, r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005412:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005416:	e002      	b.n	800541e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <prvProcessReceivedCommands+0x1a6>
					break;
 800541c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800541e:	4b08      	ldr	r3, [pc, #32]	@ (8005440 <prvProcessReceivedCommands+0x1c8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	1d39      	adds	r1, r7, #4
 8005424:	2200      	movs	r2, #0
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fbfc 	bl	8003c24 <xQueueReceive>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	f47f af26 	bne.w	8005280 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop
 8005438:	3730      	adds	r7, #48	@ 0x30
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20001034 	.word	0x20001034

08005444 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800544a:	e049      	b.n	80054e0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800544c:	4b2e      	ldr	r3, [pc, #184]	@ (8005508 <prvSwitchTimerLists+0xc4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005456:	4b2c      	ldr	r3, [pc, #176]	@ (8005508 <prvSwitchTimerLists+0xc4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3304      	adds	r3, #4
 8005464:	4618      	mov	r0, r3
 8005466:	f7fe f909 	bl	800367c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02f      	beq.n	80054e0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	429a      	cmp	r2, r3
 8005490:	d90e      	bls.n	80054b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800549e:	4b1a      	ldr	r3, [pc, #104]	@ (8005508 <prvSwitchTimerLists+0xc4>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f7fe f8ae 	bl	800360a <vListInsert>
 80054ae:	e017      	b.n	80054e0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054b0:	2300      	movs	r3, #0
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	2300      	movs	r3, #0
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	2100      	movs	r1, #0
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f7ff fd58 	bl	8004f70 <xTimerGenericCommand>
 80054c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10b      	bne.n	80054e0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	603b      	str	r3, [r7, #0]
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054e0:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <prvSwitchTimerLists+0xc4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1b0      	bne.n	800544c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054ea:	4b07      	ldr	r3, [pc, #28]	@ (8005508 <prvSwitchTimerLists+0xc4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054f0:	4b06      	ldr	r3, [pc, #24]	@ (800550c <prvSwitchTimerLists+0xc8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a04      	ldr	r2, [pc, #16]	@ (8005508 <prvSwitchTimerLists+0xc4>)
 80054f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054f8:	4a04      	ldr	r2, [pc, #16]	@ (800550c <prvSwitchTimerLists+0xc8>)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	6013      	str	r3, [r2, #0]
}
 80054fe:	bf00      	nop
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	2000102c 	.word	0x2000102c
 800550c:	20001030 	.word	0x20001030

08005510 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005516:	f000 f96f 	bl	80057f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800551a:	4b15      	ldr	r3, [pc, #84]	@ (8005570 <prvCheckForValidListAndQueue+0x60>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d120      	bne.n	8005564 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005522:	4814      	ldr	r0, [pc, #80]	@ (8005574 <prvCheckForValidListAndQueue+0x64>)
 8005524:	f7fe f820 	bl	8003568 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005528:	4813      	ldr	r0, [pc, #76]	@ (8005578 <prvCheckForValidListAndQueue+0x68>)
 800552a:	f7fe f81d 	bl	8003568 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800552e:	4b13      	ldr	r3, [pc, #76]	@ (800557c <prvCheckForValidListAndQueue+0x6c>)
 8005530:	4a10      	ldr	r2, [pc, #64]	@ (8005574 <prvCheckForValidListAndQueue+0x64>)
 8005532:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005534:	4b12      	ldr	r3, [pc, #72]	@ (8005580 <prvCheckForValidListAndQueue+0x70>)
 8005536:	4a10      	ldr	r2, [pc, #64]	@ (8005578 <prvCheckForValidListAndQueue+0x68>)
 8005538:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800553a:	2300      	movs	r3, #0
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	4b11      	ldr	r3, [pc, #68]	@ (8005584 <prvCheckForValidListAndQueue+0x74>)
 8005540:	4a11      	ldr	r2, [pc, #68]	@ (8005588 <prvCheckForValidListAndQueue+0x78>)
 8005542:	2110      	movs	r1, #16
 8005544:	200a      	movs	r0, #10
 8005546:	f7fe f92d 	bl	80037a4 <xQueueGenericCreateStatic>
 800554a:	4603      	mov	r3, r0
 800554c:	4a08      	ldr	r2, [pc, #32]	@ (8005570 <prvCheckForValidListAndQueue+0x60>)
 800554e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005550:	4b07      	ldr	r3, [pc, #28]	@ (8005570 <prvCheckForValidListAndQueue+0x60>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005558:	4b05      	ldr	r3, [pc, #20]	@ (8005570 <prvCheckForValidListAndQueue+0x60>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	490b      	ldr	r1, [pc, #44]	@ (800558c <prvCheckForValidListAndQueue+0x7c>)
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe fd52 	bl	8004008 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005564:	f000 f97a 	bl	800585c <vPortExitCritical>
}
 8005568:	bf00      	nop
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20001034 	.word	0x20001034
 8005574:	20001004 	.word	0x20001004
 8005578:	20001018 	.word	0x20001018
 800557c:	2000102c 	.word	0x2000102c
 8005580:	20001030 	.word	0x20001030
 8005584:	200010e0 	.word	0x200010e0
 8005588:	20001040 	.word	0x20001040
 800558c:	08005ec0 	.word	0x08005ec0

08005590 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3b04      	subs	r3, #4
 80055a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80055a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3b04      	subs	r3, #4
 80055ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f023 0201 	bic.w	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3b04      	subs	r3, #4
 80055be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055c0:	4a0c      	ldr	r2, [pc, #48]	@ (80055f4 <pxPortInitialiseStack+0x64>)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3b14      	subs	r3, #20
 80055ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3b04      	subs	r3, #4
 80055d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f06f 0202 	mvn.w	r2, #2
 80055de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3b20      	subs	r3, #32
 80055e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055e6:	68fb      	ldr	r3, [r7, #12]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	080055f9 	.word	0x080055f9

080055f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005602:	4b13      	ldr	r3, [pc, #76]	@ (8005650 <prvTaskExitError+0x58>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d00b      	beq.n	8005624 <prvTaskExitError+0x2c>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	60fb      	str	r3, [r7, #12]
}
 800561e:	bf00      	nop
 8005620:	bf00      	nop
 8005622:	e7fd      	b.n	8005620 <prvTaskExitError+0x28>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	60bb      	str	r3, [r7, #8]
}
 8005636:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005638:	bf00      	nop
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0fc      	beq.n	800563a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	2000000c 	.word	0x2000000c
	...

08005660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005660:	4b07      	ldr	r3, [pc, #28]	@ (8005680 <pxCurrentTCBConst2>)
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	6808      	ldr	r0, [r1, #0]
 8005666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566a:	f380 8809 	msr	PSP, r0
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f380 8811 	msr	BASEPRI, r0
 800567a:	4770      	bx	lr
 800567c:	f3af 8000 	nop.w

08005680 <pxCurrentTCBConst2>:
 8005680:	20000b04 	.word	0x20000b04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop

08005688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005688:	4808      	ldr	r0, [pc, #32]	@ (80056ac <prvPortStartFirstTask+0x24>)
 800568a:	6800      	ldr	r0, [r0, #0]
 800568c:	6800      	ldr	r0, [r0, #0]
 800568e:	f380 8808 	msr	MSP, r0
 8005692:	f04f 0000 	mov.w	r0, #0
 8005696:	f380 8814 	msr	CONTROL, r0
 800569a:	b662      	cpsie	i
 800569c:	b661      	cpsie	f
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	df00      	svc	0
 80056a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056aa:	bf00      	nop
 80056ac:	e000ed08 	.word	0xe000ed08

080056b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056b6:	4b47      	ldr	r3, [pc, #284]	@ (80057d4 <xPortStartScheduler+0x124>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a47      	ldr	r2, [pc, #284]	@ (80057d8 <xPortStartScheduler+0x128>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10b      	bne.n	80056d8 <xPortStartScheduler+0x28>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	613b      	str	r3, [r7, #16]
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	e7fd      	b.n	80056d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056d8:	4b3e      	ldr	r3, [pc, #248]	@ (80057d4 <xPortStartScheduler+0x124>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a3f      	ldr	r2, [pc, #252]	@ (80057dc <xPortStartScheduler+0x12c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10b      	bne.n	80056fa <xPortStartScheduler+0x4a>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60fb      	str	r3, [r7, #12]
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	e7fd      	b.n	80056f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056fa:	4b39      	ldr	r3, [pc, #228]	@ (80057e0 <xPortStartScheduler+0x130>)
 80056fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	22ff      	movs	r2, #255	@ 0xff
 800570a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800571c:	b2da      	uxtb	r2, r3
 800571e:	4b31      	ldr	r3, [pc, #196]	@ (80057e4 <xPortStartScheduler+0x134>)
 8005720:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005722:	4b31      	ldr	r3, [pc, #196]	@ (80057e8 <xPortStartScheduler+0x138>)
 8005724:	2207      	movs	r2, #7
 8005726:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005728:	e009      	b.n	800573e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800572a:	4b2f      	ldr	r3, [pc, #188]	@ (80057e8 <xPortStartScheduler+0x138>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3b01      	subs	r3, #1
 8005730:	4a2d      	ldr	r2, [pc, #180]	@ (80057e8 <xPortStartScheduler+0x138>)
 8005732:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	b2db      	uxtb	r3, r3
 800573c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005746:	2b80      	cmp	r3, #128	@ 0x80
 8005748:	d0ef      	beq.n	800572a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800574a:	4b27      	ldr	r3, [pc, #156]	@ (80057e8 <xPortStartScheduler+0x138>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f1c3 0307 	rsb	r3, r3, #7
 8005752:	2b04      	cmp	r3, #4
 8005754:	d00b      	beq.n	800576e <xPortStartScheduler+0xbe>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	60bb      	str	r3, [r7, #8]
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	e7fd      	b.n	800576a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800576e:	4b1e      	ldr	r3, [pc, #120]	@ (80057e8 <xPortStartScheduler+0x138>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	4a1c      	ldr	r2, [pc, #112]	@ (80057e8 <xPortStartScheduler+0x138>)
 8005776:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005778:	4b1b      	ldr	r3, [pc, #108]	@ (80057e8 <xPortStartScheduler+0x138>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005780:	4a19      	ldr	r2, [pc, #100]	@ (80057e8 <xPortStartScheduler+0x138>)
 8005782:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	b2da      	uxtb	r2, r3
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800578c:	4b17      	ldr	r3, [pc, #92]	@ (80057ec <xPortStartScheduler+0x13c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a16      	ldr	r2, [pc, #88]	@ (80057ec <xPortStartScheduler+0x13c>)
 8005792:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005796:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005798:	4b14      	ldr	r3, [pc, #80]	@ (80057ec <xPortStartScheduler+0x13c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a13      	ldr	r2, [pc, #76]	@ (80057ec <xPortStartScheduler+0x13c>)
 800579e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80057a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057a4:	f000 f8da 	bl	800595c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057a8:	4b11      	ldr	r3, [pc, #68]	@ (80057f0 <xPortStartScheduler+0x140>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057ae:	f000 f8f9 	bl	80059a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057b2:	4b10      	ldr	r3, [pc, #64]	@ (80057f4 <xPortStartScheduler+0x144>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a0f      	ldr	r2, [pc, #60]	@ (80057f4 <xPortStartScheduler+0x144>)
 80057b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80057bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057be:	f7ff ff63 	bl	8005688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057c2:	f7ff f839 	bl	8004838 <vTaskSwitchContext>
	prvTaskExitError();
 80057c6:	f7ff ff17 	bl	80055f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	e000ed00 	.word	0xe000ed00
 80057d8:	410fc271 	.word	0x410fc271
 80057dc:	410fc270 	.word	0x410fc270
 80057e0:	e000e400 	.word	0xe000e400
 80057e4:	20001130 	.word	0x20001130
 80057e8:	20001134 	.word	0x20001134
 80057ec:	e000ed20 	.word	0xe000ed20
 80057f0:	2000000c 	.word	0x2000000c
 80057f4:	e000ef34 	.word	0xe000ef34

080057f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	607b      	str	r3, [r7, #4]
}
 8005810:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005812:	4b10      	ldr	r3, [pc, #64]	@ (8005854 <vPortEnterCritical+0x5c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3301      	adds	r3, #1
 8005818:	4a0e      	ldr	r2, [pc, #56]	@ (8005854 <vPortEnterCritical+0x5c>)
 800581a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800581c:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <vPortEnterCritical+0x5c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d110      	bne.n	8005846 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005824:	4b0c      	ldr	r3, [pc, #48]	@ (8005858 <vPortEnterCritical+0x60>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <vPortEnterCritical+0x4e>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	603b      	str	r3, [r7, #0]
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	e7fd      	b.n	8005842 <vPortEnterCritical+0x4a>
	}
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005862:	4b12      	ldr	r3, [pc, #72]	@ (80058ac <vPortExitCritical+0x50>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <vPortExitCritical+0x26>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	607b      	str	r3, [r7, #4]
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005882:	4b0a      	ldr	r3, [pc, #40]	@ (80058ac <vPortExitCritical+0x50>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3b01      	subs	r3, #1
 8005888:	4a08      	ldr	r2, [pc, #32]	@ (80058ac <vPortExitCritical+0x50>)
 800588a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800588c:	4b07      	ldr	r3, [pc, #28]	@ (80058ac <vPortExitCritical+0x50>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <vPortExitCritical+0x44>
 8005894:	2300      	movs	r3, #0
 8005896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	f383 8811 	msr	BASEPRI, r3
}
 800589e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	2000000c 	.word	0x2000000c

080058b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058b0:	f3ef 8009 	mrs	r0, PSP
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	4b15      	ldr	r3, [pc, #84]	@ (8005910 <pxCurrentTCBConst>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	f01e 0f10 	tst.w	lr, #16
 80058c0:	bf08      	it	eq
 80058c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ca:	6010      	str	r0, [r2, #0]
 80058cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80058d4:	f380 8811 	msr	BASEPRI, r0
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f7fe ffaa 	bl	8004838 <vTaskSwitchContext>
 80058e4:	f04f 0000 	mov.w	r0, #0
 80058e8:	f380 8811 	msr	BASEPRI, r0
 80058ec:	bc09      	pop	{r0, r3}
 80058ee:	6819      	ldr	r1, [r3, #0]
 80058f0:	6808      	ldr	r0, [r1, #0]
 80058f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f6:	f01e 0f10 	tst.w	lr, #16
 80058fa:	bf08      	it	eq
 80058fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005900:	f380 8809 	msr	PSP, r0
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	f3af 8000 	nop.w

08005910 <pxCurrentTCBConst>:
 8005910:	20000b04 	.word	0x20000b04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop

08005918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	607b      	str	r3, [r7, #4]
}
 8005930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005932:	f7fe fec7 	bl	80046c4 <xTaskIncrementTick>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800593c:	4b06      	ldr	r3, [pc, #24]	@ (8005958 <xPortSysTickHandler+0x40>)
 800593e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	2300      	movs	r3, #0
 8005946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f383 8811 	msr	BASEPRI, r3
}
 800594e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005960:	4b0b      	ldr	r3, [pc, #44]	@ (8005990 <vPortSetupTimerInterrupt+0x34>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005966:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <vPortSetupTimerInterrupt+0x38>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800596c:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <vPortSetupTimerInterrupt+0x3c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a0a      	ldr	r2, [pc, #40]	@ (800599c <vPortSetupTimerInterrupt+0x40>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	099b      	lsrs	r3, r3, #6
 8005978:	4a09      	ldr	r2, [pc, #36]	@ (80059a0 <vPortSetupTimerInterrupt+0x44>)
 800597a:	3b01      	subs	r3, #1
 800597c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800597e:	4b04      	ldr	r3, [pc, #16]	@ (8005990 <vPortSetupTimerInterrupt+0x34>)
 8005980:	2207      	movs	r2, #7
 8005982:	601a      	str	r2, [r3, #0]
}
 8005984:	bf00      	nop
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	e000e010 	.word	0xe000e010
 8005994:	e000e018 	.word	0xe000e018
 8005998:	20000000 	.word	0x20000000
 800599c:	10624dd3 	.word	0x10624dd3
 80059a0:	e000e014 	.word	0xe000e014

080059a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80059b4 <vPortEnableVFP+0x10>
 80059a8:	6801      	ldr	r1, [r0, #0]
 80059aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80059ae:	6001      	str	r1, [r0, #0]
 80059b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059b2:	bf00      	nop
 80059b4:	e000ed88 	.word	0xe000ed88

080059b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059be:	f3ef 8305 	mrs	r3, IPSR
 80059c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b0f      	cmp	r3, #15
 80059c8:	d915      	bls.n	80059f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059ca:	4a18      	ldr	r2, [pc, #96]	@ (8005a2c <vPortValidateInterruptPriority+0x74>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059d4:	4b16      	ldr	r3, [pc, #88]	@ (8005a30 <vPortValidateInterruptPriority+0x78>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	7afa      	ldrb	r2, [r7, #11]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d20b      	bcs.n	80059f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	607b      	str	r3, [r7, #4]
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	e7fd      	b.n	80059f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a34 <vPortValidateInterruptPriority+0x7c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005a38 <vPortValidateInterruptPriority+0x80>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d90b      	bls.n	8005a1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	603b      	str	r3, [r7, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	e7fd      	b.n	8005a1a <vPortValidateInterruptPriority+0x62>
	}
 8005a1e:	bf00      	nop
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	e000e3f0 	.word	0xe000e3f0
 8005a30:	20001130 	.word	0x20001130
 8005a34:	e000ed0c 	.word	0xe000ed0c
 8005a38:	20001134 	.word	0x20001134

08005a3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	@ 0x28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a48:	f7fe fd80 	bl	800454c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8005bc0 <pvPortMalloc+0x184>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a54:	f000 f924 	bl	8005ca0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a58:	4b5a      	ldr	r3, [pc, #360]	@ (8005bc4 <pvPortMalloc+0x188>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f040 8095 	bne.w	8005b90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01e      	beq.n	8005aaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4413      	add	r3, r2
 8005a72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d015      	beq.n	8005aaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f023 0307 	bic.w	r3, r3, #7
 8005a84:	3308      	adds	r3, #8
 8005a86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <pvPortMalloc+0x6e>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	617b      	str	r3, [r7, #20]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d06f      	beq.n	8005b90 <pvPortMalloc+0x154>
 8005ab0:	4b45      	ldr	r3, [pc, #276]	@ (8005bc8 <pvPortMalloc+0x18c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d86a      	bhi.n	8005b90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005aba:	4b44      	ldr	r3, [pc, #272]	@ (8005bcc <pvPortMalloc+0x190>)
 8005abc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005abe:	4b43      	ldr	r3, [pc, #268]	@ (8005bcc <pvPortMalloc+0x190>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ac4:	e004      	b.n	8005ad0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d903      	bls.n	8005ae2 <pvPortMalloc+0xa6>
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f1      	bne.n	8005ac6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ae2:	4b37      	ldr	r3, [pc, #220]	@ (8005bc0 <pvPortMalloc+0x184>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d051      	beq.n	8005b90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2208      	movs	r2, #8
 8005af2:	4413      	add	r3, r2
 8005af4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	1ad2      	subs	r2, r2, r3
 8005b06:	2308      	movs	r3, #8
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d920      	bls.n	8005b50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4413      	add	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00b      	beq.n	8005b38 <pvPortMalloc+0xfc>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	613b      	str	r3, [r7, #16]
}
 8005b32:	bf00      	nop
 8005b34:	bf00      	nop
 8005b36:	e7fd      	b.n	8005b34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	1ad2      	subs	r2, r2, r3
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b4a:	69b8      	ldr	r0, [r7, #24]
 8005b4c:	f000 f90a 	bl	8005d64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b50:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc8 <pvPortMalloc+0x18c>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc8 <pvPortMalloc+0x18c>)
 8005b5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <pvPortMalloc+0x18c>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd0 <pvPortMalloc+0x194>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d203      	bcs.n	8005b72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b6a:	4b17      	ldr	r3, [pc, #92]	@ (8005bc8 <pvPortMalloc+0x18c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a18      	ldr	r2, [pc, #96]	@ (8005bd0 <pvPortMalloc+0x194>)
 8005b70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	4b13      	ldr	r3, [pc, #76]	@ (8005bc4 <pvPortMalloc+0x188>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b86:	4b13      	ldr	r3, [pc, #76]	@ (8005bd4 <pvPortMalloc+0x198>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	4a11      	ldr	r2, [pc, #68]	@ (8005bd4 <pvPortMalloc+0x198>)
 8005b8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b90:	f7fe fcea 	bl	8004568 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <pvPortMalloc+0x17a>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	60fb      	str	r3, [r7, #12]
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <pvPortMalloc+0x176>
	return pvReturn;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3728      	adds	r7, #40	@ 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20001d40 	.word	0x20001d40
 8005bc4:	20001d54 	.word	0x20001d54
 8005bc8:	20001d44 	.word	0x20001d44
 8005bcc:	20001d38 	.word	0x20001d38
 8005bd0:	20001d48 	.word	0x20001d48
 8005bd4:	20001d4c 	.word	0x20001d4c

08005bd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d04f      	beq.n	8005c8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bea:	2308      	movs	r3, #8
 8005bec:	425b      	negs	r3, r3
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	4b25      	ldr	r3, [pc, #148]	@ (8005c94 <vPortFree+0xbc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10b      	bne.n	8005c1e <vPortFree+0x46>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60fb      	str	r3, [r7, #12]
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	e7fd      	b.n	8005c1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <vPortFree+0x66>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	60bb      	str	r3, [r7, #8]
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	e7fd      	b.n	8005c3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	4b14      	ldr	r3, [pc, #80]	@ (8005c94 <vPortFree+0xbc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4013      	ands	r3, r2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01e      	beq.n	8005c8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11a      	bne.n	8005c8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	4b0e      	ldr	r3, [pc, #56]	@ (8005c94 <vPortFree+0xbc>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	401a      	ands	r2, r3
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c64:	f7fe fc72 	bl	800454c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c98 <vPortFree+0xc0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4413      	add	r3, r2
 8005c72:	4a09      	ldr	r2, [pc, #36]	@ (8005c98 <vPortFree+0xc0>)
 8005c74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c76:	6938      	ldr	r0, [r7, #16]
 8005c78:	f000 f874 	bl	8005d64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c7c:	4b07      	ldr	r3, [pc, #28]	@ (8005c9c <vPortFree+0xc4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	4a06      	ldr	r2, [pc, #24]	@ (8005c9c <vPortFree+0xc4>)
 8005c84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c86:	f7fe fc6f 	bl	8004568 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c8a:	bf00      	nop
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20001d54 	.word	0x20001d54
 8005c98:	20001d44 	.word	0x20001d44
 8005c9c:	20001d50 	.word	0x20001d50

08005ca0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ca6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005caa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cac:	4b27      	ldr	r3, [pc, #156]	@ (8005d4c <prvHeapInit+0xac>)
 8005cae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00c      	beq.n	8005cd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3307      	adds	r3, #7
 8005cbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0307 	bic.w	r3, r3, #7
 8005cc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	4a1f      	ldr	r2, [pc, #124]	@ (8005d4c <prvHeapInit+0xac>)
 8005cd0:	4413      	add	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d50 <prvHeapInit+0xb0>)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cde:	4b1c      	ldr	r3, [pc, #112]	@ (8005d50 <prvHeapInit+0xb0>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	4413      	add	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cec:	2208      	movs	r2, #8
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0307 	bic.w	r3, r3, #7
 8005cfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4a15      	ldr	r2, [pc, #84]	@ (8005d54 <prvHeapInit+0xb4>)
 8005d00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d02:	4b14      	ldr	r3, [pc, #80]	@ (8005d54 <prvHeapInit+0xb4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d0a:	4b12      	ldr	r3, [pc, #72]	@ (8005d54 <prvHeapInit+0xb4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	1ad2      	subs	r2, r2, r3
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d20:	4b0c      	ldr	r3, [pc, #48]	@ (8005d54 <prvHeapInit+0xb4>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d58 <prvHeapInit+0xb8>)
 8005d2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4a09      	ldr	r2, [pc, #36]	@ (8005d5c <prvHeapInit+0xbc>)
 8005d36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d38:	4b09      	ldr	r3, [pc, #36]	@ (8005d60 <prvHeapInit+0xc0>)
 8005d3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d3e:	601a      	str	r2, [r3, #0]
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	20001138 	.word	0x20001138
 8005d50:	20001d38 	.word	0x20001d38
 8005d54:	20001d40 	.word	0x20001d40
 8005d58:	20001d48 	.word	0x20001d48
 8005d5c:	20001d44 	.word	0x20001d44
 8005d60:	20001d54 	.word	0x20001d54

08005d64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d6c:	4b28      	ldr	r3, [pc, #160]	@ (8005e10 <prvInsertBlockIntoFreeList+0xac>)
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	e002      	b.n	8005d78 <prvInsertBlockIntoFreeList+0x14>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d8f7      	bhi.n	8005d72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d108      	bne.n	8005da6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	441a      	add	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	441a      	add	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d118      	bne.n	8005dec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b15      	ldr	r3, [pc, #84]	@ (8005e14 <prvInsertBlockIntoFreeList+0xb0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d00d      	beq.n	8005de2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	441a      	add	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	e008      	b.n	8005df4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005de2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e14 <prvInsertBlockIntoFreeList+0xb0>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e003      	b.n	8005df4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d002      	beq.n	8005e02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	20001d38 	.word	0x20001d38
 8005e14:	20001d40 	.word	0x20001d40

08005e18 <memset>:
 8005e18:	4402      	add	r2, r0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d100      	bne.n	8005e22 <memset+0xa>
 8005e20:	4770      	bx	lr
 8005e22:	f803 1b01 	strb.w	r1, [r3], #1
 8005e26:	e7f9      	b.n	8005e1c <memset+0x4>

08005e28 <__libc_init_array>:
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	4d0d      	ldr	r5, [pc, #52]	@ (8005e60 <__libc_init_array+0x38>)
 8005e2c:	4c0d      	ldr	r4, [pc, #52]	@ (8005e64 <__libc_init_array+0x3c>)
 8005e2e:	1b64      	subs	r4, r4, r5
 8005e30:	10a4      	asrs	r4, r4, #2
 8005e32:	2600      	movs	r6, #0
 8005e34:	42a6      	cmp	r6, r4
 8005e36:	d109      	bne.n	8005e4c <__libc_init_array+0x24>
 8005e38:	4d0b      	ldr	r5, [pc, #44]	@ (8005e68 <__libc_init_array+0x40>)
 8005e3a:	4c0c      	ldr	r4, [pc, #48]	@ (8005e6c <__libc_init_array+0x44>)
 8005e3c:	f000 f826 	bl	8005e8c <_init>
 8005e40:	1b64      	subs	r4, r4, r5
 8005e42:	10a4      	asrs	r4, r4, #2
 8005e44:	2600      	movs	r6, #0
 8005e46:	42a6      	cmp	r6, r4
 8005e48:	d105      	bne.n	8005e56 <__libc_init_array+0x2e>
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
 8005e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e50:	4798      	blx	r3
 8005e52:	3601      	adds	r6, #1
 8005e54:	e7ee      	b.n	8005e34 <__libc_init_array+0xc>
 8005e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e5a:	4798      	blx	r3
 8005e5c:	3601      	adds	r6, #1
 8005e5e:	e7f2      	b.n	8005e46 <__libc_init_array+0x1e>
 8005e60:	08005f34 	.word	0x08005f34
 8005e64:	08005f34 	.word	0x08005f34
 8005e68:	08005f34 	.word	0x08005f34
 8005e6c:	08005f38 	.word	0x08005f38

08005e70 <memcpy>:
 8005e70:	440a      	add	r2, r1
 8005e72:	4291      	cmp	r1, r2
 8005e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e78:	d100      	bne.n	8005e7c <memcpy+0xc>
 8005e7a:	4770      	bx	lr
 8005e7c:	b510      	push	{r4, lr}
 8005e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e86:	4291      	cmp	r1, r2
 8005e88:	d1f9      	bne.n	8005e7e <memcpy+0xe>
 8005e8a:	bd10      	pop	{r4, pc}

08005e8c <_init>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	bf00      	nop
 8005e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e92:	bc08      	pop	{r3}
 8005e94:	469e      	mov	lr, r3
 8005e96:	4770      	bx	lr

08005e98 <_fini>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr
